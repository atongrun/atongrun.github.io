<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown语法</title>
      <link href="/2023/01/14/%E5%B7%A5%E5%85%B7/markdown/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/01/14/%E5%B7%A5%E5%85%B7/markdown/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><blockquote><p>两个下划线，或者两个星号</p></blockquote><p><em>斜体</em><br><em>斜体</em></p><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><blockquote><p>两个下划线或者两个星号</p></blockquote><p><strong>粗体</strong><br><strong>粗体</strong></p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><blockquote><p>三个星号，或者三个下划线，粗斜体</p></blockquote><p><em><strong>粗斜体</strong></em></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><blockquote><p>前后两个~~</p></blockquote><p><del>删除线</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><blockquote><p><u> </u></p></blockquote><p><u> 下划线</u></p><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><blockquote><p>一个&gt;两个&gt;&gt;三个&gt;&gt;&gt;</p></blockquote><blockquote><p>1</p><blockquote><p>2</p><blockquote><p>3</p></blockquote></blockquote></blockquote><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><blockquote><p>加 : 可以实现左对齐，右对齐，居中，不加默认左对齐 </p></blockquote><table><thead><tr><th align="left">表头</th><th align="left">表头</th><th align="left">表头</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="left">单元格</td><td align="left">单元格</td></tr><tr><td align="left">单元格</td><td align="left">单元格</td><td align="left">单元格</td></tr></tbody></table><h1 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A[Hard] --&gt;|Text| B(Round)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result 1]</span><br><span class="line">C --&gt;|Two| E[Result 2]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">TD</th><th align="center">TB</th><th align="center">BT</th><th align="center">RL</th><th align="center">LR</th></tr></thead><tbody><tr><td align="center">上到下</td><td align="center">上到下</td><td align="center">下到上</td><td align="center">右到左</td><td align="center">左到右</td></tr></tbody></table><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 为什么总是宅在家里？</span><br><span class="line">    &quot;喜欢宅&quot; : 45</span><br><span class="line">    &quot;天气太热&quot; : 70</span><br><span class="line">    &quot;穷&quot; : 500</span><br><span class="line">&quot;关你屁事&quot; : 95</span><br></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Animal &lt;|-- Duck</span><br><span class="line">    Animal &lt;|-- Fish</span><br><span class="line">    Animal &lt;|-- Zebra</span><br><span class="line">    Animal : +int age</span><br><span class="line">    Animal : +String gender</span><br><span class="line">    Animal: +isMammal()</span><br><span class="line">    Animal: +mate()</span><br><span class="line">    class Duck&#123;</span><br><span class="line">      +String beakColor</span><br><span class="line">      +swim()</span><br><span class="line">      +quack()</span><br><span class="line">    &#125;</span><br><span class="line">    class Fish&#123;</span><br><span class="line">      -int sizeInFeet</span><br><span class="line">      -canEat()</span><br><span class="line">    &#125;</span><br><span class="line">    class Zebra&#123;</span><br><span class="line">      +bool is_wild</span><br><span class="line">      +run()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试ing</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊类设计</title>
      <link href="/2023/01/12/CPP/%E7%89%B9%E6%AE%8A%E7%B1%BB%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/01/12/CPP/%E7%89%B9%E6%AE%8A%E7%B1%BB%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="设计不能被拷贝的类"><a href="#设计不能被拷贝的类" class="headerlink" title="设计不能被拷贝的类"></a>设计不能被拷贝的类</h1><blockquote><p>c++11是下边的用法，c++98就是将拷贝构造变成私有，并且只声明并不实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> val):_val(val)&#123;&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; a) = <span class="keyword">delete</span>;</span><br><span class="line">A&amp; <span class="keyword">operator</span>=(<span class="type">const</span> A&amp; a) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="设计只能在堆上创建的类"><a href="#设计只能在堆上创建的类" class="headerlink" title="设计只能在堆上创建的类"></a>设计只能在堆上创建的类</h1><blockquote><p>方案1、将析构函数私有化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">~<span class="built_in">HeapOnly</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HeapOnly* hp = <span class="keyword">new</span> HeapOnly;</span><br><span class="line">hp-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方案2、构造函数私有</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> HeapOnly* <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HeapOnly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防止拷贝</span></span><br><span class="line"><span class="built_in">HeapOnly</span>(<span class="type">const</span> HeapOnly&amp; hp) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">HeapOnly</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HeapOnly* hp = HeapOnly::<span class="built_in">CreatObj</span>();</span><br><span class="line"><span class="keyword">delete</span> hp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>注意：也要把拷贝构造给删除掉</code></pre><h1 id="设计只能在栈上创建的类"><a href="#设计只能在栈上创建的类" class="headerlink" title="设计只能在栈上创建的类"></a>设计只能在栈上创建的类</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">StackOnly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">StackOnly</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackOnly sk = StackOnly::<span class="built_in">CreatObj</span>();</span><br><span class="line"><span class="comment">// 避免不了下边的情况</span></span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">copy</span><span class="params">(sk)</span></span>;</span><br><span class="line">StackOnly* copy2 = <span class="keyword">new</span> <span class="built_in">StackOnly</span>(sk);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决new </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">StackOnly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> n)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">StackOnly</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是静态区的拷贝构造还是不能被禁止。</p><h1 id="设计不能被继承的类"><a href="#设计不能被继承的类" class="headerlink" title="设计不能被继承的类"></a>设计不能被继承的类</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98中构造函数私有化，派生类中调不到基类的构造函数。则无法继承  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonInherit</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="function"><span class="type">static</span> NonInherit <span class="title">GetInstance</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">NonInherit</span>();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="built_in">NonInherit</span>()&#123;&#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在C++11中有了final关键字，修饰类就说明该类不能被继承。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ....  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="设计只能创建一个对象的类（单例）"><a href="#设计只能创建一个对象的类（单例）" class="headerlink" title="设计只能创建一个对象的类（单例）"></a>设计只能创建一个对象的类（单例）</h1><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><blockquote><p>构造函数私有，在静态区创建一个对象，</p></blockquote><ul><li>简单，没有线程安全问题</li><li>一个程序中，多个单例，并且有先后创建初始化的顺序要求时，饿汉无法控制，比如多个文件，就无法控制顺序</li><li>饿汉的单例类，初始化时任务多，会影响程序的启动速度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> A* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;调用fun()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"><span class="type">static</span> A* _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_a = <span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* p = A::<span class="built_in">getInstance</span>();</span><br><span class="line">p-&gt;<span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><blockquote><p>第一次使用对象再创建实例对象</p></blockquote><ul><li>可以控制创建的顺序</li><li>不影响启动速度</li><li>相对复杂，有线程安全问题</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> A* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_a == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_a = <span class="keyword">new</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;调用fun()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个内嵌垃圾回收类    </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CGarbo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">CGarbo</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_a)</span><br><span class="line"><span class="keyword">delete</span> _a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"><span class="type">static</span> A* _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_a = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// 回收对象，main函数结束后，他会调用析构函数，就会释放单例对象</span></span><br><span class="line"><span class="type">static</span> A::CGarbo gc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* p = A::<span class="built_in">getInstance</span>();</span><br><span class="line">p-&gt;<span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例对象释放"><a href="#单例对象释放" class="headerlink" title="单例对象释放"></a>单例对象释放</h2><ul><li>一般情况下，单例对象不需要释放，因为一般整个程序运行期间都可能用它</li><li>单例对象在进程正常结束后，也会资源释放</li><li>有些特殊场景需要释放，比如单例对象析构时，要进行一些持久化操作（往文件数据库写）操作</li><li>释放时，可以做个内部类，如上边代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>智能指针</title>
      <link href="/2023/01/11/CPP/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>/2023/01/11/CPP/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h1><blockquote><p>在了解智能指针之前，我们需要先要了解RAII，那么什么是RAII呢？RAII是一种利用对象生命周期来控制程序资源（如内存、文件句柄、网络链接、互斥量等）的简单技术</p></blockquote><p>具体来说，是在对象构造时获取资源，对资源的控制管理在整个对象的生命周期内都保持有效，并在对象析构时释放资源，也就是将资源的管理托管给一个对象，这有着一些好处：</p><ul><li>不用显示释放资源</li><li>对象所需的资源在其整个生命周期内始终保持有效</li></ul><h2 id="RAII-引入"><a href="#RAII-引入" class="headerlink" title="RAII-引入"></a>RAII-引入</h2><blockquote><p>下边是一段异常相关的代码，main函数调用fun，fun函数先new了块空间，然后调用div函数，但是div函数如果出现除0错误，会抛出异常，直接被main函数捕获，那么fun中的delete就被跳过了。这样导致了内存泄漏问题。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;除0错误&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">div</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上边代码，是有一些方法进行处理的，但是这里可以用RAII的技术解决这个问题，具体看下方代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPtr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPtr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_ptr)</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPtr：申请的资源已经释放&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;除0错误&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SmartPtr&lt;<span class="type">int</span>&gt;sp = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">div</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上边场景我们可以设计一个SmartPtr类，这个类构造函数接收一个资源的管理权，析构函数释放这份资源，那么当创建的对象的生命周期结束后，就自动调用析构函数并释放资源。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102206518.png"></p><h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><blockquote><p>上边的SmartPtr类，就是RAII，但是只有管理资源释放的功能，并没有指针解引用和-&gt;的操作，不能对管理的资源进行控制，那么我们如何让SmartPtr支持像指针一样的行为呢？这里我们将引入智能指针的概念，并且简要的模拟四种库的智能指针，理解原理</p></blockquote><p>智能指针的原理如下：  </p><ol><li>RAII特性  </li><li>重载operator * 和opertaor-&gt;，具有像指针一样的行为。</li></ol><blockquote><p>我们之前实现的SmartPtr其实还存在着其他的问题：就是不能进行拷贝，如果进行拷贝，会出现资源重复释放的问题。</p></blockquote><p>比如下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> _b = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SmartPtr&lt;A&gt;<span class="built_in">ap1</span>(<span class="keyword">new</span> A);</span><br><span class="line"></span><br><span class="line">SmartPtr&lt;A&gt;<span class="built_in">ap2</span>(ap1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果也不出意外的报错了。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102243974.png"></p><h2 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102219593.png"></p><blockquote><p>针对上边拷贝的问题，auto_ptr提供了它的方案，auto_ptr的实现原理：<strong>管理权转移的思想</strong>，但是这种做法并不太好，你一旦拷贝构造，被拷贝的对象就无法使用了，容易出错。</p></blockquote><p>看一下库的auto_ptr，如果对进行拷贝构造，其实是进行资源的转移</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102236948.png"></p><p>我们对auto_ptr进行模拟实现，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">auto_ptr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造要进行管理权的转移</span></span><br><span class="line"><span class="built_in">auto_ptr</span>(auto_ptr&lt;T&gt;&amp; ap)</span><br><span class="line">&#123;</span><br><span class="line">_ptr = ap._ptr;</span><br><span class="line">ap._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(auto_ptr&lt;T&gt;&amp; ap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;ap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr) <span class="comment">// 判断_ptr是否为空</span></span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"></span><br><span class="line">_ptr = ap._ptr;</span><br><span class="line">ap._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">auto_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr)</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102347615.png"></p><blockquote><p>unique_ptr的实现原理：简单粗暴的防拷贝</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">unique_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">unique_ptr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="built_in">unique_ptr</span>(<span class="type">const</span> unique_ptr&lt;T&gt;&amp; up) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> unique_ptr&lt;T&gt;&amp; up) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">unique_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr)</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><pre><code>下边代码有一些开始写成了share_ptr，少了个d，后补上了，导致有一些截图和代码少一个d</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301110001271.png"></p><blockquote><p>auto_ptr和unique_ptr都针对智能指针的拷贝问题上有各自的处理方式，但是都比较呆，很多时候我们是有拷贝指针的需求的，那么这时候share_ptr就登场了。</p></blockquote><p>shared_ptr的原理：是通过引用计数的方式来实现多个shared_ptr对象之间共享资源。  </p><ol><li>shared_ptr在其内部，给每个资源都维护了着一份计数，用来记录该份资源被几个对象共享</li><li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一</li><li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源 </li><li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了。</li></ol><p>如何根据shared_ptr的原理，进行引用计数功能的实现呢？</p><p><strong>方案1、静态成员变量 count计数</strong></p><p>这里是否可行呢？我们试着实现一下，并测试效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shared_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;</span><br><span class="line">_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp._ptr)</span><br><span class="line">&#123;</span><br><span class="line">_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">int</span> shared_ptr&lt;T&gt;::_count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>运行测试：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111412860.png"></p><p>使用静态成员变量确实可以解决拷贝构造导致的重复释放资源的问题，但是，这也会引发新的问题。因为静态成员变量不属于某一个对象，它属于整个类。如果我们再创建一个对象就会引发资源泄漏的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111417078.png"></p><pre><code>这里创建了个sp3，按理说有了两份资源，但是只析构了一次，原因如下。</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111424168.png"></p><p>我们其实期望的是对一份资源的管理，这一份资源要有独立的引用计数，但是用静态成员变量做不到这一点，无论多少份的资源，它们会共享一份引用计数，这样就会导致资源泄漏问题。</p><p>所以，静态成员变量这种方案是不行的，那么应该怎么做呢？我们引入第二种的方案。</p><p><strong>方案2、在堆上申请一块空间做计数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shared_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">,_pcount(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp._ptr)</span><br><span class="line">,_pcount(sp._pcount)</span><br><span class="line">&#123;</span><br><span class="line">(*_pcount)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// share_ptr&lt;A&gt;sp1(new A)</span></span><br><span class="line"><span class="comment">// share_ptr&lt;A&gt;sp2(sp1)</span></span><br><span class="line"><span class="comment">// sp1 = sp2</span></span><br><span class="line"><span class="comment">// 为了防止上边场景，用_ptr判断更好</span></span><br><span class="line"><span class="keyword">if</span> (_ptr == sp._ptr) </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --被赋值对象的计数，如果是最后一个对象要释放资源</span></span><br><span class="line"><span class="keyword">if</span> (--(*_pcount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"><span class="keyword">delete</span> _pcount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共管新资源，++计数</span></span><br><span class="line">_ptr = sp._ptr;</span><br><span class="line">_pcount = sp._pcount;</span><br><span class="line"></span><br><span class="line">(*_pcount)++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--(*_pcount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"><span class="keyword">delete</span> _pcount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"><span class="type">int</span>* _pcount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行结果如下：可以看到解决了上边的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111508572.png"></p><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111514694.png"></p><blockquote><p>我们的shared_ptr看起来已经很厉害了，那这个weak_ptr又有什么作用呢？这里就要看shared_ptr潜在的一个问题了。</p></blockquote><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><blockquote><p>问题的引入：我们有个节点类，用shared_ptr会发生什么样的问题，我们来看一下下面</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111622216.png"></p><pre><code>上边说share_ptr的对象不能给Node*，我们可以更改一个Node类，将前后指针改成智能指针。</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111624432.png"></p><pre><code>经过更改后发现没有任何的问题，shared_ptr好像完美的胜任了节点的指针这个角色</code></pre><p>我们继续看一个场景：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111626436.png"></p><pre><code>当我们加上sp2-&gt;_pre=sp1时，就出现问题了，运行结果是两个节点都没有释放，这是为啥呢，非常奇怪的问题。</code></pre><blockquote><p>这里我们就要引出，循环引用的概念了。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111651493.png"></p><p>这时候就出现了循环引用的问题，导致了两边的资源都没有没释放，这时候就引入了weak_ptr来解决这个问题。</p><blockquote><p>解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了</p></blockquote><p>sp1-&gt; _ next &#x3D; sp2；sp2-&gt;_ pre &#x3D; sp1；时weak_ptr的_next和_ prev不会增加sp1和sp2的引用计数。</p><p>我们再看一下运行结果，发现问题已经被解决。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111706127.png"></p><h3 id="weak-ptr模拟"><a href="#weak-ptr模拟" class="headerlink" title="weak_ptr模拟"></a>weak_ptr模拟</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">weak_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">weak_ptr</span>()</span><br><span class="line">:_ptr(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp.<span class="built_in">get</span>())</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> weak_ptr&lt;T&gt;&amp; wp)</span><br><span class="line">:_ptr(wp._ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line">_ptr = sp.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>切换成st的命名空间，结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112019787.png"></p><p>也实现了库中weak_ptr的效果，解决了循环引用的问题。</p><h1 id="定制删除器"><a href="#定制删除器" class="headerlink" title="定制删除器"></a>定制删除器</h1><blockquote><p>定制删除器是针对智能指针管理的类型定制专用的删除器，如果没有制删除器可能会出现一些错误。</p></blockquote><p>比如下边代码，用了库里面的shared_ptr</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt;<span class="built_in">s1</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]);</span><br><span class="line">std::shared_ptr&lt;Node&gt;<span class="built_in">sp2</span>(<span class="keyword">new</span> Node[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112050260.png"></p><pre><code>可以看到程序直接崩溃了，其实第一个还没有崩，第二个Node[5]那里才崩溃掉</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112104024.png"></p><p>由于释放的位置不对导致程序崩溃掉。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112105450.png"></p><p>可以通过定制删除器解决这个问题，也就是传个函数对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete[]&quot;</span> &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Free</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;free&quot;</span> &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 仿函数对象</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n1</span><span class="params">(<span class="keyword">new</span> Node[<span class="number">5</span>], DeleteArray&lt;Node&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">n3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>], DeleteArray&lt;<span class="type">int</span>&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">n4</span><span class="params">((<span class="type">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="number">12</span>)), Free&lt;<span class="type">int</span>&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">m1</span><span class="params">(<span class="keyword">new</span> Node[<span class="number">5</span>], [](Node* ptr)&#123;<span class="keyword">delete</span>[] ptr; &#125;)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">m2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">m3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>], [](<span class="type">int</span>* ptr)&#123;<span class="keyword">delete</span>[] ptr; &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">m4</span><span class="params">((<span class="type">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="number">12</span>)), [](<span class="type">int</span>* ptr)&#123;free(ptr); &#125;)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">m5</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* ptr)&#123;fclose(ptr); &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">主要unique是在模板参数这里</span><br><span class="line"><span class="comment">//std::unique_ptr&lt;Node, DeleteArray&lt;Node&gt;&gt; up(new Node[5]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模拟完善shared-ptr"><a href="#模拟完善shared-ptr" class="headerlink" title="模拟完善shared_ptr"></a>模拟完善shared_ptr</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">D</span> = Delete&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> shared_ptr</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">: _ptr(ptr)</span><br><span class="line">, _pCount(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">Release</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--(*_pCount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">D</span>()(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _pCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Release</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">: _ptr(sp._ptr)</span><br><span class="line">, _pCount(sp._pCount)</span><br><span class="line">&#123;</span><br><span class="line">(*_pCount)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if (this == &amp;sp)</span></span><br><span class="line"><span class="keyword">if</span> (_ptr == sp._ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Release</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共管新资源，++计数</span></span><br><span class="line">_ptr = sp._ptr;</span><br><span class="line">_pCount = sp._pCount;</span><br><span class="line"></span><br><span class="line">(*_pCount)++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">use_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *_pCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数</span></span><br><span class="line"><span class="type">int</span>* _pCount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的模拟定制删除器的功能，是简单版的通过模板参数控制</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112131999.png"></p>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++异常</title>
      <link href="/2023/01/09/CPP/%E5%BC%82%E5%B8%B8/"/>
      <url>/2023/01/09/CPP/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们写代码的过程中，出现错误是非常常见的事情，如何对一些异常进行合理方式的处理是非常重要的问题，c语言有c语言的方法，当然，cpp作为oop的语言当然也有它的一套体系。</p></blockquote><h1 id="C语言处理错误的方式"><a href="#C语言处理错误的方式" class="headerlink" title="C语言处理错误的方式"></a>C语言处理错误的方式</h1><h2 id="c错误处理方式"><a href="#c错误处理方式" class="headerlink" title="c错误处理方式"></a>c错误处理方式</h2><ol><li><p><strong>终止程序</strong>：比如assert，缺点：有些问题会直接退出会让用户非常难受，比如出现网络错误，我们通常希望的是告警，而不是进程退出。</p></li><li><p><strong>返回错误码</strong>：返回错误码的方式并不直观，比如返回一个5，并不能直接知道出了什么错误，必须要查对应的的错误。</p><p> 大部分情况c还是采用返回错误码的方式处理错误，部分情况使用终止进程处理特别严重的错误。</p></li></ol><h1 id="C-异常概念"><a href="#C-异常概念" class="headerlink" title="C++异常概念"></a>C++异常概念</h1><blockquote><p>异常是什么？其实是一种处理错误的方式，当一个函数遇到无法处理的错误时，就可以抛出异常，让函数可以直接或者间接的调用者去处理这个错误。</p></blockquote><p>大概形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// 保护的标识代码  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName e1 )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName e2 )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName eN )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常的使用"><a href="#异常的使用" class="headerlink" title="异常的使用"></a>异常的使用</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><blockquote><p>使用异常前，先认识一下异常的关键字</p></blockquote><ul><li><strong>throw</strong>：抛出异常关键字，可以抛出任意的东西（字符串、整数…）</li><li><strong>try</strong>：括号内的代码就是可能会出现异常的地方。</li><li><strong>catch</strong>：能捕捉抛出的异常，当然要类型对应。</li></ul><h2 id="异常规则"><a href="#异常规则" class="headerlink" title="异常规则"></a>异常规则</h2><h3 id="异常的抛出和捕获"><a href="#异常的抛出和捕获" class="headerlink" title="异常的抛出和捕获"></a>异常的抛出和捕获</h3><ul><li>抛出对象的类型严格匹配catch类型</li><li>抛出对象匹配最近的catch</li><li>抛出的是对象的拷贝</li><li>catch(…) 可以捕捉任意类型的异常，用来兜底</li><li>可以抛派生类对象，用父类进行捕获</li></ul><h4 id="类型匹配例子："><a href="#类型匹配例子：" class="headerlink" title="类型匹配例子："></a>类型匹配例子：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试扔出三种类型，匹配对应的catch</span></span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw 0;</span></span><br><span class="line"><span class="comment">//throw string(&quot;除0错误&quot;);</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a/b=&quot;</span> &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> errid)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errid：&quot;</span> &lt;&lt; errid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">char</span> errch)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errch：&quot;</span> &lt;&lt; errch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> string&amp; errstr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errstr：&quot;</span> &lt;&lt; errstr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，匹配对应的catch</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301082345139.png"></p><h4 id="子类异常基类捕获"><a href="#子类异常基类捕获" class="headerlink" title="子类异常基类捕获"></a>子类异常基类捕获</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exception</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Exception</span>(<span class="type">const</span> string&amp; errmsg, <span class="type">int</span> id)</span><br><span class="line">:_errmsg(errmsg)</span><br><span class="line">, _id(id)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">what</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _errmsg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getid</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _errmsg;   <span class="comment">// 错误信息</span></span><br><span class="line"><span class="type">int</span> _id;          <span class="comment">// 错误码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorA</span> : <span class="keyword">public</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ErrorA</span>(<span class="type">const</span> string&amp; errmsg, <span class="type">int</span> id, <span class="type">const</span> string&amp; errorA)</span><br><span class="line">:<span class="built_in">Exception</span>(errmsg,id)</span><br><span class="line">,_errA(errorA)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">what</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = _errmsg + <span class="string">&quot; &quot;</span> + _errA;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string _errA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rand</span>() % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">ErrorA</span>(<span class="string">&quot;错误：&quot;</span>, <span class="number">100</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未知错误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301090028259.png"></p><h3 id="在函数调用链中异常展开匹配规则"><a href="#在函数调用链中异常展开匹配规则" class="headerlink" title="在函数调用链中异常展开匹配规则"></a>在函数调用链中异常展开匹配规则</h3><ul><li>现在当前栈帧中看</li><li>没有去上一层栈帧</li><li>如果到了main栈帧还未匹配，终止程序</li><li>catch处理后，会继续执行之后的语句</li></ul><h4 id="函数调用例子"><a href="#函数调用例子" class="headerlink" title="函数调用例子"></a>函数调用例子</h4><blockquote><p>代码大致如上方代码，但是fun函数里面调用了div函数，并在fun函数里面进行异常捕获，同样的在main函数中，也对fun进行异常的捕获</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw 0;</span></span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">string</span>(<span class="string">&quot;除0错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a/b=&quot;</span> &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">div</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> errid)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun中catch：&quot;</span> &lt;&lt; errid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">![](https:<span class="comment">//tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301082359524.png)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 异常栈帧展开</span><br><span class="line"></span><br><span class="line">![](https:<span class="comment">//tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301090003458.png)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 异常安全</span><br><span class="line"></span><br><span class="line">+ 最好不要在构造函数中抛出异常，可能导致构造对象不完整</span><br><span class="line">+ 最好不要在析构函数中抛出异常，可能会导致资源泄露</span><br><span class="line">+ C++中异常经常会导致资源泄漏的问题，比如在<span class="keyword">new</span>和<span class="keyword">delete</span>中抛出了异常，导致内存泄漏，在lock和unlock之间抛出了异常导致死锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如下面的场景：</span><br><span class="line">&gt; 如果发生异常，就不会执行<span class="keyword">delete</span>，这样导致了资源泄漏，当然可以在Func中的<span class="keyword">catch</span>中再增加<span class="keyword">delete</span>，但是还有隐藏的问题，比如，array1成功，array2失败，arr2抛异常，会抛到main函数栈帧中。会导致array1得不到释放。</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="type">void</span> <span class="built_in">Func</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这里可以看到如果发生除0错误抛出异常，另外下面的array没有得到释放。</span></span><br><span class="line"><span class="comment">// 所以这里捕获异常后并不处理异常，异常还是交给外面处理，这里捕获了再</span></span><br><span class="line"><span class="comment">// 重新抛出去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐患，第一个成功，第二个失败</span></span><br><span class="line">    <span class="comment">// 可以解决，但是很麻烦，这样的问题一般是用智能指针解决</span></span><br><span class="line"><span class="type">int</span>* array1 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>* array2 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len, time;</span><br><span class="line">cin &gt;&gt; len &gt;&gt; time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Division</span>(len, time) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 若第一个new成功，第二个失败，这里还要delete arr2</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array2; </span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span>; <span class="comment">// 捕获什么抛出什么</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* errmsg)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常规范"><a href="#异常规范" class="headerlink" title="异常规范"></a>异常规范</h2><ol><li>异常规格说明的目的是为了让函数使用者知道该函数可能抛出的异常有哪些。 可以在函数的后面接throw(类型)，列出这个函数可能抛掷的所有异常类型。  </li><li>函数的后面接throw()，表示函数不抛异常。  </li><li>若无异常接口声明，则此函数可以抛掷任何类型的异常</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里表示这个函数会抛出A/B/C/D中的某种类型的异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> <span class="title">throw</span><span class="params">(A，B，C，D)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里表示这个函数只会抛出bad_alloc的异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(std::<span class="type">size_t</span> size)</span> <span class="title">throw</span> <span class="params">(std::bad_alloc)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里表示这个函数不会抛出异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">delete</span> <span class="params">(std::<span class="type">size_t</span> size, <span class="type">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 中新增的noexcept，表示不会抛异常  </span></span><br><span class="line"><span class="built_in">thread</span>() <span class="keyword">noexcept</span>;  </span><br><span class="line"><span class="built_in">thread</span> (thread&amp;&amp; x) <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><h1 id="异常的优缺点"><a href="#异常的优缺点" class="headerlink" title="异常的优缺点"></a>异常的优缺点</h1><h2 id="C-异常优点"><a href="#C-异常优点" class="headerlink" title="C++异常优点"></a>C++异常优点</h2><ol><li>异常对象定义好之后，相比错误码的方式更能清晰准确的展示出错误的各种信息，甚至可以包含调用堆栈的信息，可以更容易定位程序bug</li><li>可以直接跳出到catch捕捉的地方，而不用像错误码一样层层返回。</li><li>很多第三方库包含异常</li><li>部分函数使用异常更好处理，比如构造函数没有返回值，不方便使用错误码方式处理，方括号的重载，pos越界错误，只能通过异常或者终止程序。</li></ol><h2 id="C-异常缺点"><a href="#C-异常缺点" class="headerlink" title="C++异常缺点"></a>C++异常缺点</h2><ol><li>执行流可能会乱跳，运行时抛出，会比较的混乱</li><li>有性能开销</li><li>容易导致内存泄漏、死锁安全问题</li><li>C++标准体系定义不好，导致大家自定义各自的异常体系，十分混乱</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常尽量规范使用，不要随便抛异常，遵守如下：</p><ul><li>所有异常类型都继承于一个基类</li><li>函数是否抛异常，抛什么异常，都使用 fun() throw(); 的方式规范化。</li></ul><p>异常总体来说，利大于弊。</p>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++11（下篇）</title>
      <link href="/2023/01/03/CPP/C++11%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
      <url>/2023/01/03/CPP/C++11%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="类的新功能"><a href="#类的新功能" class="headerlink" title="类的新功能"></a>类的新功能</h1><h2 id="默认成员函数"><a href="#默认成员函数" class="headerlink" title="默认成员函数"></a>默认成员函数</h2><p>在以前的C++类中，有6个默认成员函数：</p><ol><li>构造函数  </li><li>析构函数  </li><li>拷贝构造函数  </li><li>拷贝赋值重载  </li><li>取地址重载  </li><li>const 取地址重载</li></ol><p>比较重要的是前4个，后两个的用处并不大，默认的成员函数就是我们不写编译器会生成一个默认的。</p><blockquote><p>在C++11中，新增了两个默认成员函数</p></blockquote><ol><li>移动构造函数</li><li>移动赋值运算符重载</li></ol><p>针对这两个新的默认成员函数，有了新的注意事项：</p><p>1、如果<strong>没有自己实现移动构造</strong>，<strong>且没有实现析构函数、拷贝构造、拷贝赋值重载中的任何一个</strong>，那么编译器会自动生成一个<strong>默认移动构造</strong>。</p><p>让我们来看个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> <span class="type">char</span>* name = <span class="string">&quot;&quot;</span>, <span class="type">int</span> age = <span class="number">0</span>)</span><br><span class="line">:_name(name)</span><br><span class="line">, _age(age)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">st::string _name;</span><br><span class="line"><span class="type">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">s1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">Person s2 = std::<span class="built_in">move</span>(s1); <span class="comment">// 移动构造 （没有移动构造，再调用拷贝构造）</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的这个Person类，只自己实现了一个构造函数，析构、拷贝构造、拷贝赋值重载都未手动实现，Person的_name成员用的自己模拟实现的string类。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021417868.png"></p><p>可以看到，调用了string的移动构造，那么如果我们在Person类中加个析构结果是什么样呢？</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021418203.png"></p><p>这里就调用了拷贝构造，原因是有了析构，就不再生成默认的移动构造函数。</p><p>2、默认生成的移动构造</p><ul><li>对于<strong>内置类型会逐字节拷贝</strong></li><li>对于<strong>自定义类型</strong>，则需要看这个成员是否实现了移动构造，如果<strong>实现了就调用移动构造，没有实现就调用拷贝构造</strong>。（如下图所示）</li></ul><blockquote><p>当删除了string类的移动构造后</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021436581.png"></p><p>3、默认生成的移动赋值和默认生成的移动构造完全类似。</p><p>4、如果提供了移动构造或者移动赋值，编译器不会自动提供拷贝构造和拷贝赋值。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021427141.png"></p><h2 id="default和delete"><a href="#default和delete" class="headerlink" title="default和delete"></a>default和delete</h2><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><blockquote><p>强制生成默认函数</p></blockquote><p>我们知道对于类来说有时候会需要生成默认成员函数，比如我们实现了有参的构造，无参构造就不会默认生成，或者实现了拷贝构造，默认生成的移动构造就不会生成。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021450459.png"></p><p>上图场景是我们实现了拷贝构造，那么默认的移动构造就不会生成，我们强制生成之后实现了我们想要的效果。</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><blockquote><p>禁止生成默认函数的关键字</p></blockquote><p>比如要求delete关键字实现，一个类，只能在堆上创建对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HeapOnly</span>()</span><br><span class="line">&#123;</span><br><span class="line">_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">HeapOnly</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span>[] _str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* _str;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只需要：**~HeapOnly() &#x3D; delete**;</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021502973.png"></p><p>这样在栈和静态区都不能创建对象。如果要创建对象只能在堆上创建。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021520043.png"></p><pre><code>注意，destroy() 函数，第一是释放 char* 的那个空间，第二个是要释放ptr指向的那段空间。释放ptr指向的空间要用 operator delete()，因为 delete会调用析构</code></pre><h1 id="可变参数模板"><a href="#可变参数模板" class="headerlink" title="可变参数模板"></a>可变参数模板</h1><blockquote><p>C++11的新特性可变参数模板能够创建可以接受可变参数的函数模板和类模板</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021533875.png"></p><pre><code>我们把带省略号的参数称为“参数包”，它里面包含了0到N（N&gt;=0）个模版参数，比如args里面有三个参数包，这里需要注意，参数包里面的内容不能直接取出来。也不能用方括号直接访问</code></pre><p>可以用<strong>sizeof…(args)</strong> 计算参数包有几个参数。</p><h2 id="递归函数方式展开参数包"><a href="#递归函数方式展开参数包" class="headerlink" title="递归函数方式展开参数包"></a>递归函数方式展开参数包</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021547497.png"></p><h2 id="逗号表达式展开参数包"><a href="#逗号表达式展开参数包" class="headerlink" title="逗号表达式展开参数包"></a>逗号表达式展开参数包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintArg</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowList</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; (<span class="built_in">PrintArg</span>(args), <span class="number">0</span>)... &#125;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ShowList</span>(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>C++11的另外一个特性——初始化列表，通过初始化列表来初始化一个变长数组, &#123;(printarg(args), 0)...&#125;将会展开成((printarg(arg1),0),  (printarg(arg2),0), (printarg(arg3),0), etc... )，最终会创建一个元素值都为0的数组int arr[sizeof...(args)],也就是说在构造int数组的过程中就将参数包展开了，这个数组的目的纯粹是为了在数组构造的过程展开参数包</code></pre><p>也可以这样：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/20230102160429.png"></p><h2 id="STL容器中的empalce相关接口函数"><a href="#STL容器中的empalce相关接口函数" class="headerlink" title="STL容器中的empalce相关接口函数"></a>STL容器中的empalce相关接口函数</h2><h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back"></a>push_back</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021616978.png"></p><p>下边这种场景，是一个构造加拷贝构造，或者构造加移动构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;bit::string, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021617720.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>));</span><br><span class="line">v.<span class="built_in">emplace_back</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021613445.png"></p><p>可以看到vector，测试两种方式没有区别，但是list测试，emplace_back更高效，因为只有一次构造，参数传递的参数包直接构造到List的节点上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于内置类型来说，两种并无区别，对自定义类型来说，一些容器，比如list可以直接将参数包构造到容器的对象上面。更高效一些。</p><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><blockquote><p>像函数使用的对象&#x2F;类型</p></blockquote><ol><li>函数指针</li><li>仿函数&#x2F;函数对象</li><li>lambda</li></ol><h2 id="lambda语法"><a href="#lambda语法" class="headerlink" title="lambda语法"></a>lambda语法</h2><blockquote><p>格式： [捕捉列表] (参数列表) mutable -&gt; 返回值类型 {函数体}</p></blockquote><p>来个例子：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021646421.png"></p><p>看一下f的类型：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021651018.png"></p><p>具体说明：</p><ul><li><strong>捕捉列表</strong>：译器根据 [] 来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用。</li><li><strong>参数列表</strong>：和普通函数列表一致，如果不需要参数传递可以省略()。</li><li><strong>mutable</strong> ：默认情况下，lambda函数总是一个const函数，mutable可以取消常量性，使用该修饰符时，不能省略()</li><li><strong>返回值类型</strong>：与常规函数一样，可以省略</li><li><strong>函数体</strong>：除了使用参数外，还可以使用捕捉的变量。</li></ul><p>注意：</p><p>在lambda函数定义中，<strong>参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空</strong>，C++11中，最简单的lambda函数为：[] () ；该函数不能做任何事情，只是符合语法。</p><blockquote><p>看一个mutable的使用</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021717343.png"></p><p>这里值捕获x和y，但是这个lambda默认是const的函数。修改了x和y所以会报错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> swap3 = [x, y]()<span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>加上mutable就可以，不过也没有起到交换的作用，因为是值捕捉。</p><h2 id="捕捉列表"><a href="#捕捉列表" class="headerlink" title="捕捉列表"></a>捕捉列表</h2><ul><li>[var]：表示值传递方式捕捉变量var  </li><li>[&#x3D;]：表示值传递方式捕获所有父作用域中的变量(包括this)  </li><li>[&amp;var]：表示引用传递捕捉变量var  </li><li>[&amp;]：表示引用传递捕捉所有父作用域中的变量(包括this)  </li><li>[this]：表示值传递方式捕捉当前的this指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> swap3 = [&amp;x, &amp;y]</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一些常见用法看下边例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、生命周期（存储区域）</span></span><br><span class="line"><span class="comment">//2、作用域（编译器编译，用的地方能否找到）</span></span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">a = b = c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部传值捕捉</span></span><br><span class="line"><span class="keyword">auto</span> f1 = [=]() &#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合捕捉</span></span><br><span class="line"><span class="keyword">auto</span> f2 = [=, &amp;a]() &#123;</span><br><span class="line">a++;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f4 = [&amp;]()</span><br><span class="line">&#123;</span><br><span class="line">f++; <span class="comment">//没问题，可以捕捉全局变量</span></span><br><span class="line">x++; <span class="comment">//错误，x是静态变量，但是它的作用域是fun</span></span><br><span class="line">cout &lt;&lt; f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f4</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda底层细节"><a href="#lambda底层细节" class="headerlink" title="lambda底层细节"></a>lambda底层细节</h2><p>看一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rate</span>(<span class="type">double</span> rate) : _rate(rate)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span> money, <span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money * _rate * year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> _rate;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> rate = <span class="number">0.49</span>;</span><br><span class="line"><span class="function">Rate <span class="title">r1</span><span class="params">(rate)</span></span>;</span><br><span class="line"><span class="built_in">r1</span>(<span class="number">10000</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> r2 = [=](<span class="type">double</span> monty, <span class="type">int</span> year)-&gt;<span class="type">double</span>&#123;<span class="keyword">return</span> monty*rate*year; &#125;;</span><br><span class="line"><span class="built_in">r2</span>(<span class="number">10000</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码r1是个函数对象，r2是lambda，转到反汇编看看，这两个的区别。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032135781.png"></p><p>由上图可以看出，r1和r2都是调用了重载的方括号，实际在底层编译器对于lambda表达式的处理方式，完全就是按照函数对象的方式处理的，即：<strong>如果定义了一个lambda表达式，编译器会自动生成一个类，在该类中重载了operator()</strong></p><p>编译器生成了个类似下边的东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda_uuid</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lambda_xxxx</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="包装器"><a href="#包装器" class="headerlink" title="包装器"></a>包装器</h1><h2 id="function包装器引入"><a href="#function包装器引入" class="headerlink" title="function包装器引入"></a>function包装器引入</h2><blockquote><p>function包装器 也叫作适配器。C++中的function本质是一个类模板，也是一个包装器。为什么需要function呢？可以看一个场景</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = <span class="built_in">func</span>(x);</span><br></pre></td></tr></table></figure><p>func可能是函数名、函数指针、函数对象(仿函数对象)、也有可能<br>是lamber表达式对象，这些都有可能。</p><p>看个demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">useF</span><span class="params">(F f, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count:&quot;</span> &lt;&lt; ++count &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count:&quot;</span> &lt;&lt; &amp;count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">f</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> i)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Functor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> d / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数指针</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数对象</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(<span class="built_in">Functor</span>(), <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lamber表达式对象</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>([](<span class="type">double</span> d)-&gt;<span class="type">double</span>&#123; <span class="keyword">return</span> d / <span class="number">4</span>; &#125;, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>useF是个函数模板，依次将函数指针，函数对象，lambda传入，运行看一下</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032203951.png"></p><p>可以看到静态变量count三次的地址都不一样，说明这个函数模板实例化出来三份代码。</p><p>我们上包装器：</p><h2 id="function包装器用法"><a href="#function包装器用法" class="headerlink" title="function包装器用法"></a>function包装器用法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032213439.png"></p><blockquote><p>function在在头文件 &lt; functional &gt;</p></blockquote><p>模板参数说明：  </p><ul><li>Ret: 被调用函数的返回类型  </li><li>Args…：被调用函数的形参</li></ul><p>我们改造上面的程序，用包装器包装起来。注意模板参数那里的写法，<strong>先是返回值类型然后小括号里面的参数列表的类型</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数指针</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f1 = f;</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f1, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数对象</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f2 = <span class="built_in">Functor</span>();</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f2, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lamber表达式对象</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f3 = [](<span class="type">double</span> d)-&gt;<span class="type">double</span> &#123; <span class="keyword">return</span> d / <span class="number">4</span>; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f3, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下运行结果</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032216604.png"></p><p>可以看到count的三个地址相同，说明只实例化出了一份代码。一定程度的解决模板效率低下，实例化多份的问题。</p><blockquote><p>用法注意：对于类的静态成员函数和普通成员函数用法的区别。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plus</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">plusi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">plusd</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; f1 = Plus::plusi;</span><br><span class="line"><span class="built_in">f1</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">double</span>(Plus, <span class="type">double</span>, <span class="type">double</span>)&gt; f2 = &amp;Plus::plusd;</span><br><span class="line"><span class="built_in">f2</span>(<span class="built_in">Plus</span>(), <span class="number">1.1</span>, <span class="number">2.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>静态成员函数只需要加域限定符即可，但是类的成员函数，不仅仅需要域限定符，调用成员函数，前面还需要加取地址的符号，参数列表要增加类名。</code></pre><p>普通的类成员函数包装又有了新的问题，同样以上方代码为例，两个功能类似的函数，包装器确不一样，这个可以解决吗？这时候就引入了我们的bind</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032247071.png"></p><blockquote><p>std::bind是一个函数模板，它就像一个函数包装器(适配器)，接受一个可调用对象，生成一个新的可调用对象来“适应”原对象的参数列表。一般而言，我们用它可以把一个原本接收N个参数的函数fn，通过绑定一些参数，返回一个接收M个（M可以大于N，但这么做没什么意义）参数的新函数。同时，使用std::bind函数还可以实现参数顺序调整等操作</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032248465.png"></p><pre><code> _1 _2.... 定义在placeholders命名空间中，代表绑定函数对象的形参， _1，_2...分别代表第一个形参、第二个形参...</code></pre><p>看个具体用法：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032256943.png"></p><p>绑定后，形参的顺序得以改变（用处不是很大）</p><p>更实用的用法：调整个数，绑定死固定参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Plus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">double</span> rate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b * rate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcPlus = Plus;</span><br><span class="line"><span class="comment">//function&lt;int(Sub, int, int)&gt; funcSub = &amp;Sub::sub;</span></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcSub = <span class="built_in">bind</span>(&amp;Sub::sub, <span class="built_in">Sub</span>(), _1, _2);</span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcMul = <span class="built_in">bind</span>(Mul, _1, _2, <span class="number">1.5</span>);</span><br><span class="line">map&lt;string, function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt; opFuncMap =</span><br><span class="line">&#123;</span><br><span class="line">&#123; <span class="string">&quot;+&quot;</span>, Plus&#125;,</span><br><span class="line">&#123; <span class="string">&quot;-&quot;</span>, <span class="built_in">bind</span>(&amp;Sub::sub, <span class="built_in">Sub</span>(), _1, _2)&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;funcPlus(1, 2)=&quot;</span> &lt;&lt; <span class="built_in">funcPlus</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;funcSub(1, 2)=&quot;</span> &lt;&lt; <span class="built_in">funcSub</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;funcMul(2, 2)=&quot;</span>&lt;&lt; <span class="built_in">funcMul</span>(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;opFuncMap[\&quot; + \&quot;](1, 2)=&quot;</span> &lt;&lt; opFuncMap[<span class="string">&quot;+&quot;</span>](<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;opFuncMap[\&quot; - \&quot;](1, 2)=&quot;</span> &lt;&lt; opFuncMap[<span class="string">&quot;-&quot;</span>](<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>, y = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Div(2,10)=&quot;</span> &lt;&lt; <span class="built_in">Div</span>(x, y) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032307091.png"></p>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11（右值）</title>
      <link href="/2022/12/30/CPP/C++11(%E5%8F%B3%E5%80%BC)/"/>
      <url>/2022/12/30/CPP/C++11(%E5%8F%B3%E5%80%BC)/</url>
      
        <content type="html"><![CDATA[<h1 id="右值引用和移动语义"><a href="#右值引用和移动语义" class="headerlink" title="右值引用和移动语义"></a>右值引用和移动语义</h1><blockquote><p>传统的C++语法中就有引用的语法，而C++11中新增了的右值引用语法特性，所以从现在开始我们之前学习的引用就叫做左值引用。无论左值引用还是右值引用，都是给对象取别名。</p></blockquote><h2 id="右值引入"><a href="#右值引入" class="headerlink" title="右值引入"></a>右值引入</h2><blockquote><p>在以前我们知道有引用的语法，我们通常叫做左值引用，那么什么是左值呢？可以看下边的几个例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 左值：可以取它的地址</span></span><br><span class="line"><span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">const int b = 20;</span></span><br><span class="line"><span class="comment">int* p = &amp;a;</span></span><br><span class="line"><span class="comment">*p = 100;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的p、b、c、*p都是左值</span></span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个是对上面左值的左值引用</span></span><br><span class="line"><span class="type">int</span>*&amp; rp = p;</span><br><span class="line"><span class="type">int</span>&amp; rb = b;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; rc = c;</span><br><span class="line"><span class="type">int</span>&amp; pvalue = *p;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> x = <span class="number">1.1</span>, y = <span class="number">2.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，左值，<strong>可以获取它的地址+可以对它赋值</strong>。当然定义时用const修饰的左值，也不能对他赋值，但是可以<strong>取地址</strong>。左值引用呢，就是给左值的引用。</p><blockquote><p>知道左值后，那么什么是右值呢？右值的形式是什么？右值有什么实际价值？看几个例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 右值:不能取地址</span></span><br><span class="line"><span class="number">10</span>; </span><br><span class="line">x + y;</span><br><span class="line"><span class="built_in">fmin</span>(x, y);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &amp;10 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &amp;(x + y) &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个都是对右值的右值引用</span></span><br><span class="line"><span class="type">int</span>&amp;&amp; rr1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span>&amp;&amp; rr2 = x + y;</span><br><span class="line"><span class="type">double</span>&amp;&amp; rr3 = <span class="built_in">fmin</span>(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里编译会报错</span></span><br><span class="line"><span class="number">10</span> = <span class="number">1</span>;</span><br><span class="line">x + y = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">fmin</span>(x, y) = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上几个例子都是右值，右值也是一个表达数据的表达式，如字面常量、表达式返回值，函数返回值（这个不能是左值引用返回）等等，<strong>右值可以出现在赋值符号右边，但是不能出现在赋值符号的左边，右值不能取地址</strong>。</p><blockquote><p>右值引用就是对右值的引用，给右值取别名</p></blockquote><h2 id="左值右值"><a href="#左值右值" class="headerlink" title="左值右值"></a>左值右值</h2><blockquote><p>左值引用可以引用右值吗？右值引用可以引用右值吗？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有条件的支持</span></span><br><span class="line"><span class="comment">// 左值引用可以引用右值吗？ const的左值引用可以</span></span><br><span class="line"><span class="comment">//double&amp; r1 = x + y;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span>&amp; r1 = x + y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右值引用可以引用左值吗？可以引用move以后的左值</span></span><br><span class="line"><span class="comment">//int&amp;&amp; rr5 = b;</span></span><br><span class="line"><span class="type">int</span>&amp;&amp; rr5 = <span class="built_in">move</span>(b);</span><br></pre></td></tr></table></figure><p>这里注意：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212281629905.png"></p><p>11是字面常量，Func函数参数列表是个左值引用，所以会报错，两种修改方法：</p><ul><li>Func(const T&amp; x) </li><li>Func(T&amp;&amp; x)</li></ul><p>第一种方法：<strong>const的左值引用可以接收右值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x既能接收左值，也能接收右值</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="左右值总结"><a href="#左右值总结" class="headerlink" title="左右值总结"></a>左右值总结</h2><h3 id="左值引用总结"><a href="#左值引用总结" class="headerlink" title="左值引用总结"></a>左值引用总结</h3><ol><li>左值引用只能引用左值。</li><li>但是const左值引用既可引用左值，也可引用右值。</li></ol><h3 id="右值引用总结"><a href="#右值引用总结" class="headerlink" title="右值引用总结"></a>右值引用总结</h3><ol><li>右值引用只能引用右值，不能引用左值</li><li>右值引用可以引用move之后的左值</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212301753811.png"></p><p>rr1和rr2可以取地址了，它们是左值了。</p><h2 id="左值的不足"><a href="#左值的不足" class="headerlink" title="左值的不足"></a>左值的不足</h2><blockquote><p>引用的价值：减少拷贝</p></blockquote><p>左值引用解决哪些问题？</p><ol><li>做参数。a、减少拷贝，提高效率  b、做输出型参数</li><li>做返回值。 a、减少拷贝，提高效率  b、引用返回，可以修改返回对象（比如：operator[]）</li></ol><p>但是，C++98的左值引用面向下边的场景很难进行处理：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212301937870.png"></p><p>右边的写法虽然解决了问题，但是并不是太符合使用习惯</p><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>不加移动构造的string</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302010806.png"></p><p>加移动构造的string类</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302045284.png"></p><p>不加移动构造移动赋值的string</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302216855.png"></p><p>加移动构造移动赋值的string类</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302216109.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>移动构造和移动赋值解决了传值返回这些类型对象的问题，STL的各个容器在C++11增加移动构造和移动赋值。移动构造本质是将参数右值的资源窃取过来，占位已有，那么就不用做深拷贝了，所以它叫做移动构造，就是窃取别人的资源来构造自己。</p><h1 id="完美转发"><a href="#完美转发" class="headerlink" title="完美转发"></a>完美转发</h1><h2 id="模板中-amp-amp-万能引用"><a href="#模板中-amp-amp-万能引用" class="headerlink" title="模板中&amp;&amp;万能引用"></a>模板中&amp;&amp;万能引用</h2><blockquote><p>在模板中，&amp;&amp;不代表右值引用，而是万能引用，其既能接收左值又能接收右值，但是引用类型的唯一作用就是限制了接收的类型，后续使用中都退化成了左值。</p></blockquote><p>先看个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;左值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const 左值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span>&amp;&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;右值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp;&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const 右值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PerfectForward</span><span class="params">(T&amp;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PerfectForward</span>(<span class="number">10</span>);           <span class="comment">// 右值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">PerfectForward</span>(a);            <span class="comment">// 左值</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(a)); <span class="comment">// 右值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">PerfectForward</span>(b);      <span class="comment">// const 左值</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(b)); <span class="comment">// const 右值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的预期中，Func函数应该是，左值打印左值，右值打印右值，但是运行结果确如下图所示：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302231604.png"></p><p>这里可以看到，所有的都成了左值引用，根本没有调用右值引用的版本，这个就是<strong>引用折叠</strong>的问题。</p><h2 id="std-forward"><a href="#std-forward" class="headerlink" title="std::forward"></a>std::forward</h2><blockquote><p>我们希望能够在传递过程中保持它的左值或者右值的属性, 就需要用完美转发。</p></blockquote><p>针对上边的代码只需要将，T类型的参数t完美转发一下就可以了，<strong>std::forward 完美转发在传参的过程中保留对象原生类型属性</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PerfectForward</span><span class="params">(T&amp;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(std::forward&lt;T&gt;(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302243796.png"></p><p>可以看到完美转发的效果，左值调用左值，右值调用右值。</p><h2 id="实际应用例子"><a href="#实际应用例子" class="headerlink" title="实际应用例子"></a>实际应用例子</h2><p>在我们模拟实现的list中测试，移动构造</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302252471.png"></p><p>list插入”world”（右值），代码调用层级如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">end</span>(), std::forward&lt;T&gt;(x)); <span class="comment">//完美转发保留右值属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用insert，这里也是万能引用接收</span></span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, T&amp;&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* cur = pos._node;</span><br><span class="line">Node* prev = cur-&gt;_prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用节点的构造函数，也同样要完美转发，保留右值属性</span></span><br><span class="line">Node* newnode = <span class="keyword">new</span> <span class="built_in">Node</span>(std::forward&lt;T&gt;(x)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// prev newnode cur</span></span><br><span class="line">prev-&gt;_next = newnode;</span><br><span class="line">newnode-&gt;_prev = prev;</span><br><span class="line">newnode-&gt;_next = cur;</span><br><span class="line">cur-&gt;_prev = newnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(newnode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// insert调用了链表节点的构造，同样用万能引用接收</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list_node</span>(T&amp;&amp; x)</span><br><span class="line">:_data(std::forward&lt;T&gt;(x))  <span class="comment">//完美转发</span></span><br><span class="line">, _next(<span class="literal">nullptr</span>)</span><br><span class="line">, _prev(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>最后的节点的构造，会调用string类的构造，所以那里同样需要完美转发，调用了string类的右值构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(string&amp;&amp; s)</span><br><span class="line">:_str(<span class="literal">nullptr</span>)</span><br><span class="line">, _size(<span class="number">0</span>)</span><br><span class="line">, _capacity(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;string(string&amp;&amp; s) -- 资源转移&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">swap</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11基础</title>
      <link href="/2022/12/29/CPP/C++11%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
      <url>/2022/12/29/CPP/C++11%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="{} 初始化"></a>{} 初始化</h2><blockquote><p>在C++98中，标准允许使用花括号{}对数组或者结构体元素进行统一的列表初始值设定。</p></blockquote><p>比如下方示例：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272140842.png"></p><blockquote><p>C++11扩大了用大括号括起的列表(初始化列表)的使用范围，使其可用于所有的内置类型和用户自定义的类型，使用初始化列表时，可添加等号(&#x3D;)，也可不添加</p></blockquote><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p>以下三种写法一样</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272145021.png"></p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>对于自定义类型同样适用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span><br><span class="line">:_year(year)</span><br><span class="line">, _month(month)</span><br><span class="line">, _day(day)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Date(int year, int month, int day)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _year;</span><br><span class="line"><span class="type">int</span> _month;</span><br><span class="line"><span class="type">int</span> _day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 都是在调用构造函数</span></span><br><span class="line"><span class="function">Date <span class="title">d1</span><span class="params">(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="comment">// C++11 要能看懂，但是不建议使用</span></span><br><span class="line">Date d2 = &#123;<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>&#125;; <span class="comment">// -&gt;调用构造函数</span></span><br><span class="line">Date d3&#123; <span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span> &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STL容器"><a href="#STL容器" class="headerlink" title="STL容器"></a>STL容器</h3><p>stl容器同样支持如上操作，并且更加方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 调用支持list (initializer_list&lt;value_type&gt; il）类似这样的构造函数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2 &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; lt1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; lt2&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Date&gt; v3 = &#123;d1, d2, d3&#125;;</span><br><span class="line">vector&lt;Date&gt; v4 = &#123; &#123; <span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123;<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">string s1 = <span class="string">&quot;11111&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line">map&lt;string, string&gt; dict = &#123; &#123; <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;排序&quot;</span> &#125;, &#123; <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;插入&quot;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值重载 --- kvil要先明确，注意那个const</span></span><br><span class="line">initializer_list&lt;pair&lt;<span class="type">const</span> string, string&gt;&gt; kvil = &#123; &#123; <span class="string">&quot;left&quot;</span>, <span class="string">&quot;左边&quot;</span> &#125;, &#123; <span class="string">&quot;left&quot;</span>, <span class="string">&quot;左边&quot;</span> &#125; &#125;;</span><br><span class="line">dict = kvil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="std-initializer-list"><a href="#std-initializer-list" class="headerlink" title="std::initializer_list"></a>std::initializer_list</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272134335.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> li = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(li).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272138565.png"></p><p>容器底层实现，如vector增加initializer_list参数的构造代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">vector</span>(initializer_list&lt;T&gt; li)</span><br><span class="line">: _start(<span class="literal">nullptr</span>), _finish(<span class="literal">nullptr</span>), _end_of_storage(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">reserve</span>(li.<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : li)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">push_back</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C++11以后，一切对象都可以使用列表初始化，但是建议普通对象还是用以前的方式初始化，容器如果有需求可以用列表初始化</p><h1 id="变量类型推导"><a href="#变量类型推导" class="headerlink" title="变量类型推导"></a>变量类型推导</h1><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><blockquote><p>关键字decltype将变量的类型声明为表达式指定的类型</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272258871.png"></p><h1 id="新增加容器"><a href="#新增加容器" class="headerlink" title="新增加容器"></a>新增加容器</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><ul><li>c语言数组越界读基本检查不出来，越界写是抽查</li><li>array可以检查出来越界</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> a1[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言数组越界检查，越界读基本检查不出来，越界写是抽查</span></span><br><span class="line">a1[N];</span><br><span class="line"><span class="comment">//a1[N] = 1;</span></span><br><span class="line">a1[N + <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 越界读写都可以被检查出来</span></span><br><span class="line"><span class="comment">// 实际情况：array用得很少，一方面大家用c数组用惯了</span></span><br><span class="line"><span class="comment">// 用array不如用vector + resize去替代c数组</span></span><br><span class="line"></span><br><span class="line">array&lt;<span class="type">int</span>, N&gt; a2;</span><br><span class="line">a2[N];</span><br><span class="line">a2[N] = <span class="number">1</span>;</span><br><span class="line">a2[N + <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forward-list"><a href="#forward-list" class="headerlink" title="forward_list"></a>forward_list</h2><p>单链表</p>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增程式电动汽车CD/CS控制策略</title>
      <link href="/2022/12/29/%E6%96%B0%E8%83%BD%E6%BA%90/CD_CS/"/>
      <url>/2022/12/29/%E6%96%B0%E8%83%BD%E6%BA%90/CD_CS/</url>
      
        <content type="html"><![CDATA[<p><a name="vrhgN"></a></p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p>CD&#x2F;CS策略是最简单的EMS控制策略，这是基于规则的，最简单的控制策略，容易在实车上实现，通常在科研中用于与其他策略进行比较来体现其控制策略的优势。</p></blockquote><p><a name="ZfCCK"></a></p><h2 id="二、优缺点"><a href="#二、优缺点" class="headerlink" title="二、优缺点"></a>二、优缺点</h2><p><strong>优点：</strong></p><ul><li><strong>实现简单</strong></li><li><strong>实时</strong></li><li><strong>发动机可工作在高效区</strong></li></ul><p><strong>缺点：</strong></p><ul><li><strong>适应力差</strong></li><li><strong>电池频繁冲放电</strong><br><a name="YXWMg"></a></li></ul><h2 id="三、流程图"><a href="#三、流程图" class="headerlink" title="三、流程图"></a>三、流程图</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291635560.jpg"></p><p><a name="dQBv3"></a></p><h2 id="四、原理"><a href="#四、原理" class="headerlink" title="四、原理"></a>四、原理</h2><p><a name="rhqIk"></a></p><h3 id="1、CD模式"><a href="#1、CD模式" class="headerlink" title="1、CD模式"></a>1、CD模式</h3><p>需求功率只由电池提供，先推导状态变量SOC，</p><p>$S\dot OC&#x3D;\frac{dSOC}{dt}&#x3D;\frac{-I_{ess}}{C_{ess}}&#x3D;\frac{\sqrt{U^2_{OCV}-4P_{ess}R_{ess}}-U_{OCV}}{2R_{ess}C_{ess}}$  </p><p>$SOC_{min} \leq SOC\leq_{max}$</p><blockquote><p>推导SOC的导数（安时计量法）</p><p>$SOC_{k+1}&#x3D;SOC_k-\int_{t_k}^{t_{k+1}}{\frac{\eta I{\rm d}t}{C_e}}$</p><p>后边  $U_{OCV}I_{ess}-I_{ess}^2R_{ess}&#x3D;P_{ess}$<br>求根公式</p></blockquote><p>P_ess为动力电池功率，I_ess为动力电池电流，C_ess为动力电池额外容量，R_ess为动力电池内阻，U_ocv为动力电池开路电压<br><a name="yZYju"></a></p><h3 id="2、CS模式"><a href="#2、CS模式" class="headerlink" title="2、CS模式"></a>2、CS模式</h3><p>CS模式是电量保持，模式，增程器控制采用定点控制策略，发动机在固定工作点工作。</p><ul><li>需求功率由增程器提供，多余功率给电池充电<br><a name="x2Wvn"></a></li></ul><h3 id="3、制动能量回收"><a href="#3、制动能量回收" class="headerlink" title="3、制动能量回收"></a>3、制动能量回收</h3><ul><li>20%回收<br><a name="C3CLe"></a></li></ul><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><p><a name="E67Lu"></a></p><h3 id="1、流程逻辑"><a href="#1、流程逻辑" class="headerlink" title="1、流程逻辑"></a>1、流程逻辑</h3><ul><li>导入工况数据</li><li>车辆参数初始化</li><li>计算工况功率需求</li><li>工况循环<br><a name="lqg0c"></a></li></ul><h3 id="2、提示"><a href="#2、提示" class="headerlink" title="2、提示"></a>2、提示</h3><ul><li>未考虑效率问题</li><li>制动能量回收20%</li><li>CD模式精度可以，可与powertrain的EV一个NEDC比较。<br><a name="tsf3A"></a></li></ul><h3 id="3、实现环境"><a href="#3、实现环境" class="headerlink" title="3、实现环境"></a>3、实现环境</h3><p>1️⃣** matlab **</p><ul><li>无脑建议2021b+，因为有代码提示和补全😁</li></ul><p>2️⃣** python**</p><ul><li><strong>3.7</strong></li><li><strong>numpy</strong></li><li><strong>math</strong></li><li><strong>scipy</strong></li><li><strong>matplotlib</strong></li></ul><br /><a name="JLaWD"></a>## 五、仿真结果<a name="Ze8Ya"></a>### 1、matlab<p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636129.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636841.png"></p><h3 id="2、python"><a href="#2、python" class="headerlink" title="2、python"></a>2、python</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636438.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636851.png"></p><p><a name="pYpqN"></a></p><h2 id="六、github链接"><a href="#六、github链接" class="headerlink" title="六、github链接"></a>六、github链接</h2><p><a href="https://github.com/suntong-1221/EMS_OS.git">https://github.com/suntong-1221/EMS_OS.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 新能源汽车 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希应用</title>
      <link href="/2022/12/27/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E5%BA%94%E7%94%A8/"/>
      <url>/2022/12/27/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h1><blockquote><p>给40亿个不重复的无符号整数，没排过序。给一个无符号整数，如何快速判断一个数是否在这40亿个数中？</p></blockquote><ol><li>遍历，时间复杂度O(N)  </li><li>排序(O(NlogN))，利用二分查找: logN  </li><li>位图解决</li></ol><h2 id="位图概念"><a href="#位图概念" class="headerlink" title="位图概念"></a>位图概念</h2><p>所谓位图，就是用每一个比特位来存放某种状态，适用于海量数据，数据无重复的场景。通常是用来判断某个数据存不存在的</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212262144541.png"></p><h2 id="位图实现"><a href="#位图实现" class="headerlink" title="位图实现"></a>位图实现</h2><p>这里底层用了vector，存char类型，一个char占8个比特位。然后提供set接口，说明如下：</p><ul><li>先找要映射的数据在第几个char：<strong>x&#x2F;8</strong></li><li>再看是在char的第几个位：<strong>x%8</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bitset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">bitset</span>()</span><br><span class="line">&#123;</span><br><span class="line">_bits.<span class="built_in">resize</span>(N / <span class="number">8</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>; <span class="comment">//找第几个char</span></span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>; <span class="comment">//第几个char的第几个位</span></span><br><span class="line">_bits[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>;</span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>;</span><br><span class="line">_bits[i] &amp;= ~(<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">test</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>;</span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">return</span> _bits[i] &amp; (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; _bits;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="位图应用"><a href="#位图应用" class="headerlink" title="位图应用"></a>位图应用</h2><ol><li>快速查找某个数据是否在一个集合中  </li><li>排序 + 去重  </li><li>求两个集合的交集、并集等  </li><li>操作系统中磁盘块标记</li></ol><h3 id="几个例子："><a href="#几个例子：" class="headerlink" title="几个例子："></a>几个例子：</h3><blockquote><p>给定100亿个整数，设计算法找到只出现一次的整数？</p></blockquote><p>可以用两个位图，建立kv模型，具体如下：</p><p>kv的统计次数搜索模型</p><ul><li>0次：00</li><li>1次：01</li><li>2次及以上：10</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">twobitset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> inset1 = _bs1.<span class="built_in">test</span>(x);</span><br><span class="line"><span class="type">bool</span> inset2 = _bs2.<span class="built_in">test</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//00</span></span><br><span class="line"><span class="keyword">if</span> (inset1 == <span class="literal">false</span> &amp;&amp; inset2 == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">_bs2.<span class="built_in">set</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inset1 == <span class="literal">false</span> &amp;&amp; inset2 == <span class="literal">true</span>) <span class="comment">//01</span></span><br><span class="line">&#123;</span><br><span class="line">_bs1.<span class="built_in">set</span>(x);</span><br><span class="line">_bs2.<span class="built_in">reset</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inset1 == <span class="literal">true</span> &amp;&amp; inset2 == <span class="literal">false</span>) <span class="comment">//10</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//11</span></span><br><span class="line">_bs1.<span class="built_in">set</span>(x);</span><br><span class="line">_bs2.<span class="built_in">set</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_once_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//01</span></span><br><span class="line"><span class="keyword">if</span> (_bs1.<span class="built_in">test</span>(i) == <span class="literal">false</span> &amp;&amp; _bs2.<span class="built_in">test</span>(i) == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">bitset&lt;N&gt;_bs1;</span><br><span class="line">bitset&lt;N&gt;_bs2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>给两个文件，分别有100亿个整数，我们只有1G内存，如何找到两个文件的交集？<br>两个位图</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1G=1024Mb</span><br><span class="line">1024MB=1024*1024KB</span><br><span class="line">1024*1024KB=1024*1024*1024Byte</span><br><span class="line">2^30， 约等于10亿Byte</span><br></pre></td></tr></table></figure><p>那么100亿整数，就是400亿字节，也就是40G的空间，但是整数的范围就42亿多，那么假设43亿个整数，也就需要43亿个比特位，也就是43亿&#x2F;8个字节，也就是5亿多字节，大概在0.5G多，可以先依次读取第一个文件中的所有整数，将其映射到一个位图。再读取另一个文件中的所有整数，判断在不在位图中，在就是交集，不在就不是交集。</p><blockquote><p>位图应用变形：一个文件有100亿个int，1G内存，设计算法找到次数不超过两次的所以整数</p></blockquote><ul><li>0次：00</li><li>1次：01</li><li>2次：10</li><li>3次及以上：11</li></ul><h2 id="位图特点："><a href="#位图特点：" class="headerlink" title="位图特点："></a>位图特点：</h2><ul><li>快、节省空间，直接定址法，不存在冲突</li><li>相对局限，只能映射整形</li></ul><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>布隆过滤器是由布隆（Burton Howard Bloom）在1970年提出的 一种紧凑型的、比较巧妙的概率型数据结构，特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存 在”，它是用多个哈希函数，将一个数据映射到位图结构中。此种方式不仅可以提升查询效率，也可以节省大量的内存空间</p></blockquote><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>1、可以做黑名单查询，不在黑名单的人一定占大多数，如果不在直接返回，如果在，这个结果可能就不准，继续在从数据库中查询。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271506798.png"></p><p>2、注册昵称的场景，如果要注册的昵称不存在，直接注册，如果存在，直接提示（可能有误判）</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271508884.png"></p><h2 id="布隆过滤器实现"><a href="#布隆过滤器实现" class="headerlink" title="布隆过滤器实现"></a>布隆过滤器实现</h2><p>字符串哈希算法转成整形去映射一个或者多个位置进行标记</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212262302892.png"></p><p>下边为布隆过滤器代码，首先确定m的个数，下边m&#x3D;5倍的n</p><blockquote><p>k为哈希函数的个数，m为布隆过滤器长度，n为插入元素的个数，p为误报率</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271500685.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashBKDR</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">&#123;</span><br><span class="line">val *= <span class="number">131</span>;</span><br><span class="line">val += ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashAP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">hash ^= ((hash &lt;&lt; <span class="number">7</span>) ^ key[i] ^ (hash &gt;&gt; <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hash ^= (~((hash &lt;&lt; <span class="number">11</span>) ^ key[i] ^ (hash &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashDJB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash = <span class="number">5381</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">&#123;</span><br><span class="line">hash += (hash &lt;&lt; <span class="number">5</span>) + ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// N表示准备要映射N个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N, <span class="keyword">class</span> <span class="title class_">K</span> = string, <span class="keyword">class</span> Hash1 = HashBKDR, <span class="keyword">class</span> Hash2=HashAP, <span class="keyword">class</span> Hash3=HashDJB&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BloomFilter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">void</span> <span class="built_in">Set</span>(<span class="type">const</span> K&amp; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> hash1 = <span class="built_in">Hash1</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash1);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash2 = <span class="built_in">Hash2</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash2);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash3 = <span class="built_in">Hash3</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Test</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash1 = <span class="built_in">Hash1</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash1) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash2 = <span class="built_in">Hash2</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash2) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash3 = <span class="built_in">Hash3</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash3) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">size_t</span> _ratio = <span class="number">5</span>;</span><br><span class="line">std::bitset&lt;_ratio* N&gt;* _bits = <span class="keyword">new</span> std::bitset&lt;_ratio* N&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><blockquote><p>1、给两个文件，分别有100亿个query，我们只有1G内存，如何找到两个文件的交集？（近似算法）</p></blockquote><ul><li>先读取其中一个文件当中的query，将其全部映射到一个布隆过滤器当中。</li><li>然后读取另一个文件当中的query，依次判断每个query是否在布隆过滤器当中，如果在则是交集，不在则不是交集。（这里的在可能会误判）</li></ul><blockquote><p>2、如何扩展BloomFilter使得它支持删除操作</p></blockquote><p>一般布隆过滤器删除可能会影响其他的元素，因为哈希函数可能会映射到相同的位，如果要支持删除操作，在底层继续增加位图，做引用计数的功能，但是会浪费很多空间，所以布隆过滤器一般不支持删除操作。</p><h2 id="哈希切割"><a href="#哈希切割" class="headerlink" title="哈希切割"></a>哈希切割</h2><blockquote><p>1、给两个文件，分别有100亿个query，我们只有1G内存，如何找到两个文件的交集？（精确算法）</p></blockquote><ul><li>首先需要估算一下这里一个文件的大小，便于确定将一个文件切分为多少个小文件。</li><li>假设平均每个query为20字节，那么100亿个query就是200G，由于我们只有1G内存，这里可以考虑将一个文件切分成400个小文件。</li><li>这里我们将这两个文件分别叫做A文件和B文件，此时我们将A文件切分成了A0<del>A399共400个小文件，将B文件切分成了B0</del>B399共400个小文件。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271516166.png"></p><p>依次读取文件A中query，i&#x3D;Hash(query)%400，这个query进入Ai号小文件，相同的query一定进入编号相同的小文件</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271600564.png"></p><ul><li>经过切分后理论上每个小文件的平均大小是512M，因此我们可以将其中一个小文件加载到内存，并放到一个set容器中，再遍历另一个小文件当中的query，依次判断每个query是否在set容器中，如果在则是交集，不在则不是交集。</li><li>当哈希切分并不是平均切分，有可能切出来的小文件中有一些小文件的大小仍然大于1G，此时如果与之对应的另一个小文件可以加载到内存，则可以选择将另一个小文件中的query加载到内存，因为我们只需要将两个小文件中的一个加载到内存中就行了。</li><li>但如果两个小文件的大小都大于1G，那我们可以考虑将这两个小文件再进行一次切分，将其切成更小的文件，方法与之前切分A文件和B文件的方法类似。</li></ul><blockquote><p>2、给一个超过100G大小的log file，log中存着IP地址，设计算法找到出现次数最多的IP地址？与上题条件相同，如何找到top K的IP</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271603992.png"></p><p>相同的IP一定进入同一个小文件，然后依次使用map&lt;string,int&gt;对每个小文件统计次数</p><p>TopK，建立一个K值为&lt;ip, count&gt;的小堆。依次加载每个文件，如果某个IP地址出现的次数大于堆顶IP地址出现的次数，则将该IP地址与堆顶的IP地址进行交换，然后再进行一次向下调整，使其仍为小堆，最终比对完所有小文件中的IP地址后，这个小堆当中的K个IP地址就是出现次数top K的IP地址。</p><h2 id="布隆过滤器特点"><a href="#布隆过滤器特点" class="headerlink" title="布隆过滤器特点"></a>布隆过滤器特点</h2><p>存在误判：<br>在：不准确的，存在误判<br>不在：准确的，不存在误判</p><p>理论而言：一个值映射的位越多，误判概率越低，但是也不敢映射太多，那么空间消耗就越多</p>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希</title>
      <link href="/2022/12/24/CPP/%E5%93%88%E5%B8%8C/"/>
      <url>/2022/12/24/CPP/%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="unordered系列关联式容器"><a href="#unordered系列关联式容器" class="headerlink" title="unordered系列关联式容器"></a>unordered系列关联式容器</h1><blockquote><p>内部是无序的，查询很快</p></blockquote><p>几个函数说明：</p><table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>operator[]</td><td>返回与key对应的value值</td></tr><tr><td>bucket_count()</td><td>返回桶的个数</td></tr><tr><td>size_t bucket_size(size_t n)const</td><td>返回n号桶有效元素的个数</td></tr><tr><td>size_t bucket(const K&amp; key)</td><td>返回元素key对应的桶号</td></tr></tbody></table><h1 id="底层结构"><a href="#底层结构" class="headerlink" title="底层结构"></a>底层结构</h1><blockquote><p>unordered系列的关联式容器之所以效率比较高，是因为其底层使用了哈希结构。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>通过某种函数(hashFunc)使元素的存储位置与它的关键码之间能够建立  一一映射的关系，那么在查找时通过该函数可以很快找到该元素。</p><p>例如：数据集合{1，7，6，4，5，9}<br>哈希函数设置为：<strong>hash(key) &#x3D; key % capacity</strong>; <strong>capacity</strong>为存储元素底层空间总的大小</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231541251.png"></p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><blockquote><p>不同关键字通过相同哈希哈数计算出相同的哈希地址，该种现象称为哈希冲突或哈希碰撞。</p></blockquote><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>引起哈希冲突的一个原因可能是：哈希函数设计不够合理。  </p><p><strong>哈希函数设计原则：</strong>  </p><ul><li>哈希函数的定义域必须包括需要存储的全部关键码，而如果散列表允许有m个地址时，其值<br>域必须在0到m-1之间  </li><li>哈希函数计算出来的地址能均匀分布在整个空间中  </li><li>哈希函数应该比较简单</li></ul><h3 id="除留余数法"><a href="#除留余数法" class="headerlink" title="除留余数法"></a>除留余数法</h3><p>设散列表中允许的地址数为m，取一个不大于m，但最接近或者等于m的质数p作为除数，<br>按照哈希函数：<strong>Hash(key) &#x3D; key% p(p&lt;&#x3D;m)</strong>,将关键码转换成哈希地址</p><h3 id="字符串哈希算法"><a href="#字符串哈希算法" class="headerlink" title="字符串哈希算法"></a>字符串哈希算法</h3><p><a href="https://www.cnblogs.com/-clq/archive/2012/05/31/2528153.html">字符串哈希算法</a></p><h2 id="解决哈希冲突"><a href="#解决哈希冲突" class="headerlink" title="解决哈希冲突"></a>解决哈希冲突</h2><h3 id="闭散列"><a href="#闭散列" class="headerlink" title="闭散列"></a>闭散列</h3><p>闭散列：也叫开放定址法，当发生哈希冲突时，如果哈希表未被装满，说明在哈希表中必然还有空位置，那么可以把key存放到冲突位置中的“下一个” 空位置中去。那如何寻找下一个空位置</p><h4 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h4><blockquote><p>从发生冲突的位置开始，依次向后探测，直到寻找到下一个空位置为止</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231551253.png"></p><p>线性探测缺点：一旦发生哈希冲突，所有的冲突连在一起，容易产生数据“堆积”，即：不同<br>关键码占据了可利用的空位置，使得寻找某关键码的位置需要许多次比较，导致搜索效率降<br>低</p><h4 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231600891.png"></p><p>每次平方的探测：<strong>hash+i^2 (i&gt;&#x3D;0)</strong></p><h4 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h4><p>负载因子：填入表中元素个数 &#x2F; 散列表的长度</p><p>负载因子越小越不容易冲突，但是空间利用率比较低，一般设置0.7左右</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CloseHash</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        EXIST,</span><br><span class="line">        DELETE,</span><br><span class="line">        EMPTY</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::pair&lt;K, V&gt; _kv;</span><br><span class="line">        State _state = EMPTY;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashFunc</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">size_t</span>)key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashFunc</span>&lt;string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">            &#123;</span><br><span class="line">                val *= <span class="number">131</span>;</span><br><span class="line">                val += ch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> HashTable</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">bool</span> <span class="built_in">insert</span>(<span class="type">const</span> pair&lt;K, V&gt; &amp;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(data.first))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span> || _size * <span class="number">10</span> / _tables.<span class="built_in">size</span>() &gt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">size_t</span> newSize = _tables.<span class="built_in">size</span>() == <span class="number">0</span> ? <span class="number">10</span> : _tables.<span class="built_in">size</span>() * <span class="number">2</span>;</span><br><span class="line">                HashTable&lt;K, V, Hash&gt; newHT;</span><br><span class="line">                newHT._tables.<span class="built_in">resize</span>(newSize);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> e : _tables)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e._state == EXIST)</span><br><span class="line">                    &#123;</span><br><span class="line">                        newHT.<span class="built_in">insert</span>(e._kv);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _tables.<span class="built_in">swap</span>(newHT._tables);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(data.first) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (_tables[hashi]._state == EXIST)</span><br><span class="line">            &#123;</span><br><span class="line">                hashi++;</span><br><span class="line">                hashi %= _tables.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _tables[hashi]._kv = data;</span><br><span class="line">            _tables[hashi]._state = EXIST;</span><br><span class="line">            _size++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">HashData&lt;K, V&gt; *<span class="title">find</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> start = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">size_t</span> hashi = start;</span><br><span class="line">            <span class="keyword">while</span> (_tables[hashi]._state != EMPTY)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[hashi]._state != DELETE &amp;&amp; _tables[hashi]._kv.first == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &amp;_tables[hashi];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                hashi++;</span><br><span class="line">                hashi %= _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hashi == start)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            HashData&lt;K, V&gt; *ret = <span class="built_in">find</span>(key);</span><br><span class="line">            <span class="keyword">if</span> (ret)</span><br><span class="line">            &#123;</span><br><span class="line">                ret-&gt;_state = DELETE;</span><br><span class="line">                --_size;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i]._state == EXIST)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;[%llu:%d] &quot;</span>, i, _tables[i]._kv.first);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;[%llu:*] &quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;HashData&lt;K, V&gt;&gt; _tables;</span><br><span class="line">        <span class="type">size_t</span> _size = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">44</span>&#125;;</span><br><span class="line">        HashTable&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ht;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : a)</span><br><span class="line">        &#123;</span><br><span class="line">            ht.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(e, e));</span><br><span class="line">        &#125;</span><br><span class="line">        ht.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">        ht.<span class="built_in">erase</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ht.<span class="built_in">find</span>(<span class="number">44</span>)-&gt;_kv.first &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; ht.<span class="built_in">find</span>(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">        ht.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开散列"><a href="#开散列" class="headerlink" title="开散列"></a>开散列</h3><p>开散列法又叫链地址法(开链法)，首先对关键码集合用散列函数计算散列地址，具有相同地<br>址的关键码归于同一子集合，每一个子集合称为一个桶，各个桶中的元素通过一个单链表链<br>接起来，各链表的头结点存储在哈希表中。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231612112.png"></p><h3 id="开散列闭散列比较"><a href="#开散列闭散列比较" class="headerlink" title="开散列闭散列比较"></a>开散列闭散列比较</h3><p>应用链地址法（开散列）处理溢出，需要增设链接指针，似乎增加了存储开销。事实上：由于开地址法必须保持大量的空闲空间以确保搜索效率，如二次探查法要求装载因子a &lt;&#x3D;  0.7，而表项所占空间又比指针大的多，所以使用链地址法反而比开地址法节省存储空间。</p><h1 id="unordered-map和unordered-set封装"><a href="#unordered-map和unordered-set封装" class="headerlink" title="unordered_map和unordered_set封装"></a>unordered_map和unordered_set封装</h1><h2 id="hash表（开散列）"><a href="#hash表（开散列）" class="headerlink" title="hash表（开散列）"></a>hash表（开散列）</h2><p>几个点：</p><ul><li>模板类，第一个模板参数是K，第二个参数T，上层决定这个T是什么</li><li>传入仿函数KeyOfT，这个可以从T类型中取K</li><li>insert插入，返回值设为迭代器和bool的键值对</li><li>迭代器（一个是节点指针，一个是哈希表指针）</li><li>迭代器用了哈希表，需要在迭代器前面进行哈希表的声明</li><li>迭代器有哈希表的指针，所以要将迭代器类，声明为哈希表类的友元</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashFunc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashFunc</span>&lt;string&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string &amp;key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">        &#123;</span><br><span class="line">            val *= <span class="number">131</span>;</span><br><span class="line">            val += ch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OpenHash</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">    &#123;</span><br><span class="line">        T _data;</span><br><span class="line">        HashData&lt;T&gt; *_next;</span><br><span class="line">        <span class="built_in">HashData</span>(<span class="type">const</span> T &amp;data)</span><br><span class="line">            : _data(data), _next(<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">HashTable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">__HashIterator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> HashData&lt;T&gt; Node;</span><br><span class="line">        <span class="keyword">typedef</span> HashTable&lt;K, T, Hash, KeyOfT&gt; HT;</span><br><span class="line">        <span class="keyword">typedef</span> __HashIterator&lt;K, T, Hash, KeyOfT&gt; self;</span><br><span class="line"></span><br><span class="line">        Node *_node;</span><br><span class="line">        HT *_pht;</span><br><span class="line"></span><br><span class="line">        __HashIterator(Node *node, HT *pht)</span><br><span class="line">            : _node(node), _pht(pht)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node-&gt;_data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T *<span class="keyword">operator</span>-&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;_node-&gt;_data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self &amp;<span class="keyword">operator</span>++()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_node-&gt;_next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果当前桶的下一个不为空，直接走到下一个位置</span></span><br><span class="line">                _node = _node-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 说明当前位置为空，要找下一个不为空的桶</span></span><br><span class="line">                Hash hash;</span><br><span class="line">                KeyOfT kot;</span><br><span class="line">                <span class="type">size_t</span> i = <span class="built_in">hash</span>(<span class="built_in">kot</span>(_node-&gt;_data)) % _pht-&gt;<span class="built_in">size</span>();</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">for</span> (; i &lt; _pht-&gt;<span class="built_in">size</span>(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_pht-&gt;_tables[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        _node = _pht-&gt;_tables[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == _pht-&gt;<span class="built_in">size</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    _node = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node != s._node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node == s._node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">HashTable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">struct</span> <span class="title class_">__HashIterator</span>&lt;K,T,Hash,KeyOfT&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> HashData&lt;T&gt;</span><br><span class="line">            Node;</span><br><span class="line">        <span class="keyword">typedef</span> __HashIterator&lt;K, T, Hash, KeyOfT&gt; iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iterator</span>(_tables[i], <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="literal">nullptr</span>, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">inline</span> <span class="type">size_t</span> __stl_next_prime(<span class="type">size_t</span> n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">const</span> <span class="type">size_t</span> __stl_num_primes = <span class="number">28</span>;</span><br><span class="line">            <span class="comment">// 按素数，扩容，stl源码中</span></span><br><span class="line">            <span class="type">static</span> <span class="type">const</span> <span class="type">size_t</span> __stl_prime_list[__stl_num_primes] =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="number">53</span>, <span class="number">97</span>, <span class="number">193</span>, <span class="number">389</span>, <span class="number">769</span>,</span><br><span class="line">                    <span class="number">1543</span>, <span class="number">3079</span>, <span class="number">6151</span>, <span class="number">12289</span>, <span class="number">24593</span>,</span><br><span class="line">                    <span class="number">49157</span>, <span class="number">98317</span>, <span class="number">196613</span>, <span class="number">393241</span>, <span class="number">786433</span>,</span><br><span class="line">                    <span class="number">1572869</span>, <span class="number">3145739</span>, <span class="number">6291469</span>, <span class="number">12582917</span>, <span class="number">25165843</span>,</span><br><span class="line">                    <span class="number">50331653</span>, <span class="number">100663319</span>, <span class="number">201326611</span>, <span class="number">402653189</span>, <span class="number">805306457</span>,</span><br><span class="line">                    <span class="number">1610612741</span>, <span class="number">3221225473</span>, <span class="number">4294967291</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; __stl_num_primes; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (__stl_prime_list[i] &gt; n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> __stl_prime_list[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">HashTable</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *cur = _tables[i];</span><br><span class="line">                <span class="keyword">while</span> (cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    Node *next = cur-&gt;_next;</span><br><span class="line">                    <span class="keyword">delete</span> cur;</span><br><span class="line">                    cur = next;</span><br><span class="line">                &#125;</span><br><span class="line">                _tables[i] = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> T &amp;data)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            KeyOfT kot;</span><br><span class="line">            Hash hash;</span><br><span class="line"></span><br><span class="line">            iterator ret = <span class="built_in">find</span>(<span class="built_in">kot</span>(data));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(ret, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == _size)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// size_t newSize = _tables.size() == 0 ? 10 : 2 * _tables.size();</span></span><br><span class="line">                vector&lt;Node *&gt; newTables;</span><br><span class="line">                newTables.<span class="built_in">resize</span>(__stl_next_prime(_tables.<span class="built_in">size</span>()), <span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Node *cur = _tables[i];</span><br><span class="line">                    <span class="keyword">while</span> (cur)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Node *next = cur-&gt;_next;</span><br><span class="line">                        <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(<span class="built_in">kot</span>(cur-&gt;_data)) % newTables.<span class="built_in">size</span>();</span><br><span class="line">                        cur-&gt;_next = newTables[hashi];</span><br><span class="line">                        newTables[hashi] = cur;</span><br><span class="line">                        cur = next;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    _tables[i] = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _tables.<span class="built_in">swap</span>(newTables);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(<span class="built_in">kot</span>(data)) % _tables.<span class="built_in">size</span>();</span><br><span class="line">            Node *newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            newNode-&gt;_next = _tables[hashi];</span><br><span class="line">            _tables[hashi] = newNode;</span><br><span class="line">            ++_size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="built_in">iterator</span>(newNode, <span class="keyword">this</span>), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">find</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Hash hash;</span><br><span class="line">            KeyOfT kot;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            Node *cur = _tables[hashi];</span><br><span class="line">            <span class="keyword">while</span> (cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">kot</span>(cur-&gt;_data) == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iterator</span>(cur, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cur = cur-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            Node *cur = _tables[hashi];</span><br><span class="line">            Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;_kv.first == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 1、头删</span></span><br><span class="line">                    <span class="comment">// 2、中间删</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (parent == <span class="literal">nullptr</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _tables[hashi] = cur-&gt;_next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        parent-&gt;_next = cur-&gt;_next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">delete</span> cur;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _tables.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 桶的个数</span></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">bucket_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">maxbucket_lenth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> maxlen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">                Node *cur = _tables[i];</span><br><span class="line">                <span class="keyword">while</span> (cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    cur = cur-&gt;_next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (len &gt; maxlen)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxlen = len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> maxlen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;Node *&gt; _tables;</span><br><span class="line">        <span class="type">size_t</span> _size = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><p>unordered_map的底层是哈希表，第二个模板参数传个pair&lt;K,V&gt;，同时要配对应的仿函数，返回first</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> st</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> unordered_map</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> KeyOfT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> K &amp;<span class="built_in">operator</span>()(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> kv.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> OpenHash::HashTable&lt;K, pair&lt;K, V&gt;, Hash, KeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">begin</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">insert</span>(kv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V &amp;<span class="keyword">operator</span>[](<span class="type">const</span> K &amp;key)</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;iterator, <span class="type">bool</span>&gt; ret = _ht.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>()));</span><br><span class="line">            <span class="keyword">return</span> ret.first-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        OpenHash::HashTable&lt;K, pair&lt;K, V&gt;, Hash, KeyOfT&gt; _ht;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; countMap;</span><br><span class="line">        string arr[] = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            countMap[e]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;kv : countMap)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; kv.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; kv.second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h2><p>unordered_set的底层也是哈希表，第二个模板参数传个K，同时要配对应的仿函数，返回K就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> st</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> unordered_set</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> KeyOfT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> K &amp;<span class="built_in">operator</span>()(<span class="type">const</span> K&amp; key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> OpenHash::HashTable&lt;K, K, Hash, KeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">begin</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">insert</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        OpenHash::HashTable&lt;K, K, Hash, KeyOfT&gt; _ht;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test_set</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; s;</span><br><span class="line">        string arr[] = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e: arr)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e: s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map和set</title>
      <link href="/2022/12/20/CPP/map%E5%92%8Cset/"/>
      <url>/2022/12/20/CPP/map%E5%92%8Cset/</url>
      
        <content type="html"><![CDATA[<p>关联式容器也是用来存储数据的，与序列式容器不同的是，其里面存储的是&lt;key, value&gt;结构的键值对，在数据检索时比序列式容器效率更高</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>排序+去重</p><p>find找不到会返回end</p><p>lower_bound(val)  返回大于或者等于val的位置<br>upper_bound(val) 返回大于val的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">3</span>,<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>,<span class="number">3</span>, <span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function">multiset&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(a, a + <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find时，如果有多个值，返回中序的第一个</span></span><br><span class="line"><span class="keyword">auto</span> pos = s.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (pos != s.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *pos &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有的3</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">pos = s.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != s.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">erase</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>重载的方括号</p><ul><li>map中有这个key，返回value的引用。（查找、修改value）</li><li>map中没有这个key，会插入一个pair(key,V())，返回value的引用。（插入+修改）</li></ul><p>具体点：</p><ul><li>key在map中，返回pair(key_iterator, false)       这个<strong>pair</strong>是insert返回的</li><li>key不在map中，返回pair(new_key_iterator, true)</li></ul><p>实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V&amp; <span class="keyword">operator</span>[](<span class="type">const</span> K&amp; key)</span><br><span class="line">&#123;</span><br><span class="line">pair&lt;iterator,<span class="type">bool</span>&gt;ret=<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>()));</span><br><span class="line"><span class="keyword">return</span> (ret.first)-&gt;second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map和set封装"><a href="#map和set封装" class="headerlink" title="map和set封装"></a>map和set封装</h1><h2 id="迭代器（红黑树）"><a href="#迭代器（红黑树）" class="headerlink" title="迭代器（红黑树）"></a>迭代器（红黑树）</h2><blockquote><p>迭代器的begin是中序的第一个节点，也就是最左节点，这里将end设置为空，封装重点是++和–的逻辑</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212201523942.png"></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载++"></a>重载++</h3><ul><li>右子树不为空，++就是找右子树中序第一个（最左节点）</li><li>右子树为空，++找孩子不是父亲右的那个祖先</li></ul><h3 id="重载–"><a href="#重载–" class="headerlink" title="重载–"></a>重载–</h3><ul><li>左子树不为空，–就是找左子树的最右节点</li><li>左子树为空，–找孩子不是父亲左的那个祖先</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Ref</span>, <span class="keyword">class</span> <span class="title class_">Ptr</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__RBTreeIterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> RBTreeNode&lt;T&gt; Node;</span><br><span class="line">    Node *_node;</span><br><span class="line">    <span class="keyword">typedef</span> __RBTreeIterator&lt;T, Ref, Ptr&gt; self;</span><br><span class="line"></span><br><span class="line">    __RBTreeIterator(Node *node) : _node(node)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node-&gt;_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr <span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_node-&gt;_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self &amp;<span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_node-&gt;_right) <span class="comment">// 右子树不为空，右子树的最左就是下一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *left = _node-&gt;_right;</span><br><span class="line">            <span class="keyword">while</span> (left-&gt;_left) <span class="comment">// 有个问题，当前节点如果是25，下个节点是27，left指向27，这样写，left变成空</span></span><br><span class="line">            &#123;</span><br><span class="line">                left = left-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            _node = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 右子树为空，找孩子不是父亲右的那个祖先</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *parent = _node-&gt;_parent;</span><br><span class="line">            Node *cur = _node;</span><br><span class="line">            <span class="keyword">while</span> (parent &amp;&amp; cur == parent-&gt;_right)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = parent;</span><br><span class="line">                parent = parent-&gt;_parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _node = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self &amp;<span class="keyword">operator</span>--()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_node-&gt;_left) <span class="comment">// 左子树不为空，左子树的最右就是下一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *right = _node-&gt;_left;</span><br><span class="line">            <span class="keyword">while</span> (right-&gt;_right)</span><br><span class="line">            &#123;</span><br><span class="line">                right = right-&gt;_right;</span><br><span class="line">            &#125;</span><br><span class="line">            _node = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 左子树为空，找孩子不是父亲左的那个祖先</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *parent = _node-&gt;_parent;</span><br><span class="line">            Node *cur = _node;</span><br><span class="line">            <span class="keyword">while</span> (parent &amp;&amp; cur == parent-&gt;_left)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = parent;</span><br><span class="line">                parent = parent-&gt;_parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _node = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node != s._node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node == s._node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="map封装"><a href="#map封装" class="headerlink" title="map封装"></a>map封装</h2><p>map的红黑树 **RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt;**，第一个模板参数是key，第二个模板参数是pair</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">map</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MapKeyOfT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> K &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kv.first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(kv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V &amp;<span class="keyword">operator</span>[](<span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>())).first-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt; <span class="type">_t</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="set封装"><a href="#set封装" class="headerlink" title="set封装"></a>set封装</h2><p>set的红黑树 **RBTree&lt;K, K, SetKeyOfT&gt;**，第一个模板参数是key，第二个模板参数是pair</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">set</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SetKeyOfT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> K &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> RBTree&lt;K, K, SetKeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> K &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RBTree&lt;K, K, SetKeyOfT&gt; <span class="type">_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2022/12/18/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2022/12/18/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="红黑树概念"><a href="#红黑树概念" class="headerlink" title="红黑树概念"></a>红黑树概念</h2><blockquote><p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或 Black。 通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212141540682.png"></p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><ol><li>每个结点不是红色就是黑色  </li><li>根节点是黑色的  </li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的，<strong>树中没有连续的红节点</strong></li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点  </li><li>每个叶子结点都是黑色的(此处的叶子结点指的是空结点)</li></ol><p>为什么满足上面的性质，红黑树就能保证：其最长路径中节点个数不会超过最短路径中节点个数的两倍？</p><p>极限最短：全黑<br>极限最长：一黑一红</p><h2 id="红黑树结构"><a href="#红黑树结构" class="headerlink" title="红黑树结构"></a>红黑树结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED,</span><br><span class="line">    BLACK</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RBTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_parent;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_left;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_right;</span><br><span class="line">    pair&lt;K, V&gt; _kv;</span><br><span class="line">    Color _col;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RBTreeNode</span>(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span><br><span class="line">        : _parent(<span class="literal">nullptr</span>), _left(<span class="literal">nullptr</span>), _right(<span class="literal">nullptr</span>), _kv(kv), _col(RED)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> RBTreeNode&lt;K, V&gt; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="红黑树操作"><a href="#红黑树操作" class="headerlink" title="红黑树操作"></a>红黑树操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><blockquote><p>红黑树的叔叔是关键<br>u存在且为红，变色继续向上处理<br>u不存在或存在且为黑，旋转（单旋+双旋）+变色</p></blockquote><p>情况一：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），uncle存在且为红</p><p>处理：p、u变黑，g变红，继续把g当成cur</p><ul><li>g不是根，往上继续处理</li><li>g是根，再把g变成黑色</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181030394.png"></p><p>情况二：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在&#x2F;u存在且为黑（<strong>单旋+变色</strong>）</p><p>处理：</p><ul><li>g右单旋</li><li>p变黑，g变红</li></ul><p>说明：uncle的情况有两种</p><ul><li>如果u节点不存在，那么cur一定是新插入节点，因为如果cur不是新插入节点，则cur和p一定有个节点颜色是黑色，就不满足性质4：每条路径黑色节点的个数相同。</li><li>如果u节点存在，那么cur节点原来的颜色一定是黑色的（保证性质4），现在看到其是红色的原因是因为cur的子树在调整的过程中将cur节点的颜色由黑色改为红色。</li></ul><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181055273.png"></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181342714.png"></p><p>情况三：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在&#x2F;u存在且为黑（<strong>双旋+变色</strong>）</p><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181111798.png"></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181446123.png"></p><p>插入代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 还得链接上</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了应该插入的位置</span></span><br><span class="line"><span class="keyword">while</span> (parent &amp;&amp; parent-&gt;_col == RED) <span class="comment">// parent不为空并且颜色为红继续处理</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看parent是grandfather的左还是右</span></span><br><span class="line"><span class="keyword">if</span> (parent == grandfather-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line">Node *uncle = grandfather-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">// 1、右单旋+变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先对p 左单旋，再对g 右单旋，最后变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// parent=grand-&gt;right</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line">Node *uncle = grandfather-&gt;_left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//         c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><ul><li>根是黑色</li><li>没有连续的红节点</li><li>每条路径的黑色节点数量相同</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_root-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;根节点不是黑色&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bench_mark = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(_root, <span class="number">0</span>, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prev_check</span><span class="params">(Node *root, <span class="type">int</span> bnum, <span class="type">int</span> &amp;bench_mark)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bench_mark == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">bench_mark = bnum;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bench_mark != bnum)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;某条黑色节点的数量不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == BLACK)</span><br><span class="line">&#123;</span><br><span class="line">++bnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;存在连续的红色节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(root-&gt;_left, bnum, bench_mark) &amp;&amp; <span class="built_in">prev_check</span>(root-&gt;_right, bnum, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL树</title>
      <link href="/2022/12/14/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AVL%E6%A0%91/"/>
      <url>/2022/12/14/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/AVL%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="AVL概念"><a href="#AVL概念" class="headerlink" title="AVL概念"></a>AVL概念</h2><blockquote><p>当向二叉搜索树中插入新结点后，如果能保证每个结点的左右子树高度之差的绝对值不超过1(需要对树中的结点进行调整)，即可降低树的高度，从而减少平均搜索长度。  </p></blockquote><p>一棵AVL树或者是空树，或者是具有以下性质的二叉搜索树：  </p><ul><li>它的左右子树都是AVL树  </li><li>左右子树高度之差(简称平衡因子)的绝对值不超过1(-1&#x2F;0&#x2F;1)</li></ul><p>如果一棵二叉搜索树是高度平衡的，它就是AVL树。如果它有n个结点，其高度可保持在<br>$O(log_2 n)$，搜索时间复杂度O($log_2 n$)</p><h2 id="AVL操作"><a href="#AVL操作" class="headerlink" title="AVL操作"></a>AVL操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 插入先找位置</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先记录parent</span></span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入的比当前值小，往左边走</span></span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入值比左边大，往右边走</span></span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 相等的位置</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 走到这里cur为空，说明，找到了该插入的位置</span></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入成功。现在需要控制平衡，更新平衡因子</span></span><br><span class="line"><span class="comment">// 向上更新直到parent为空</span></span><br><span class="line"><span class="keyword">while</span> (parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// else if(parent-&gt;_bf==1 || parent-&gt;_bf==-1)</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur = parent;</span></span><br><span class="line"><span class="comment">// parent = parent-&gt;_parent;</span></span><br><span class="line">parent = parent-&gt;_parent;</span><br><span class="line">cur = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右单旋</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="built_in">RotateRL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="built_in">RotateLR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整完成之后break;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断平衡"><a href="#判断平衡" class="headerlink" title="判断平衡"></a>判断平衡</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _is_balance(_root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_height</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> _is_balance(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> diff = right-left;</span><br><span class="line"><span class="keyword">if</span> (diff != root-&gt;_bf)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; root-&gt;_kv.first &lt;&lt; <span class="string">&quot; 平衡因子异常&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(diff) &lt; <span class="number">2</span> &amp;&amp; _is_balance(root-&gt;_left) &amp;&amp; _is_balance(root-&gt;_right);</span><br><span class="line"><span class="comment">// if(abs(left-right)&gt;=2)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡因子更新"><a href="#平衡因子更新" class="headerlink" title="平衡因子更新"></a>平衡因子更新</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131300912.png"></p><p>更新平衡因子的规则</p><ul><li>新增在右，parent-&gt;bf++，新增在左，parent-&gt;bf–</li><li>更新后，parent-&gt;bf  &#x3D;&#x3D; 1 or -1, 说明parent插入前的平衡因子是0，说明左右子树高度相等，插入后有一边高，parent高度变了，需要继续往上更新</li><li>更新后，parent-&gt;bf &#x3D;&#x3D; 0，说明parent插入前的平衡因子是1 or -1， 说明左右子树一边高一边低，插入后两边一样高，插入填上了矮的那边，parent所在子树高度不变，不需要往上更新</li><li>更新后，parent-&gt;bf &#x3D;&#x3D; 2 or -2 ，说明parent插入前的平衡因子是1 or -1，已经平衡临界值，插入后变成2 or -2，打破平衡，parent所在子树需要旋转处理</li><li>更新后，parent-&gt;bf &gt;2 or &lt; -2，不可能，如果存在，则说明插入前就不是AVL树，需要去检查之前操作的问题</li></ul><h2 id="旋转的场景"><a href="#旋转的场景" class="headerlink" title="旋转的场景"></a>旋转的场景</h2><p>旋转的价值和意义：</p><ul><li>平衡</li><li>降低高度（高度恢复到插入之前的样子）</li></ul><h3 id="左单旋"><a href="#左单旋" class="headerlink" title="左单旋"></a>左单旋</h3><h4 id="情景分析"><a href="#情景分析" class="headerlink" title="情景分析"></a>情景分析</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131542366.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131543737.png"></p><p>具体进行左旋的时候也要分两种情况</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131544284.png"></p><p>调整完成之后，parent的平衡因子变为0，subR变为新的根，同时平衡因子也变为0</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateL</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//右边高</span></span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"></span><br><span class="line">parent-&gt;_right = subRL;</span><br><span class="line"><span class="keyword">if</span>(subRL)</span><br><span class="line">&#123;</span><br><span class="line">subRL-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line">subR-&gt;_left = parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(parent==_root)</span><br><span class="line">&#123;</span><br><span class="line">_root = subR;</span><br><span class="line">subR-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ppNode-&gt;_left=parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subR-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右单旋"><a href="#右单旋" class="headerlink" title="右单旋"></a>右单旋</h3><h4 id="情景分析‘"><a href="#情景分析‘" class="headerlink" title="情景分析‘"></a>情景分析‘</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131547708.png"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//右单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateR</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//左边高</span></span><br><span class="line">Node* subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先记录一些parent的父亲</span></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让subL的右给parent的左，然后parent做subL的右，subL做新的根</span></span><br><span class="line">parent-&gt;_left = subLR;</span><br><span class="line"><span class="comment">// 注意 要判断subLR是不是空</span></span><br><span class="line"><span class="keyword">if</span>(subLR)</span><br><span class="line">&#123;</span><br><span class="line">subLR-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subL-&gt;_right = parent;</span><br><span class="line">parent-&gt;_parent = subL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里也注意,</span></span><br><span class="line"><span class="keyword">if</span>(_root==parent)</span><br><span class="line">&#123;</span><br><span class="line">_root = subL;</span><br><span class="line">subL-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ppNode-&gt;_left == parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后让suL的parent指向ppNode</span></span><br><span class="line">subL-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右旋"><a href="#左右旋" class="headerlink" title="左右旋"></a>左右旋</h3><h4 id="情景分析-1"><a href="#情景分析-1" class="headerlink" title="情景分析"></a>情景分析</h4><p>三种情况：</p><p>1、在b新增，那么60节点的平衡因子是-1<br>2、在c新增，那么60节点的平衡因子是1</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131548304.png"></p><p>3、subLR就是新增</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131609243.png"></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateLR</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"><span class="type">int</span> bf = subLR-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateL</span>(parent-&gt;_left);</span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，subLR变成新的根</span></span><br><span class="line">subLR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在b插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// subLR就是新增</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在c插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="右左旋"><a href="#右左旋" class="headerlink" title="右左旋"></a>右左旋</h3><h4 id="情景分析-2"><a href="#情景分析-2" class="headerlink" title="情景分析"></a>情景分析</h4><p>1、新增在b，那么subRL平衡因子变成-1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为0，subR就是90的平衡因子变成1.</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212132009280.png"></p><p>2、新增在c，那么subRL平衡因子变成1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为-1，subR就是90的平衡因子变成0。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937234.png"></p><p>3、新增就是subRL，subRL平衡因子为0，调整完成后都是0</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937964.png"></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateRL</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"><span class="type">int</span> bf = subRL-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateR</span>(subR);</span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"></span><br><span class="line">subRL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断subRL的平衡因子是多少</span></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">subR-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>606. 根据二叉树创建字符串</title>
      <link href="/2022/12/10/%E5%8A%9B%E6%89%A3/%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/12/10/%E5%8A%9B%E6%89%A3/%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/construct-string-from-binary-tree/">606. 根据二叉树创建字符串</a></p><h2 id="我的错误思路"><a href="#我的错误思路" class="headerlink" title="我的错误思路"></a>我的错误思路</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// s+=&#x27;)&#x27;;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=(root-&gt;val+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&quot;()&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h2><p>还是前序遍历，根、左、右<br>但是要求将左子树和右子树括起来<br>如果不先考虑去括号的话</p><ul><li>先加当前节点的值</li><li>加 (</li><li>递归处理左子树</li><li>加 ）</li><li>加 (</li><li>递归处理右子树</li><li>加 )</li></ul><p>考虑去括号</p><ul><li>左右子树都为空，都去掉</li><li>右为空，去掉右</li><li>左为空，右不为空，不能去掉左</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="comment">//左边不为空，或者左边为空但是右边不为空，保留</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h2><p>这种写法有个不好的点，传值返回消耗稍微有点多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line">        string str;</span><br><span class="line">        str+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左边不为空，或者右边不为空左边为空，都需要加括号</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;left);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;right);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>236. 二叉树的最近公共祖先</title>
      <link href="/2022/12/10/%E5%8A%9B%E6%89%A3/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2022/12/10/%E5%8A%9B%E6%89%A3/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092158148.png"></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>规则：</p><p>一个是左子树中的节点，一个是右子树中的节点，那么他就是最近的公共祖先</p><p>这种做法的时间复杂度是O(H*N)，如果公共祖先在很下面，时间复杂度就比较高</p><p>每次找高度次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Find</span><span class="params">(TreeNode* root, TreeNode* x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*if(root==x)</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;left, x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;right,x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        return false;*/</span></span><br><span class="line">    <span class="comment">//更好的写法</span></span><br><span class="line">    retur root==x||<span class="built_in">Find</span>(root-&gt;left,x)||<span class="built_in">Find</span>(root-&gt;right,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==p||root==q)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> pInLeft,pInRight,qInLeft,qInRight;</span><br><span class="line">        pInLeft=<span class="built_in">Find</span>(root-&gt;left, p);</span><br><span class="line">        pInRight=!pInLeft;</span><br><span class="line"></span><br><span class="line">        qInLeft=<span class="built_in">Find</span>(root-&gt;left, q);</span><br><span class="line">        qInRight=!qInLeft;</span><br><span class="line">        <span class="comment">//1、一个在左一个在右，root就是最近公共祖先</span></span><br><span class="line">        <span class="comment">//2、都在左，递归去左子树找</span></span><br><span class="line">        <span class="comment">//3、都在右，递归去右子树找</span></span><br><span class="line">        <span class="keyword">if</span>((pInLeft&amp;&amp;qInRight)||(pInRight&amp;&amp;qInLeft))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInLeft&amp;&amp;qInLeft)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInRight&amp;&amp;qInRight)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;pp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>用栈记录路径，时间复杂度为O(N)</p><p>找6的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302061.png"></p><p>找4的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302985.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101237692.png"></p><p>我自己写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(TreeNode* root, TreeNode* x, stack&lt;TreeNode*&gt;&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;left, x, s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;right, x ,s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt;s1;</span><br><span class="line">        stack&lt;TreeNode*&gt;s2;</span><br><span class="line">        <span class="built_in">find</span>(root,p, s1);</span><br><span class="line">        <span class="built_in">find</span>(root,q, s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while(!s1.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s1.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s1.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// while(!s2.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s2.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s2.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>()&amp;&amp;!s2.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">top</span>()==s2.<span class="built_in">top</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">size</span>()==s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1.<span class="built_in">size</span>()&gt;s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105. 从前序与中序遍历序列构造二叉树</title>
      <link href="/2022/12/10/%E5%8A%9B%E6%89%A3/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/12/10/%E5%8A%9B%E6%89%A3/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101725948.png"></p><p>前序构建树</p><p>其中，通过preoder确定根，然后通过inorder分左右子树</p><p>比如上边图片的例子，通过preorder知道3为根，查找inorder，找到3所在的位置，分成中序的两个区间，记录左子树节点的个数，将前序序列也分为两个区间，然后递归处理左子树和右子树</p><p>我写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; preorder, vector&lt;<span class="type">int</span>&gt; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> mid= <span class="built_in">find</span>(inorder.<span class="built_in">begin</span>(),inorder.<span class="built_in">end</span>(), preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> nl=mid-inorder.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">        TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        root-&gt;left=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>,preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(inorder.<span class="built_in">begin</span>(),mid));</span><br><span class="line">        root-&gt;right=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl, preorder.<span class="built_in">end</span>()) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(mid+<span class="number">1</span>,inorder.<span class="built_in">end</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101815889.png"></p>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102. 二叉树的层序遍历</title>
      <link href="/2022/12/10/%E5%8A%9B%E6%89%A3/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>/2022/12/10/%E5%8A%9B%E6%89%A3/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212091957445.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> h =<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">v</span>(h, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录上一层节点的数量</span></span><br><span class="line">        <span class="type">int</span> pre=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遇到的难点1、怎么确定每层的节点</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(pre==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre=cnt;</span><br><span class="line">                i++;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v[i].<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            pre--;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简洁写法"><a href="#简洁写法" class="headerlink" title="简洁写法"></a>简洁写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092004473.png"></p><h2 id="双队列解法"><a href="#双队列解法" class="headerlink" title="双队列解法"></a>双队列解法</h2><p>一个队列存节点指针<br>一个队列存层数</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092012600.png"></p><p>还是要求深度，要不还是不大好搞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;level;</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">            level.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> h=<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">vv</span>(h,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* front = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="type">int</span> pre=level.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            level.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            vv[pre].<span class="built_in">push_back</span>(front-&gt;val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;left);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;right);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/2022/12/08/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2022/12/08/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树概念"><a href="#二叉搜索树概念" class="headerlink" title="二叉搜索树概念"></a>二叉搜索树概念</h1><blockquote><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树:  </p><ul><li>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值  </li><li>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值  </li><li>它的左右子树也分别为二叉搜索树</li></ul></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081211954.png"></p> <span id="more"></span><h1 id="二叉搜索树实现"><a href="#二叉搜索树实现" class="headerlink" title="二叉搜索树实现"></a>二叉搜索树实现</h1><h2 id="结构框架"><a href="#结构框架" class="headerlink" title="结构框架"></a>结构框架</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BSTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *left;</span><br><span class="line">BSTreeNode *right;</span><br><span class="line">K _key;</span><br><span class="line"><span class="built_in">BSTreeNode</span>(<span class="type">const</span> K &amp;key) : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>), _key(key)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> BSTreeNode&lt;K&gt; Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>让编译器提供个默认生成的就可以了，如果不写这个，又写了拷贝构造，编译器就不会自己自动生成了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BSTree</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><h2 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h2><p>递归拷贝左，右，根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BSTree</span>(<span class="type">const</span> BSTree&lt;K&gt; &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">_root = _copy(t._root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node *_copy(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// TODO 拷贝构造 赋值运算符重载</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(root-&gt;_key);</span><br><span class="line"></span><br><span class="line">node-&gt;left = _copy(root-&gt;left);</span><br><span class="line">node-&gt;right = _copy(root-&gt;right);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>写完拷贝构造之后可以直接用现在写法就OK了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BSTree&lt;K&gt; <span class="keyword">operator</span>=(BSTree&lt;K&gt; t)</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_root, t._root);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="析构"><a href="#析构" class="headerlink" title="析构"></a>析构</h2><p>递归，左、右、根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _destory(Node *&amp;root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">_destory(root-&gt;left);</span><br><span class="line">_destory(root-&gt;right);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>比它大往右走，比他小往左走，走到空，找它父亲链接起来</p><h3 id="非递归代码"><a href="#非递归代码" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// key==cur-&gt;key</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里cur走到了空 进行插入</span></span><br><span class="line">Node *new_node = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码"><a href="#递归代码" class="headerlink" title="递归代码"></a>递归代码</h3><p>重点是参数列表的引用<br>如果走到了root为空，说明到了该插入的位置，现在的root就是上一层父亲左孩子或者右孩子那个指针的别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _insert_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>提供一个inorder的接口，调用_inorder()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_inorder(_root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">void</span> _inorder(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">_inorder(root-&gt;left);</span><br><span class="line">cout &lt;&lt; root-&gt;_key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">_inorder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="情况1、左右孩子都为空"><a href="#情况1、左右孩子都为空" class="headerlink" title="情况1、左右孩子都为空"></a>情况1、左右孩子都为空</h3><p>可以记录父亲的值，直接干掉当前节点，判断当前节点是父亲的左还是右，然后用空替代当前节点</p><p>情况1可以归为情况2的特例</p><h3 id="情况2、左右孩子有一个为空"><a href="#情况2、左右孩子有一个为空" class="headerlink" title="情况2、左右孩子有一个为空"></a>情况2、左右孩子有一个为空</h3><h4 id="左孩子为空"><a href="#左孩子为空" class="headerlink" title="左孩子为空"></a>左孩子为空</h4><blockquote><p>删除的是根</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081334295.png"></p><blockquote><p>删除的不是根，依然两种情况，主要看这个要删除的节点是父亲的左还是右</p></blockquote><p>如果是父亲的左，就把cur的右给父亲的左</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081352923.png"></p><p>如果是父亲的右，就把cur的右给父亲的右<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081353553.png"></p><h4 id="右孩子为空"><a href="#右孩子为空" class="headerlink" title="右孩子为空"></a>右孩子为空</h4><blockquote><p>先判断特殊情况，删除的节点为根节点</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081333711.png"></p><p>其他情况与左孩子为空情况大概相同</p><ul><li>如果，cur为父亲的左，那么让父亲的左，指向cur的左</li><li>如果，cur为父亲的右，那么让父亲的右，指向cur的右</li></ul><h3 id="情况3、左右孩子都不为空"><a href="#情况3、左右孩子都不为空" class="headerlink" title="情况3、左右孩子都不为空"></a>情况3、左右孩子都不为空</h3><ul><li>找右树的最小节点，也就是右树的最左</li><li>找左树的最大节点 ，也就是左树的最右</li></ul><p>情况1<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509463.png"></p><p>情况2</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509737.png"></p><h3 id="非递归代码-1"><a href="#非递归代码-1" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//先找到要删除的节点，同时记录父节点的位置</span></span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存一下cur</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// key &lt; 当前节点的key， 往节点的左子树找</span></span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前节点的key小于要删除的key， 往右子树找</span></span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里说明cur-&gt;_key==key 可以进行删除了</span></span><br><span class="line"><span class="comment">//情况有一个孩子或者一个孩子都没有</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur左孩子为空 、右孩子可能为空，可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)  <span class="comment">//情况1</span></span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur右孩子为空   左孩子可能为空，也可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)</span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右孩子都不为空</span></span><br><span class="line"><span class="comment">//先找当前节点右树的最小节点</span></span><br><span class="line">Node *parent = cur;</span><br><span class="line">Node *min = cur-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">parent = min;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到了右树的最左节点</span></span><br><span class="line"><span class="comment">//如果是根节点、比如删除8，那么min现在是10，parent=8</span></span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, cur-&gt;_key);</span><br><span class="line"><span class="comment">//如果删除3、</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == min)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// parent的左等于min，比如删除</span></span><br><span class="line">parent-&gt;left = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走到这里说明数中没有要删除的节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码-1"><a href="#递归代码-1" class="headerlink" title="递归代码"></a>递归代码</h3><p>过程：</p><ol><li>如果根为空，返回false</li><li>如果当前值大于key，递归删除左</li><li>如果当前值小于key，递归删除右</li><li>如果相等，则进入删除逻辑</li></ol><blockquote><p>分三种情况</p><ul><li>左孩子为空</li><li>右孩子为空</li><li>左右孩子都不为空</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _erase_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//就是当前节点</span></span><br><span class="line">Node *del = root;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右都不为空</span></span><br><span class="line">Node *min = root-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min)</span><br><span class="line">&#123;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, root-&gt;_key);</span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> del;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="非递归代码-2"><a href="#非递归代码-2" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="递归代码-2"><a href="#递归代码-2" class="headerlink" title="递归代码"></a>递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _find_r(Node *root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ChatGPT免翻墙网站推荐</title>
      <link href="/posts/4182892542/"/>
      <url>/posts/4182892542/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="73971b1c0f5dc5efcc31003761f931ec85d59bcdd937278209be77e47aca0970">f6cac86f78082062b77dcf10f39589921f158d3630d5552bd29d30e37601f316ecf4a7b0006a4bec8a7103c83c767803ec8acd980091b6dd3bf97e27e6d3c54a468c062cb4df1d2b53f26b0122ab0b9808ed477911c242faa4556c0495e381467b457b2db73049ff606485a24b58796c67526724d465dee19f077e648d05ad2381843988fb20bb1ec4529313c123606675e50878b19dfd72dbac3fec028cd148012a8e4246589400a4b606b47af1ed8e469031c5a42f993cf4516a57422d6d55bb20945a8fa2df8e6ecd13f43a87d52e7f60dd3568ff7314fd53db7365355c0632b423dae0030d113cb182a37cb7fa80fcd6a6fa08b4fe9dee1091ae1c56abca0304ea7d459a29db9b08af6cf0c423d11b754744047701585960c7baa0019fff85372ba99c0f7607ad63d2ae14cc0c1dd9da5e1688885ae6deb4d301f7b027bba13aeccdc801f491e27fb90c22363a6c5359c87c11d11fbe82fd8d4ab471117e2c093e4edaf5fbeb5987de4b08460a9340e07722574a24c7c2ab903bbf58a76e35143a8fb5ac7aad29857aa9ca7c769b868a4e2af43fd76adedcb4c66188206a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">你好呀，这里需要密码哦, 关注微信公众号孙菜菜回复关键词chatgpt获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 自然语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能这么强，我们会被淘汰吗？应该怎么办？</title>
      <link href="/posts/2356723078/"/>
      <url>/posts/2356723078/</url>
      
        <content type="html"><![CDATA[<p>金融界3月10日消息 据德国媒体heise在线报道，当地时间3月9日，微软德国CTO Andreas Braun（布劳恩）在一场AI活动中表示，GPT-4将于下周发布，并且是多模态，不仅仅局限于文字，还包括视频。与此同时，Braun还强调GPT-4能够适用所有的语言，用户可以用德语提问，然后获得意大利语的答案。目前最先进的语言模型之一是GPT-3，它在语言理解和生成方面的表现已经达到了前所未有的高度。但是GPT4更加恐怖，未来人工智能将可以更好地帮助人们处理语言任务，比如自然语言处理、智能客服、知识图谱等。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121447028.png" alt="image.png"></p><p>人工智能的发展已经取得了巨大的成就，不断涌现出新的技术和应用场景。在这个背景下，人们普遍担心未来许多职业将被替代，而情绪价值的职业可能会长久不衰。但是，事实上情况可能并不是这样简单。本文将从多个角度探讨人工智能发展对未来职业的影响。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121429557.png" alt="image.png"></p><p>但是，人工智能仍然存在着一些局限性。例如，它们很难处理一些特定领域的知识，需要人类专业知识的支持。另外，人工智能仍然难以像人类一样做出具有创造性、判断力和决策力的任务。因此，人工智能仍然需要人类的专业知识和经验来解决复杂的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121430845.png" alt="image.png"></p><p>随着人工智能技术的发展，一些职业可能会受到影响，比如一些重复性高、标准化程度高的工作可能会被机器人取代。例如，一些制造业和物流领域的工作可能会被自动化取代。但是，同时也会出现一些新的职业和机会。例如，在人工智能领域，需要大量的研究人员、工程师、数据科学家等专业人才。此外，由于人工智能技术的应用范围越来越广泛，需要具备跨学科知识和技能的人才也会越来越受欢迎。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121432645.png" alt="image.png"></p><p>一些职业可能会更加重要的原因之一是提供情绪价值。这些职业包括心理医生、咨询师、教育工作者、社工、艺术家等，他们的工作往往需要具备高度的情感智商和人际交往能力，需要与人打交道并且能够理解和处理他们的情绪和需求。这些职业往往需要长期学习和实践，无法被简单地替代。</p><p>此外，情绪价值的职业还具有另外一种重要性，那就是人类对情感联系的需求。虽然人工智能可以通过自然语言处理和情感分析等技术来模拟情感，但是它们缺乏真实的情感体验和交流能力。因此，情绪价值的职业将继续是人类社会中不可或缺的一部分。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121432868.png" alt="image.png"></p><p>尽管人工智能发展对职业的影响是不可避免的，但是我们可以采取一些措施来适应这个时代。以下是一些建议：</p><ol><li><p>继续学习和发展自己的技能和知识，特别是跨学科的知识和技能。</p></li><li><p>掌握一些高级技术和工具，例如机器学习、自然语言处理和数据分析等。</p></li><li><p>寻找新的机会和职业，例如在人工智能领域工作或者从事情绪价值的职业。</p></li><li><p>改变自己的职业思维和态度，例如转变为创业者或者自由职业者，或者寻找其他方式来获得收入和生计。</p></li></ol><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121433768.png" alt="image.png"></p><p>总结</p><p>在未来的人工智能时代，职业发展将会面临着许多挑战和机遇。一些职业可能会被机器替代，但是同时也会出现新的职业和机会。情绪价值的职业将继续存在并且发挥着重要作用。为了适应这个时代，我们需要不断学习和发展自己的技能和知识，寻找新的机会和职业，并改变自己的职业思维和态度。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> AI下的思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>震惊！！ChatGPT越狱，解锁暗黑版本的ChatGPT，突破openai对chatgpt回答限制。</title>
      <link href="/posts/3439780086/"/>
      <url>/posts/3439780086/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c0f0f84de86503a1ffe1268fea9a6d64f8095ab81fe345b7f0e99abbac0b1785"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">你好呀，这里需要密码哦, 关注微信公众号孙菜菜回复关键词chatgpt获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 自然语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯电动汽车simulink教程</title>
      <link href="/posts/1513554255/"/>
      <url>/posts/1513554255/</url>
      
        <content type="html"><![CDATA[<h1>纯电动汽车simulink模型</h1><h2 id="课程简介">课程简介</h2><p><img src="https://img.shields.io/github/stars/suntong-1221/EV_Model.svg" alt="Github stars"><br><a href="https://ci.appveyor.com/project/suntong-1221/EV_Model"><img src="https://ci.appveyor.com/api/projects/status/sb279kxuv1be391g?svg=true" alt="Build status"></a></p><p>​该模型为纯电动汽车单电机整车模型🚗，整车模型可正常仿真运行，但是其中可能存在较大问题，同学们在学习的时候一定要辩证的看待，然后里面缺少几个表数据，这个并没有公开，因为是课题组的资源。</p><ul><li>已经添加了2018a版本的模型文件</li><li>B站链接：<a href="https://www.bilibili.com/video/BV1cm4y1S7Rs?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1cm4y1S7Rs?spm_id_from=333.999.0.0</a></li></ul><hr><h2 id="新增内容">新增内容</h2><p>​因为最初上传模型EV_v0.1版本缺少部分课题组内部数据，应同学要求，新增EM_v0.2版本，下载可正常运行，电机是随便找的硕士论文电机额定功率为34kw，最大转矩130Nm，然后我随便按照特性编的数据，电机效率固定为0.95，电池部分，直接给了固定内阻和固定单体电池电压。</p><p><font color=Red>注意事项</font>:underage:</p><ul><li>模型大致符合电动汽车特性，但是数据及其不可信</li><li>简单学习使用，辩证看待</li></ul><hr><h2 id="课程分节">课程分节</h2><ol><li><a href="https://www.bilibili.com/video/BV1cm4y1S7Rs/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-框架逻辑</a></li><li><a href="https://www.bilibili.com/video/BV1a3411Y7dg/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-驾驶员模型</a></li><li><a href="https://www.bilibili.com/video/BV1GT4y1y7TU/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-电池模型</a></li><li><a href="https://www.bilibili.com/video/BV18L4y1s7W2/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-控制模型</a></li><li><a href="https://www.bilibili.com/video/BV1Yq4y1b7PB/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-电机模型</a></li><li><a href="https://www.bilibili.com/video/BV1kb4y177MD/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-车身模型</a></li><li><a href="https://www.bilibili.com/video/BV1r5411o7Rg/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-仿真与欧拉算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开源课程 </category>
          
          <category> simulink </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python菜鸡教程</title>
      <link href="/posts/2838110349/"/>
      <url>/posts/2838110349/</url>
      
        <content type="html"><![CDATA[<h1>python菜鸡教程</h1><h2 id="课程简介">课程简介</h2><blockquote><p>费曼学习法是比较有名的一种学习方式，核心要义是通过复述概念并反馈结果来加强记忆，它是符合大脑的认知规律，从混乱走向有序的过程，从被动记忆走向主动理解并阐述。这么棒的学习方式当然要尝试尝试，通过这种方式我也尝试学学python</p></blockquote><p>课程依托于大佬文字版教程<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰python教程</a>进行理解与讲述</p><h2 id="课程链接">课程链接</h2><p><a href="https://www.ixigua.com/7173635950831108620?logTag=51f64d219c69d66c8201">第一节、输入和输出</a></p><p><a href="https://www.ixigua.com/7174049005603979791?logTag=622639136a3e74362eb4">第二节、数据类型和变量</a></p><p><a href="https://www.ixigua.com/7178820918473392655?logTag=ac50f7d3ba276998ee50">第三节、字符串和编码</a></p><p><a href="https://www.ixigua.com/7181108669298410024?logTag=9135f17cb2c13d20b8e2">第四节、使用list和tuple</a></p><p><a href="https://www.ixigua.com/7181418828872876547?logTag=9889661aec1751e1989c">第五节、条件判断和循环</a></p><p><a href="https://www.ixigua.com/7190390094074184203?logTag=66a3f6d9d08eddd09840">第六节、使用dict和set</a></p><p><a href="https://www.ixigua.com/7194312039769211396?logTag=9217a796a89d2de0e0f3">第七节、调用函数</a></p>]]></content>
      
      
      <categories>
          
          <category> 开源课程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>9、高并发内存池-性能测试及优化</title>
      <link href="/posts/1573212312/"/>
      <url>/posts/1573212312/</url>
      
        <content type="html"><![CDATA[<h1>多线程环境下对比malloc测试</h1><h2 id="测试代码">测试代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ConcurrentAlloc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ntimes 一轮申请和释放内存的次数</span></span><br><span class="line"><span class="comment">// rounds 轮次</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BenchmarkMalloc</span><span class="params">(<span class="type">size_t</span> ntimes, <span class="type">size_t</span> nworks, <span class="type">size_t</span> rounds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;std::thread&gt; <span class="title">vthread</span><span class="params">(nworks)</span></span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; malloc_costtime = <span class="number">0</span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; free_costtime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; nworks; ++k)</span><br><span class="line">&#123;</span><br><span class="line">vthread[k] = std::<span class="built_in">thread</span>([&amp;, k]() &#123;</span><br><span class="line">std::vector&lt;<span class="type">void</span>*&gt; v;</span><br><span class="line">v.<span class="built_in">reserve</span>(ntimes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> begin1 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//v.push_back(malloc(16));</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">malloc</span>((<span class="number">16</span> + i) % <span class="number">8192</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end1 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> begin2 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end2 = <span class="built_in">clock</span>();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">malloc_costtime += (end1 - begin1);</span><br><span class="line">free_costtime += (end2 - begin2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : vthread)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次malloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; malloc_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次free &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发malloc&amp;free&quot;</span> &lt;&lt; nworks * rounds * ntimes &lt;&lt; <span class="string">&quot;总计花费：&quot;</span> &lt;&lt; malloc_costtime + free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单轮次申请释放次数 线程数 轮次</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BenchmarkConcurrentMalloc</span><span class="params">(<span class="type">size_t</span> ntimes, <span class="type">size_t</span> nworks, <span class="type">size_t</span> rounds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;std::thread&gt; <span class="title">vthread</span><span class="params">(nworks)</span></span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; malloc_costtime = <span class="number">0</span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; free_costtime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; nworks; ++k)</span><br><span class="line">&#123;</span><br><span class="line">vthread[k] = std::<span class="built_in">thread</span>([&amp;]() &#123;</span><br><span class="line">std::vector&lt;<span class="type">void</span>*&gt; v;</span><br><span class="line">v.<span class="built_in">reserve</span>(ntimes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> begin1 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//v.push_back(ConcurrentAlloc(16));</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">ConcurrentAlloc</span>((<span class="number">16</span> + i) % <span class="number">8192</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end1 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> begin2 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ConcurrentFree</span>(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end2 = <span class="built_in">clock</span>();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">malloc_costtime += (end1 - begin1);</span><br><span class="line">free_costtime += (end2 - begin2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : vthread)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次concurrent alloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; malloc_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次concurrent dealloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发concurrent alloc&amp;dealloc&quot;</span> &lt;&lt; nworks * rounds * ntimes &lt;&lt; <span class="string">&quot;总计花费：&quot;</span> &lt;&lt; malloc_costtime + free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> n = <span class="number">10000</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;==========================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">BenchmarkConcurrentMalloc</span>(n, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BenchmarkMalloc</span>(n, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;==========================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="申请释放固定内存大小">申请释放固定内存大小</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171300120.png" alt="image.png"></p><h2 id="申请释放不同内存大小">申请释放不同内存大小</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171303359.png" alt="image.png"></p><h1>性能瓶颈分析</h1><blockquote><p>上述测试发现，我们的内存池比malloc还是差一些的，但是不大容易知道到底是代码的哪一个部分消耗的性能较多，不知道性能的瓶颈在哪里，这时候可以使用性能分析工具</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171413680.png" alt="image.png"></p><p>打开性能探查器，可用工具类，检测项打上对号</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171414904.png" alt="image.png"></p><p>点击开始</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171430934.png" alt="image.png"></p><p>可以发现MapObjectToSpan所花费时间非常长，因为涉及到锁的竞争问题，那么我们应该如何进行优化呢？</p><h1>基数树优化</h1><blockquote><p>这里使用基数树进行优化，基数树实际是一个分层的哈希表，根据所分层数，可以分为单层基数树、二层基数树、三层基数树</p></blockquote><h2 id="单层基数树">单层基数树</h2><blockquote><p>单层基数树使用的是直接定址法，在32位平台下，最多分成2^32/2^13次方个页，我们直接开2^(31-13)次方大小的数组</p></blockquote><p>这这里可以用非类型模板参数，将次方传入，1&lt;&lt; BITS 就是2的BITS次方。直接开这么长的数组</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171521406.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap1</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LENGTH = <span class="number">1</span> &lt;&lt; BITS;</span><br><span class="line"><span class="type">void</span>** array_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit TCMalloc_PageMap1(void* (*allocator)(size_t)) &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//array_ = reinterpret_cast&lt;void**&gt;((*allocator)(sizeof(void*) &lt;&lt; BITS));</span></span><br><span class="line"><span class="type">size_t</span> size = <span class="built_in">sizeof</span>(<span class="type">void</span>*) &lt;&lt; BITS;</span><br><span class="line"><span class="type">size_t</span> alignSize = SizeClass::_RoundUp(size, <span class="number">1</span> &lt;&lt; PAGE_SHIFT);</span><br><span class="line">array_ = (<span class="type">void</span>**)<span class="built_in">SystemAlloc</span>(alignSize &gt;&gt; PAGE_SHIFT);</span><br><span class="line"><span class="built_in">memset</span>(array_, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">void</span>*) &lt;&lt; BITS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the current value for KEY.  Returns NULL if not yet set,</span></span><br><span class="line"><span class="comment">// or if k is out of range.</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array_[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// REQUIRES &quot;k&quot; is in range &quot;[0,2^BITS-1]&quot;.</span></span><br><span class="line"><span class="comment">// REQUIRES &quot;k&quot; has been ensured before.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Sets the value &#x27;v&#x27; for key &#x27;k&#x27;.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span> </span>&#123;</span><br><span class="line">array_[k] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二层基数树">二层基数树</h2><blockquote><p>假设同样在32位平台下，最多分成2^32/2^13  = 2^19次方个页，最多用19个比特位可以标识，用二层得基数树，第一层只用5个比特位，做直接定址，对应的下标存的元素是 void* values[LEAF_LENGTH]，剩下的14位可以总共映射 length = 1&lt;&lt;14个数据</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171526874.png" alt="image.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Two-level radix tree</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap2</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// Put 32 entries in the root and (2^BITS)/32 entries in each leaf.</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ROOT_BITS = <span class="number">5</span>; <span class="comment">//第一层对应页号的前5个比特位</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ROOT_LENGTH = <span class="number">1</span> &lt;&lt; ROOT_BITS; <span class="comment">//第一层存储元素的个数 2^5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_BITS = BITS - ROOT_BITS;<span class="comment">//第二层对应页号的其余比特位 19-5=14</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_LENGTH = <span class="number">1</span> &lt;&lt; LEAF_BITS; <span class="comment">//第二层存储元素的个数 2^14</span></span><br><span class="line"><span class="comment">// Leaf node</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Leaf</span> &#123;</span><br><span class="line"><span class="type">void</span>* values[LEAF_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Leaf* root_[ROOT_LENGTH];             <span class="comment">// Pointers to 32 child nodes</span></span><br><span class="line"><span class="type">void</span>* (*allocator_)(<span class="type">size_t</span>);          <span class="comment">// Memory allocator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit TCMalloc_PageMap2(void* (*allocator)(size_t)) &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//allocator_ = allocator;</span></span><br><span class="line"><span class="built_in">memset</span>(root_, <span class="number">0</span>, <span class="built_in">sizeof</span>(root_));</span><br><span class="line"></span><br><span class="line"><span class="built_in">PreallocateMoreMemory</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; LEAF_BITS;  <span class="comment">// 右移14位，得到前5位</span></span><br><span class="line"><span class="type">const</span> Number i2 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span> || root_[i1] == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root_[i1]-&gt;values[i2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; LEAF_BITS;</span><br><span class="line"><span class="comment">// 1000 0000 0000 000-1 = 0111 1111 1111 11</span></span><br><span class="line"><span class="comment">// 相与获得后14位</span></span><br><span class="line"><span class="type">const</span> Number i2 = k &amp; (LEAF_LENGTH - <span class="number">1</span>); </span><br><span class="line"><span class="built_in">ASSERT</span>(i1 &lt; ROOT_LENGTH);</span><br><span class="line">root_[i1]-&gt;values[i2] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保映射[start ， start+n-1]页号的空间是开好的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Ensure</span><span class="params">(Number start, <span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Number key = start; key &lt;= start + n - <span class="number">1</span>;) &#123;</span><br><span class="line"><span class="type">const</span> Number i1 = key &gt;&gt; LEAF_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for overflow</span></span><br><span class="line"><span class="keyword">if</span> (i1 &gt;= ROOT_LENGTH)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make 2nd level node if necessary</span></span><br><span class="line"><span class="keyword">if</span> (root_[i1] == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//Leaf* leaf = reinterpret_cast&lt;Leaf*&gt;((*allocator_)(sizeof(Leaf)));</span></span><br><span class="line"><span class="comment">//if (leaf == NULL) return false;</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Leaf&gt;leafPool;</span><br><span class="line">Leaf* leaf = (Leaf*)leafPool.<span class="built_in">New</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(leaf, <span class="number">0</span>, <span class="built_in">sizeof</span>(*leaf));</span><br><span class="line">root_[i1] = leaf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Advance key past whatever is covered by this leaf node</span></span><br><span class="line">key = ((key &gt;&gt; LEAF_BITS) + <span class="number">1</span>) &lt;&lt; LEAF_BITS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreallocateMoreMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将第二层全部的空间都开好</span></span><br><span class="line"><span class="built_in">Ensure</span>(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; BITS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在32位平台下，第一层数组占，2^5* 4=2^7字节，第二层最多有2^5^2^14^4=2^21=2M，消耗也不大，可以直接全开出来</p></blockquote><h2 id="三层基数树">三层基数树</h2><blockquote><p>64位平台下，公共有2^64/2^13=2^51个页，一层基数树肯定不行，二层页不大行，用三层基数树，三层基数树就是将存储页号的比特位分三次映射</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171607278.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Three-level radix tree</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INTERIOR_BITS = (BITS + <span class="number">2</span>) / <span class="number">3</span>;       <span class="comment">//第一、二层对应页号的比特位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INTERIOR_LENGTH = <span class="number">1</span> &lt;&lt; INTERIOR_BITS; <span class="comment">//第一、二层存储元素的个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_BITS = BITS - <span class="number">2</span> * INTERIOR_BITS; <span class="comment">//第三层对应页号的比特位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_LENGTH = <span class="number">1</span> &lt;&lt; LEAF_BITS;         <span class="comment">//第三层存储元素的个数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">Node* ptrs[INTERIOR_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Leaf</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* values[LEAF_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node* <span class="title">NewNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Node&gt; nodePool;</span><br><span class="line">Node* result = nodePool.<span class="built_in">New</span>();</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="built_in">sizeof</span>(*result));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">Node* root_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">root_ = <span class="built_in">NewNode</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (k &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i3 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);                    <span class="comment">//第三层对应的下标</span></span><br><span class="line"><span class="comment">//页号超出范围，或映射该页号的空间未开辟</span></span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span> || root_-&gt;ptrs[i1] == <span class="literal">NULL</span> || root_-&gt;ptrs[i1]-&gt;ptrs[i2] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;Leaf*&gt;(root_-&gt;ptrs[i1]-&gt;ptrs[i2])-&gt;values[i3]; <span class="comment">//返回该页号对应span的指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(k &gt;&gt; BITS == <span class="number">0</span>);</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (k &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i3 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);                    <span class="comment">//第三层对应的下标</span></span><br><span class="line"><span class="built_in">Ensure</span>(k, <span class="number">1</span>); <span class="comment">//确保映射第k页页号的空间是开辟好了的</span></span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;Leaf*&gt;(root_-&gt;ptrs[i1]-&gt;ptrs[i2])-&gt;values[i3] = v; <span class="comment">//建立该页号与对应span的映射</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确保映射[start,start+n-1]页号的空间是开辟好了的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Ensure</span><span class="params">(Number start, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Number key = start; key &lt;= start + n - <span class="number">1</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = key &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (key &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="keyword">if</span> (i1 &gt;= INTERIOR_LENGTH || i2 &gt;= INTERIOR_LENGTH) <span class="comment">//下标值超出范围</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (root_-&gt;ptrs[i1] == <span class="literal">NULL</span>) <span class="comment">//第一层i1下标指向的空间未开辟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开辟对应空间</span></span><br><span class="line">Node* n = <span class="built_in">NewNode</span>();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">root_-&gt;ptrs[i1] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root_-&gt;ptrs[i1]-&gt;ptrs[i2] == <span class="literal">NULL</span>) <span class="comment">//第二层i2下标指向的空间未开辟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开辟对应空间</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Leaf&gt; leafPool;</span><br><span class="line">Leaf* leaf = leafPool.<span class="built_in">New</span>();</span><br><span class="line"><span class="keyword">if</span> (leaf == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(leaf, <span class="number">0</span>, <span class="built_in">sizeof</span>(*leaf));</span><br><span class="line">root_-&gt;ptrs[i1]-&gt;ptrs[i2] = <span class="built_in">reinterpret_cast</span>&lt;Node*&gt;(leaf);</span><br><span class="line">&#125;</span><br><span class="line">key = ((key &gt;&gt; LEAF_BITS) + <span class="number">1</span>) &lt;&lt; LEAF_BITS; <span class="comment">//继续后续检查</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreallocateMoreMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当需要建立某一页号的映射关系时，先确保存储该页映射的数组空间是开好的，调用Ensure函数，如果没开好，就开辟对应的空间</p></blockquote><h2 id="使用基数树优化">使用基数树优化</h2><blockquote><p>我们在32位平台下测试，直接使用一层基数树即可将unordered_map替换成基数树的结构，并用set和get函数，替换方括号和find的作用</p></blockquote><h3 id="更改代码">更改代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCMalloc_PageMap1&lt;<span class="number">32</span> - PAGE_SHIFT&gt; _idSpanMap;  <span class="comment">//32-13=19，总共2^19个页</span></span><br></pre></td></tr></table></figure><p>建立映射：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_idSpanMap.<span class="built_in">set</span>(span-&gt;_pageId, span);</span><br></pre></td></tr></table></figure><p>读取Span</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Span* ret = (Span*)_idSpanMap.<span class="built_in">get</span>(id);</span><br></pre></td></tr></table></figure><h3 id="优化原理">优化原理</h3><blockquote><p>基数树的检索可能略好一点，但是最重要的是基数树的结构不需要加锁，map和unordered_map，插入数据底层的数据结构可能会变化，比如红黑树的选择，哈希表的扩容，所以在读取映射关系时需要加锁，但是基数树一旦开好空间就不会发生变化。<br>我们不会同时对一个页进行读取映射和建立映射的操作，只有在释放对象的时候才需要读取，建立映射都是在page cache中进行，建立映射的对应的span的usecount为0，而读取对应的span的usecount不为0，所以不会对一个页同时进行读取和建立映射。</p></blockquote><h3 id="性能对比">性能对比</h3><blockquote><p>再次与malloc进行对比</p></blockquote><p>固定大小的对象的申请和释放</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171629323.png" alt="image.png"></p><p>不固定大小的对象的申请和释放</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171627490.png" alt="image.png"></p><p>可以看到两种场景，都比malloc快2~3倍左右</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8、高并发内存池-细节完善</title>
      <link href="/posts/2734729201/"/>
      <url>/posts/2734729201/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们的内存池已经完成了申请内存和释放内存的功能但是还有几个地方没有处理完善，主要有以下几个方面：</p></blockquote><ul><li>大于256KB的内存申请</li><li>内存池的内部要脱离new</li><li>释放对象时的细节</li></ul><h1>大于256KB的内存处理</h1><h2 id="申请">申请</h2><blockquote><p>在ConcurrentAlloc.h文件中，申请内存的时候要分两种情况</p></blockquote><ul><li>小于256kb走thread cache</li><li>大于256kb走page cache</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">ConcurrentAlloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 申请的内存大于MAX_BYTES(256kb)</span></span><br><span class="line"><span class="comment">// 走Page Cache层申请</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先进行对齐</span></span><br><span class="line"><span class="type">size_t</span> alignSize = SizeClass::<span class="built_in">RoundUp</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后算需要几页</span></span><br><span class="line"><span class="type">size_t</span> kpage = alignSize &gt;&gt; PAGE_SHITF;</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(alignSize);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span>*)(span-&gt;_pageId &lt;&lt; PAGE_SHITF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pTLSThreadCache == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pTLSThreadCache = <span class="keyword">new</span> ThreadCache;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pTLSThreadCache-&gt;<span class="built_in">Allocate</span>(size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们SizeClass对齐的逻辑，并没有处理大于256KB的内存，我们需要增加这一部分</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">RoundUp</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">128</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">8</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">64</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">256</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 大于256KB 1&lt;&lt;13 也就是8kb</span></span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">1</span> &lt;&lt; PAGE_SHITF);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是这个大于256kb的让page cache申请，还是存在一些问题，因为page cache最多提供128页的内存，如果申请的内存大于128页，则还是需要进行处理，这部分，我们在page cache中进行处理。</p></blockquote><pre><code>PageCache::NewSpan函数中，增加申请大于128页的span的逻辑</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果k &gt; 128页 走系统调用</span></span><br><span class="line"><span class="keyword">if</span> (k &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">SystemAlloc</span>(k);</span><br><span class="line">Span* span = <span class="keyword">new</span> Span;</span><br><span class="line">span-&gt;_pageId = (PAGE_ID)ptr &gt;&gt; PAGE_SHITF;</span><br><span class="line">span-&gt;_n = k;</span><br><span class="line"></span><br><span class="line">_idSpanMap[span-&gt;_pageId] = span;</span><br><span class="line"><span class="keyword">return</span> span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放">释放</h2><blockquote><p>大于256kb的内存，释放时，同样不能走thread cache层回收，要有单独的回收逻辑，我们还是通过pagecache层回收</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConcurrentFree</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">MapObjectToSpan</span>(ptr);</span><br><span class="line"></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseSpanToPageCache</span>(span);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(pTLSThreadCache);</span><br><span class="line">pTLSThreadCache-&gt;<span class="built_in">Deallocate</span>(ptr, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同样，在pagecache层中还要分为，这个内存是大于128页还是小于128页，小于128直接走Page cache层的回收逻辑，大于128页的通过系统调用回收</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放空闲span回到PageCache，并合并相邻的span</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageCache::ReleaseSpanToPageCache</span><span class="params">(Span* span)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* ptr = (<span class="type">void</span>*)(span-&gt;_pageId &lt;&lt; PAGE_SHITF);</span><br><span class="line"><span class="built_in">SystemFree</span>(ptr);</span><br><span class="line"><span class="keyword">delete</span> span;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并相邻的span，向前合并，有问题：前面的span如果被用就不能进行合并</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID prevId = span-&gt;_pageId - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(prevId);</span><br><span class="line"><span class="comment">//前边的页号没有了就不和并了</span></span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前边相邻页在使用，不合并</span></span><br><span class="line">Span* prevSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入合并的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//span-&gt;_pageId -= prevSpan-&gt;_n;</span></span><br><span class="line">span-&gt;_pageId = prevSpan-&gt;_pageId;</span><br><span class="line">span-&gt;_n += prevSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[prevSpan-&gt;_n].<span class="built_in">Erase</span>(prevSpan);</span><br><span class="line"><span class="keyword">delete</span> prevSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID nextID = span-&gt;_pageId + span-&gt;_n;</span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(nextID);</span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Span* nextSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span-&gt;_n += nextSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[nextSpan-&gt;_n].<span class="built_in">Erase</span>(nextSpan);</span><br><span class="line"><span class="keyword">delete</span> nextSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_spanLists[span-&gt;_n].<span class="built_in">PushFront</span>(span);</span><br><span class="line">span-&gt;_isUse = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">_idSpanMap[span-&gt;_pageId] = span;</span><br><span class="line">_idSpanMap[span-&gt;_pageId + span-&gt;_n - <span class="number">1</span>] = span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里封装的了Windows系统的VirtualFree函数，进行大于128页的内存释放</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用系统接口释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">void</span> <span class="title">SystemFree</span><span class="params">(<span class="type">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="built_in">VirtualFree</span>(ptr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// sbrk unmmap等</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>使用定长内存池配合脱离new</h1><blockquote><p>我们的内存池期望的是在内部不使用malloc函数申请内存，走自己的一套申请释放体系，但是目前我们的代码中，还是有不少地方（new span的对象）使用了new，为了完全脱离new，我们可以配合之前的定长内存池。</p></blockquote><h2 id="申请-2">申请</h2><p>因为span对象都是在page cache层new出来的，我们可以在page cache层增加一个定长内存池对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectPool&lt;Span&gt; _spanPool;</span><br></pre></td></tr></table></figure><blockquote><p>然后我们在new Span的场景下，替换成定长内存池的申请</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Span* span = <span class="keyword">new</span> Span;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上边替换成下边</span></span><br><span class="line"></span><br><span class="line">Span* span = _spanPool.<span class="built_in">New</span>();</span><br></pre></td></tr></table></figure><blockquote><p>在线程申请创建thread cache时，也是通过new进行申请的，同样进行替换</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pTLSThreadCache == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*pTLSThreadCache = new ThreadCache;*/</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;ThreadCache&gt; tcPool;</span><br><span class="line">pTLSThreadCache = tcPool.<span class="built_in">New</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放-2">释放</h2><blockquote><p>对应的delete也要替换成定长内存池的Delete</p></blockquote><h1>释放内存优化为不传对象大小</h1><blockquote><p>我们用free时，只需要传入一个指针即可，但是我们目前的内存池释放内存，不仅要传入指针，还需要传入待释放内存的大小，我们也需要优化为不传入对象的大小</p></blockquote><p>我们可以在span对象中增加成员：ObjSize 用来记录span中每个对象的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> _ObjSize = <span class="number">0</span>; <span class="comment">// 切好的小对象的大小</span></span><br></pre></td></tr></table></figure><p>那我们的释放内存的函数就可以改为下边的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConcurrentFree</span><span class="params">(<span class="type">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">MapObjectToSpan</span>(ptr);</span><br><span class="line"><span class="type">size_t</span> size = span-&gt;_ObjSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseSpanToPageCache</span>(span);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(pTLSThreadCache);</span><br><span class="line">pTLSThreadCache-&gt;<span class="built_in">Deallocate</span>(ptr, size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在的问题就变成了，ObjSize的记录问题了，我们整个内存池中的span对象都是从Page cache层出来的，所以在调用NewSpan的时候，要将切分的对象的大小记录下来，我们申请小于256kb的对象时，都走的thread cache-&gt;central cache-&gt;page cache，另一种情况是大于256kb直接找page cache，这两个地方都需要记录ObjSize</p></blockquote><p>1、在Central层调用NewSpan后，使得span-&gt;ObjSize=size</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们要计算向page cache层要多少页的span</span></span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(SizeClass::<span class="built_in">NumMovePage</span>(size));</span><br><span class="line">span-&gt;_ObjSize = size;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、CurrentAlloc中，申请大于256KB的对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(alignSize);</span><br><span class="line">span-&gt;_ObjSize = alignSize;</span><br></pre></td></tr></table></figure><h1>STL线程安全问题</h1><blockquote><p>我们通过unordered_map，建立了PAGE_ID和Span* 的联系，PageCache层，有读写操作，但是我们在使用PageCache的NewSpan函数时，都会加锁，但是CentralCache层和ConcurrentFree函数中会有读操作，而且并未加锁，这样，可能有线程正在改，就有线程读取，会有线程安全的问题</p></blockquote><p>我们在MapObjectToSpan函数中加锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象到span的映射</span></span><br><span class="line"><span class="function">Span* <span class="title">PageCache::MapObjectToSpan</span><span class="params">(<span class="type">void</span>* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PAGE_ID id = ((PAGE_ID)obj &gt;&gt; PAGE_SHITF);</span><br><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(_pageMtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (_idSpanMap.<span class="built_in">find</span>(id) != _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _idSpanMap[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7、高并发内存池-释放内存</title>
      <link href="/posts/3511365265/"/>
      <url>/posts/3511365265/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面几个章节，详细说明了thread cache、central cache、page cache层的结构以及申请内存的逻辑。本节就是讲述回收内存的过程，大致分为下边几步：</p></blockquote><ul><li>thread cache挂的自由链表过长，将内存释放回central cache</li><li>central cache管理的span的内存块全部回来后，将span释放回page cache</li><li>page cache合并前后相邻的空闲页</li></ul><h1>ThreadCache层回收内存</h1><blockquote><p>当线程释放内存块时，直接将内存块挂到相应的ThreadCache的自由链表，当自由链表的长度达到thread cache层向central cache层申请内存的一个批量的大小我们就进行释放，也就是到MaxSize（慢增长记录）</p></blockquote><pre><code>这里注意，我们增加了FreeList成员_size，并提供了返回它大小的函数Size</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadCache::Deallocate</span><span class="params">(<span class="type">void</span>* obj, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(obj);</span><br><span class="line"><span class="built_in">assert</span>(size &lt;= MAX_BYTES);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> index = SizeClass::<span class="built_in">Index</span>(size);</span><br><span class="line">_freeLists[index].<span class="built_in">Push</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果自由链表的长度大于申请一个批量的长度就还给central cache </span></span><br><span class="line"><span class="keyword">if</span> (_freeLists[index].<span class="built_in">Size</span>() &gt;= _freeLists[index].<span class="built_in">MaxSize</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ListTooLong</span>(_freeLists[index], size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>高并发内存池，ConcurrentDealloc释放内存，内部调用thread cache层的Deallocate函数，Deallocate函数内部调用ListTooLong去处理长链表归还给central cache层</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadCache::ListTooLong</span><span class="params">(FreeList&amp; list, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* start = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="type">void</span>* end = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先将MaxSize长度的内存，从thread cache层释放出来</span></span><br><span class="line">list.<span class="built_in">PopRange</span>(start, end, list.<span class="built_in">MaxSize</span>());</span><br><span class="line"></span><br><span class="line">CentralCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseListToSpans</span>(start, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们需要先调用PopRange释放挂在自由链表MaxSize长度（这个之前未实现），然后调用CentralCache层ReleaseListToSpans，来回收这段内存，接下来的工作交给CentralCache层进行处理</p><h1>CentralCache层回收内存</h1><blockquote><p>thread cache层归还回了一段内存，这里就会有一个问题，我们直到Central Cache层的哈希桶结构和映射规则与thread cache层相同，但是central cache层挂的是一个个的span对象，那么这一段内存，应该归还给某个桶的哪个span对象呢？</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302131526327.png" alt="image.png"></p><p>在page cache中，申请内存都是按页申请，那么这一页内存到下一页的任何一个地址，右移PAGE_SHIFT位都是这页内存的页号。比如下图的例子，我们就以通过地址来算这块内存应该在那一页，然后去找到对应的span，但是现在我们没办法找到</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302132255489.png" alt="image.png"></p><blockquote><p>为了能通过页号，找到对应span的地址，我们可以建立一个哈希表，映射关系为page_id号和对应span的指针，我们在PageCache类中增加一个哈希表，PageCache层也会用到</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::unordered_map&lt;PAGE_ID, Span*&gt; _idSpanMap;</span><br></pre></td></tr></table></figure><p>这时候就需要记录页号和span* 的对应关系，PageCache的NewSpan函数，返回一个span，我们需要在这个函数里增加相关代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储nSpan的首尾页跟nSpan建立映射，方便page cache回收内存</span></span><br><span class="line"></span><br><span class="line">_idSpanMap[nSpan-&gt;_pageId] = nSpan;</span><br><span class="line">_idSpanMap[nSpan-&gt;_pageId + nSpan-&gt;_n - <span class="number">1</span>] = nSpan;  <span class="comment">//原理如下图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的kSpan，也要建立id和span的映射，方便central cache回收小块内存时，查找对应的span</span></span><br><span class="line"><span class="comment">// 给central层返回的span，会被切分成小块内存，归还的时候地址换成页号就可能是其中的某一页</span></span><br><span class="line"><span class="keyword">for</span> (PAGE_ID i = <span class="number">0</span>; i &lt; kSpan-&gt;_n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">_idSpanMap[kSpan-&gt;_pageId + i] = kSpan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302132221620.png" alt="image.png"></p><blockquote><p>记录完映射关系之后，可以继续在封装一个函数，功能就是给我一个地址，我就返回它应该所在的span的地址</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象到span的映射</span></span><br><span class="line"><span class="function">Span* <span class="title">PageCache::MapObjectToSpan</span><span class="params">(<span class="type">void</span>* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PAGE_ID id = ((PAGE_ID)obj &gt;&gt; PAGE_SHITF);</span><br><span class="line"><span class="keyword">if</span> (_idSpanMap.<span class="built_in">find</span>(id) != _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _idSpanMap[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上边前置工作做完之后，可以写ReleaseListToSpans函数了，大致分为以下几点：</p></blockquote><ol><li>通过起始地址，不断向后走，找到对应的span，然后头插进span的自由链表</li><li>让对应的span的_useCount，当减到0说明，这个span的所有内存块都回来了，该span可以被回收</li><li>从spanlist中将对应的span删除掉，然后让pagecache回收</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CentralCache::ReleaseListToSpans</span><span class="params">(<span class="type">void</span>* start, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> index = SizeClass::<span class="built_in">Index</span>(size);</span><br><span class="line"></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题：换回来的内存挂到哪个span上？</span></span><br><span class="line"><span class="comment">// 通过地址 start&gt;&gt;PAGE_SHIFT，就是span的页号，为了方便，我们可以建立页号和span指针的映射</span></span><br><span class="line"><span class="comment">// 这里可以通过哈希表做- unordered_map&lt;PAGE_ID, Span*&gt; </span></span><br><span class="line"><span class="keyword">while</span> (start)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* next = <span class="built_in">NextObj</span>(start);</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">MapObjectToSpan</span>(start);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插进span的管理的链表</span></span><br><span class="line"><span class="built_in">NextObj</span>(start) = span-&gt;_freeList;</span><br><span class="line">span-&gt;_freeList = start;</span><br><span class="line"></span><br><span class="line">span-&gt;_useCount--;</span><br><span class="line"></span><br><span class="line"><span class="comment">// span切分回去的小块内存都回来了</span></span><br><span class="line"><span class="comment">// 将这个span 回收给page cache</span></span><br><span class="line"><span class="keyword">if</span> (span-&gt;_useCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">_spanLists[index].<span class="built_in">Erase</span>(span);</span><br><span class="line">span-&gt;_next = <span class="literal">nullptr</span>;</span><br><span class="line">span-&gt;_next = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// span管理内存，通过页号和页数就可以</span></span><br><span class="line">span-&gt;_freeList = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseSpanToPageCache</span>(span);</span><br><span class="line"></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">lock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start = next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>PageCache层回收内存</h1><blockquote><p>page cache就回收span，并且合并相邻的span，可以向前合并也可以向后合并，但是合并有个问题：只能合并没有用的span，如果有的span正在被用就不能合并，大致步骤如下：</p></blockquote><p>首先判断span是否被使用？我们在Span类中增加成员，判断该span对象有没有被使用，默认是没有被使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _isUse = <span class="literal">false</span>; <span class="comment">//是否被使用</span></span><br></pre></td></tr></table></figure><p>在Central Cache层中我们向PageCache申请新的span，这时需要将isUse改成true，标识这个span被用了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们要计算向page cache层要多少页的span</span></span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(SizeClass::<span class="built_in">NumMovePage</span>(size));</span><br><span class="line">span-&gt;_isUse = <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是向前向后合并span，需要注意：</p><ul><li>当合并到头了就不再合并了</li><li>前后的页有被使用的也不合并</li><li>合并的长度已经超过128也不再进行合并</li></ul><blockquote><p>向前合并逻辑</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302140054029.png" alt="image.png"></p><blockquote><p>向后合并逻辑</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302140100674.png" alt="image.png"></p><blockquote><p>整体代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放空闲span回到PageCache，并合并相邻的span</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageCache::ReleaseSpanToPageCache</span><span class="params">(Span* span)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 合并相邻的span，向前合并，有问题：前面的span如果被用就不能进行合并</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID prevId = span-&gt;_pageId - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(prevId);</span><br><span class="line"><span class="comment">//前边的页号没有了就不和并了</span></span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前边相邻页在使用，不合并</span></span><br><span class="line">Span* prevSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入合并的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//span-&gt;_pageId -= prevSpan-&gt;_n;</span></span><br><span class="line">span-&gt;_pageId = prevSpan-&gt;_pageId;</span><br><span class="line">span-&gt;_n += prevSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[prevSpan-&gt;_n].<span class="built_in">Erase</span>(prevSpan);</span><br><span class="line"><span class="keyword">delete</span> prevSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID nextID = span-&gt;_pageId + span-&gt;_n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(nextID);</span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Span* nextSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span-&gt;_n += nextSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[nextSpan-&gt;_n].<span class="built_in">Erase</span>(nextSpan);</span><br><span class="line"><span class="keyword">delete</span> nextSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_spanLists[span-&gt;_n].<span class="built_in">PushFront</span>(span);</span><br><span class="line">span-&gt;_isUse = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">_idSpanMap[span-&gt;_pageId] = span;</span><br><span class="line">_idSpanMap[span-&gt;_pageId + span-&gt;_n - <span class="number">1</span>] = span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obsidian纯粹版插件推荐</title>
      <link href="/posts/3017994336/"/>
      <url>/posts/3017994336/</url>
      
        <content type="html"><![CDATA[<p>只是单纯的记笔记而不是想要all in one，建议别看太多教程，否则你折腾这个软件的功夫很有可能大于你记笔记的功夫（无聊玩随意），如果想要单纯的获得纯粹点的markdown记笔记往下看。</p><hr><h2 id="一、主题篇">一、主题篇</h2><blockquote><p>适当折腾</p></blockquote><p>建议直接默认即可，默认风格和github README、各种博客平台，无太多美化的个人博客风格差不多，分享时不会差太大。</p><h2 id="二、插件篇">二、插件篇</h2><blockquote><p>少折腾，这里推荐5个，能够带来最单纯简单的使用markdown的体验，大家谨记折腾软件的功夫一定不要大于记笔记的功夫</p></blockquote><h3 id="插件1、Recent-Files">插件1、Recent Files</h3><blockquote><p>这个插件很实用，能看最近打开的文章</p></blockquote><p><img src="https://picx.zhimg.com/80/v2-2a43b3c2f87a0b4e2a0218a404be60e7_1440w.png" alt=""></p><h3 id="插件2、File-Explorer-Note-Count">插件2、File Explorer Note Count</h3><blockquote><p>能显示文件夹下边有几个文件</p></blockquote><p><img src="https://picx.zhimg.com/80/v2-c1070e27a0147824c27ff31952d04a79_1440w.png" alt=""></p><p>​</p><h3 id="插件3、Editing-Toolbar">插件3、Editing Toolbar</h3><blockquote><p>非常实用，将常见的markdown功能，集成为一个小工具条，类似word的上边工具栏</p></blockquote><p><img src="https://picx.zhimg.com/80/v2-6e1c7066841550a84593ef45432964f3_1440w.png" alt=""></p><p>​</p><h3 id="插件4、Advanced-Tables">插件4、Advanced Tables</h3><blockquote><p>obsidian的markdown表格比较难打，这个是增强输入表格功能的插件，只要输入一个 | 加内容然后配合回车和tab键，就可以很方便的搞出来表格，当然它也带了工具栏</p></blockquote><p><img src="https://pic1.zhimg.com/80/v2-46d5ca49fae211260e450719d7bf198f_1440w.png" alt=""></p><p>​</p><h3 id="插件5、Image-Auto-Upload-Plugin">插件5、Image Auto Upload Plugin</h3><blockquote><p>使用markdown图床肯定很重要，我们肯定期望复制图片到笔记软件，图片就能自动上传到图床，然后笔记软件里面有链接，很幸运的是obsidian里面有这个插件，和PicGo配合就可以做到啦，非常方便</p></blockquote><p><img src="https://picx.zhimg.com/80/v2-b6b604e116dc13364e87b1164c0ef1b0_1440w.png" alt=""></p><p>​</p><p><a href="https://post.smzdm.com/p/az6mokvo/">Obsidian和picgo图片自动上传图床教程</a></p><h2 id="三、总结">三、总结</h2><p>切记，记笔记才是正道，别入了折腾软件的坑，然后如果嫌弃obsidian下载插件的网络问题，可以关注我的公众号【孙菜菜】回复 【obsidian】可以获得上边的五个插件。</p><p><img src="https://pica.zhimg.com/80/v2-46fe8b8c98beb6661c01f6443788299b_1440w.png" alt=""></p><p>这几个文件直接拷贝到 你的仓库路径下 \ .obsidian \ plugins里面即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> obsidian </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、高并发内存池-PageCache</title>
      <link href="/posts/2890609329/"/>
      <url>/posts/2890609329/</url>
      
        <content type="html"><![CDATA[<h1>框架结构</h1><blockquote><p>central cache对应的桶里如果没有span对象，需要向page cache层申请一个非空的span，page cache也是哈希桶的结构，同样通过双向链表组织一个个的span对象，但是映射规则和thread cache和central cache层不同，page cache的逻辑抽象结构如下：</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302101543881.png" alt="33250a692c214c8286b38ba3c6c96847.png"></p><pre><code>page cache采用直接定址法，几号桶就是挂的几页的span，pageche的span对象是按页为单位，并没有切分成小对象，central cache会申请固定页数的span，然后进行切分</code></pre><h1>具体实现</h1><h2 id="page-cahe-类">page cahe 类</h2><blockquote><p>page cache 这里设计span最多有128页（128 * 8 * 1024 = 1m），也可以有设计成其他大小，我们设计的thread cahche层最大申请256kb的对象，128页能切成4个，然后我们让几号桶对应几页的span，为了方便整个page cache类设计为129个桶，空出来0号桶</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// page cache桶的个数 - 这里设置为129个，0号桶不用</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">size_t</span> NPAGES = <span class="number">129</span>;</span><br></pre></td></tr></table></figure><blockquote><p>page cahce类在整个进程里只有一个，我们同样设计成单例模式，这里需要注意的是，多个线程申请对象，thread cache层没有内存需要向central cache申请，central cache只需要加桶锁就可以，但是page cache最好整个加锁，因为page cache可能涉及到多页的span切分的问题，并且当central cache归还span，page cache也会尝试将该span和其他桶的span进行合并，这样就会访问page cache的多个桶，造成频繁的加锁和解锁。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PageCache</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//整个进程只有一份，同样设计成单例模式</span></span><br><span class="line"><span class="function"><span class="type">static</span> PageCache* <span class="title">GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;_sInst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要一个k页的span</span></span><br><span class="line"><span class="function">Span* <span class="title">NewSpan</span><span class="params">(<span class="type">size_t</span> k)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::mutex _pageMtx;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">PageCache</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">PageCache</span>(<span class="type">const</span> PageCache&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">SpanList _spanLists[NPAGES];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PageCache _sInst;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>类内提供一个获取k页span的接口</p></blockquote><h2 id="实现逻辑">实现逻辑</h2><blockquote><p>我们先继续完善central层的逻辑，上节说从中心缓存获取一定数量的对象给thread cache，用了一个FatchRangeObj的函数，这个函数的内部，首先要保证CentralCache层有一个非空的span，那么如何保证有一个非空的span呢？大致思路是先从central cache对应的桶里找，如果没有就往下找Page Cache层要。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个非空的span</span></span><br><span class="line"><span class="function">Span* <span class="title">CentralCache::GetOneSpan</span><span class="params">(SpanList&amp; list, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>我们继续完善这个函数</code></pre><blockquote><p>步骤1、先去size 对应的桶里找非空的span，这里涉及到链表的遍历操作，我们可以完善一下SpanList类，提供相应的接口方便我们操作</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在spanlist类中增加一下函数，方便遍历操作</span></span><br><span class="line"><span class="function">Span* <span class="title">Begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _head-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Span* <span class="title">End</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _head == _head-&gt;_next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>步骤2、若有非空的span直接返回，如果没有，需要向下一层的PageCache申请新的一页Span，这里我们涉及到加锁、解锁过程，以及如果向下一层申请SPan具体是要多个少页呢？</p></blockquote><pre><code>我们可以先解决要多少页的问题，在SizeClass类中增加NumMovePage函数</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算一次向系统获取多少个页</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">size_t</span> <span class="title">NumMovePage</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 先获取申请size对象大小的上限(尽可能多要一些)</span></span><br><span class="line"><span class="type">size_t</span> num = <span class="built_in">NumMoveSize</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算一下num个对象总共多少字节，然后右移13位就是多少页</span></span><br><span class="line"><span class="type">size_t</span> npage = (num * size) &gt;&gt; PAGE_SHITF;</span><br><span class="line"><span class="comment">// 最少申请1页</span></span><br><span class="line"><span class="keyword">if</span> (npage == <span class="number">0</span>)</span><br><span class="line">npage = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> npage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>步骤3、申请完span后，就要将里面的大块内存进行切分，我们需要直到大块内存的起始地址和结束地址，不断的切成size大小进行尾插，这里尾插有个好处，它的物理地址是连续的，当被线程使用时，可以提高线程的CPU缓存利用率</p></blockquote><blockquote><p>GetOneSpan整体代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取一个非空的span</span></span><br><span class="line"><span class="function">Span* <span class="title">CentralCache::GetOneSpan</span><span class="params">(SpanList&amp; list, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 1、先去size 对应的桶里找非空的span</span></span><br><span class="line">Span* it = list.<span class="built_in">Begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != list.<span class="built_in">End</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (it-&gt;_freeList != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">it = it-&gt;_next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以先将这个桶的桶锁进行解锁，其他线程可以释放内存对象回来不会阻塞</span></span><br><span class="line">list._mtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到这里说明，size对应的CentralCache层里面没有Span对象，那么需要向下一层申请</span></span><br><span class="line"><span class="comment">// 先进行整个page cache层的加锁</span></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们要计算向page cache层要多少页的span</span></span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(SizeClass::<span class="built_in">NumMovePage</span>(size));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请回来的span对象进行切分，这会不需要加锁，因为这会其他线程访问不到这个span（还没挂到spanLists）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要计算span的大块内存的起始地址和大块内存的大小</span></span><br><span class="line"><span class="comment">// 页号左移PAGE_SHIFT就是地址</span></span><br><span class="line"><span class="type">char</span>* start = (<span class="type">char</span>*)(span-&gt;_pageId &lt;&lt; PAGE_SHITF);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> bytes = span-&gt;_n &lt;&lt; PAGE_SHITF;</span><br><span class="line"><span class="type">char</span>* end = start + bytes;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先切一块做头</span></span><br><span class="line">span-&gt;_freeList = start;</span><br><span class="line">start += size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行尾插</span></span><br><span class="line"><span class="type">void</span>* tail = span-&gt;_freeList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start &lt;end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NextObj</span>(tail) = start;</span><br><span class="line">tail = <span class="built_in">NextObj</span>(tail);</span><br><span class="line">start += size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切好span，将span挂到桶里，加锁</span></span><br><span class="line">list._mtx.<span class="built_in">lock</span>();</span><br><span class="line">list.<span class="built_in">PushFront</span>(span);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完成上边的代码后我们看看底层的PageCache::NewSpan(size_t k) ，我们这个获取一个NewSpan的大致逻辑为：首先检查第k个桶里有没有span，如果没有，向后边的桶找更大的Span，然后分成k和n-k，返回k页的Span，n-k页的Span挂到相应的桶里</p></blockquote><hr><blockquote><p>步骤1、判断k个桶有没有span如果有，返回头上那个，这时候需要在在SpanList类里面提供一个PopFront函数，同时我们也提供一个PushFront的函数，方便之后的操作</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头删返回</span></span><br><span class="line"><span class="function">Span* <span class="title">PopFront</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Span* sp = _head-&gt;_next;</span><br><span class="line"><span class="comment">/*head-&gt;_next = sp-&gt;_next;</span></span><br><span class="line"><span class="comment">sp-&gt;_next = nullptr;</span></span><br><span class="line"><span class="comment">return sp;*/</span></span><br><span class="line"><span class="built_in">Erase</span>(sp);</span><br><span class="line"><span class="keyword">return</span> sp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushFront</span><span class="params">(Span* span)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Insert</span>(<span class="built_in">Begin</span>(), span);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>步骤2、如果没有，遍历后面的桶，如果有，就切成k和n-k，返回k页的span，n-k页的span插入到对应的桶</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302102055998.png" alt="image.png"></p><blockquote><p>步骤3、如果从k+1到NPAGES-1桶都没有span，那么只能通过系统调用向堆申请，这里直接申请128页的span，申请成功后，还是走步骤2的逻辑，可以直接递归处理</p></blockquote><blockquote><p>整体代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page cache 返回一个span</span></span><br><span class="line"><span class="function">Span* <span class="title">PageCache::NewSpan</span><span class="params">(<span class="type">size_t</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 先断言一下</span></span><br><span class="line"><span class="built_in">assert</span>(k &gt; <span class="number">0</span> &amp;&amp; k &lt; NPAGES);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先检查第k个桶里有没有Span</span></span><br><span class="line"><span class="keyword">if</span> (!_spanLists[k].<span class="built_in">Empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 头删第一个返回这里去实现PopFront的逻辑</span></span><br><span class="line"><span class="keyword">return</span> _spanLists[k].<span class="built_in">PopFront</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果k号桶为空，检查后面的桶，找到一个非空桶，直到最后一个桶</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = k + <span class="number">1</span>; i &lt; NPAGES; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!_spanLists[i].<span class="built_in">Empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Span* nSpan = _spanLists[i].<span class="built_in">PopFront</span>();</span><br><span class="line"><span class="comment">// ？</span></span><br><span class="line">Span* kSpan = <span class="keyword">new</span> Span;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分成npan 分一个 k页返回，然后n-k页的span挂到n-k的桶上</span></span><br><span class="line"><span class="comment">// 这里注意，只需要改页号和页数就可以了，span挂的内存的地址按页号取</span></span><br><span class="line">kSpan-&gt;_pageId = nSpan-&gt;_pageId;</span><br><span class="line">kSpan-&gt;_n = k;</span><br><span class="line"></span><br><span class="line">nSpan-&gt;_n -= k;</span><br><span class="line">nSpan-&gt;_pageId += k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_spanLists[nSpan-&gt;_n].<span class="built_in">PushFront</span>(nSpan);</span><br><span class="line"><span class="keyword">return</span> kSpan;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到这里说明后面的所有位置都没有大页的span</span></span><br><span class="line"><span class="comment">// 这时候就需要向堆申请一个128页的span</span></span><br><span class="line">Span* bigSpan = <span class="keyword">new</span> Span;</span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">SystemAlloc</span>(NPAGES<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bigSpan-&gt;_n = NPAGES - <span class="number">1</span>;</span><br><span class="line">bigSpan-&gt;_pageId = (PAGE_ID)ptr &gt;&gt; PAGE_SHITF;</span><br><span class="line"></span><br><span class="line">_spanLists[bigSpan-&gt;_n].<span class="built_in">PushFront</span>(bigSpan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">NewSpan</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里注意最后几句的逻辑，我们申请了128页的内存，返回了起始的指针ptr，将这个地址转成整形，右移PAGE_SHIFT位，相当于除以2^13，就是管理这块大块内存的span的页号</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302102010347.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、高并发内存池-CentralCache</title>
      <link href="/posts/1806624746/"/>
      <url>/posts/1806624746/</url>
      
        <content type="html"><![CDATA[<h1>Central Cache框架设计</h1><blockquote><p>当申请对象时，thread cache层对应的自由链表为空时，需要向central cache层申请内存。central cache层框架图如下：</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302081948813.png" alt="9d6481a02fe24f458b37909674fc3d66.png"></p><p>central cache整体也是一个哈希桶结构，类似于thread cache层，但是central cache层所挂的是span的链表</p><ul><li>span是管理大块内存的数据结构，页为单位</li><li>span里面有个自由链表，管理切割出来的小内存块</li><li>映射关系和对齐规则同thread cache</li></ul><h1>Central Cache具体结构</h1><h2 id="span结构">span结构</h2><blockquote><p>span是管理多个连续页大块内存的跨度结构，具体结构代码如下；</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Span</span></span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID _pageId = <span class="number">0</span>; <span class="comment">//大块内存起始页的页号</span></span><br><span class="line"><span class="type">size_t</span> _n = <span class="number">0</span>; <span class="comment">//页的数量</span></span><br><span class="line"></span><br><span class="line">Span* _next = <span class="literal">nullptr</span>; <span class="comment">//双向链表的结构</span></span><br><span class="line">Span* _prev = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> _useCount = <span class="number">0</span>; <span class="comment">//切好的小块内存，被分配给thread cache的计数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* _freeList =<span class="literal">nullptr</span>; <span class="comment">//切好小块内存的自由链表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先需要注意的是，span是双向链表的结构，双向链表删除元素非常方便，当将某个span对象归还给page cache层时，双向链表删除非常简单</p><blockquote><p>span是管理以页为单位的大块内存，当归还给page cache层时，为了方便相邻页的合并需要一个页号 pageID，我们用了typedef的类型PAGE_ID</p></blockquote><pre><code>假设一页为8k32位下 进程地址空间有4G，能分 2^32/2^13 = 2^19 个页64位下 进程地址空间有16G，能分 2^64/2^13 = 2^51 个页</code></pre><p>所以不同平台下，PAGE_ID 的类型需要动态调整，这里我们用条件编译实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x64  _WIN32和_WIN64都有定义</span></span><br><span class="line"><span class="comment">//win32 _WIN32有定义，_WIN64没有定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> PAGE_ID;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _WIN32</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">size_t</span> PAGE_ID;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN64</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这里注意先判断 _WIN64</p></blockquote><h2 id="SpanList结构">SpanList结构</h2><blockquote><p>我们知道central cache层每个哈希桶中挂的是span的链表，我们将这个链表结构定义成带头双向的循环链表</p></blockquote><p>我们目前的核心成员有两个</p><ul><li>Span*</li><li>mutex锁（桶锁，多个线程同时申请一个桶的对象时需要加锁）</li></ul><p>提供，插入和删除和删除的接口</p><ul><li><code>void Insert(Span* pos, Span* newSpan)</code></li><li><code>void Eerase(Span *pos)</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpanList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SpanList</span>()</span><br><span class="line">&#123;</span><br><span class="line">_head = <span class="keyword">new</span> Span;</span><br><span class="line">_head-&gt;_next = _head;</span><br><span class="line">_head-&gt;_prev = _head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(Span* pos, Span* newSpan)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 先断言一下有没有问题</span></span><br><span class="line"><span class="built_in">assert</span>(pos);</span><br><span class="line"><span class="built_in">assert</span>(newSpan);</span><br><span class="line"></span><br><span class="line">Span* prev = pos-&gt;_prev;</span><br><span class="line">newSpan-&gt;_next = pos;</span><br><span class="line">pos-&gt;_prev = newSpan;</span><br><span class="line"></span><br><span class="line">prev-&gt;_next = newSpan;</span><br><span class="line">newSpan-&gt;_prev = prev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Eerase</span><span class="params">(Span *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(pos);</span><br><span class="line"><span class="built_in">assert</span>(pos != _head);</span><br><span class="line"></span><br><span class="line">Span* prev = pos-&gt;_prev;</span><br><span class="line">Span* next = pos-&gt;_next;</span><br><span class="line"></span><br><span class="line">next-&gt;_prev = prev;</span><br><span class="line">prev-&gt;_next = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Span* _head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::mutex _mtx; <span class="comment">//桶锁</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意，erase时，不需要delete，只需要从链表移除即可，会归还给下一层的page cache</p></blockquote><h2 id="Central-Cache结构">Central Cache结构</h2><blockquote><p>首先Central Cache是哈希桶结构，然后我们期望，每个线程都有属于自己的Thread Cache（用TLS实现无锁），但是Central Cache在整个进程中只有一个，所以我们可以设计成单例模式</p></blockquote><pre><code>单例模式采用饿汉模式，构造函数私有，在静态区创建一个对象</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CentralCache</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> CentralCache* <span class="title">GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;_sInst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口？？？</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> CentralCache _sInst;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">CentralCache</span>()&#123;&#125; <span class="comment">//构造函数私有化</span></span><br><span class="line"><span class="built_in">CentralCache</span>(<span class="type">const</span> CentralCache&amp; c) = <span class="keyword">delete</span>; <span class="comment">//禁用拷贝</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">SpanList _spanLists[NFREELIST]; <span class="comment">// SpanList数组（哈希桶）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>Central Cache逻辑实现</h1><blockquote><p>thread cache层，申请对象，对应自由链表为空时，需要向central cache层申请内存，我们在thread cache部分提供了一个接口FetchFromCentralCache，我们先从这里开始，逐步扩展到整体的central cache的逻辑实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从中心缓存获取对象</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ThreadCache::FetchFromCentralCache</span><span class="params">(<span class="type">size_t</span> index, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>thread cache向central申请内存时，最好多给一些，避免频繁申请，那么该给多少比较合适呢？这里提出一个慢开始反馈算法，我们核心想法如下：</p></blockquote><ol><li>最开始不会一次向central cache一次批量的要太多，要太多可能会用不完</li><li>如果不断有要size大小内存的的需求，batchNum也会不断的增长直到上限</li><li>size越大，一次向central cache要的batchNum越小</li><li>size越小，一次向central cache要的batchNum越大。</li></ol><blockquote><p>根据上述规则，我们在SizeClass类增加下述函数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次thread cache从中心节点获取多少个</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">size_t</span> <span class="title">NumMoveSize</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(size &gt; <span class="number">0</span>);</span><br><span class="line"><span class="type">size_t</span> num = MAX_BYTES / size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次批量移动多少个对象的(慢启动)上限值为[2,512]</span></span><br><span class="line"><span class="comment">// 小对象一次批量上限高</span></span><br><span class="line"><span class="comment">// 大对象一次批量上限低</span></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">2</span>)</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">512</span>)</span><br><span class="line">num = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们就可以在FetchFromCentralCache函数中调用上面函数获取应该给central cache批量层要多少个对象的个数</p></blockquote> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> batchNum = SizeClass::<span class="built_in">NumMoveSize</span>(size);</span><br></pre></td></tr></table></figure><p>但是若size比较小，batchNum刚开始的时候还是比较大，怎么让小对象它开始的时候也没那么大，满足规则2呢？</p><p>我们可以这样处理，在FreeList结构中，增加一个成员 _ maxSize，并初始化为1，这样thread cache层每一个桶的自由链表都有它的maxSize。并可以写下边的逻辑。</p><pre><code>当batchNum和当前所在自由链表的MaxSize相同时，说明上边MaxSize是较小的那个，我们让MaxSize加1，若不断申请size大小的对象，MaxSize就会不断增大，而【2，512】就可以做这个增加的上限</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> batchNum = std::<span class="built_in">min</span>(SizeClass::<span class="built_in">NumMoveSize</span>(size),_freeLists[index].<span class="built_in">MaxSize</span>());</span><br><span class="line"><span class="keyword">if</span> (_freeLists[index].<span class="built_in">MaxSize</span>() == batchNum)</span><br><span class="line">&#123;</span><br><span class="line">_freeLists[index].<span class="built_in">MaxSize</span>() += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>知道要多少个对象后就向central cache层要batchNum个对象，但是这里就会出现一些问题，central cache层可能不够batchNum个对象，我们看下边处理</p></blockquote><pre><code>首先是给CentralCache类提供两个接口。一个是获取非空的Span，另一个就是获取batchNum个对象</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从中心缓存获取一定数量的对象给thread cache</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">CentralCache::FetchRangeObj</span><span class="params">(<span class="type">void</span>*&amp; start, <span class="type">void</span>*&amp; end, <span class="type">size_t</span> batchNum, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 先算size大小的对象，对应哪个桶，然后就去哪个桶去申请</span></span><br><span class="line"><span class="type">size_t</span> index = SizeClass::<span class="built_in">Index</span>(size);</span><br><span class="line"><span class="comment">// 申请-加桶锁</span></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先保证有一个非空的Span</span></span><br><span class="line">Span* span = <span class="built_in">GetOneSpan</span>(_spanLists[index], size);</span><br><span class="line"><span class="built_in">assert</span>(span);</span><br><span class="line"><span class="built_in">assert</span>(span-&gt;_freeList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从span中获取batchNum个对象</span></span><br><span class="line"><span class="comment">// 如果不够batchNum，有几个拿几个，返回实际拿到的个数</span></span><br><span class="line"></span><br><span class="line">start = span-&gt;_freeList;</span><br><span class="line">end = start;</span><br><span class="line"><span class="type">int</span> actualNum = <span class="number">1</span>;</span><br><span class="line"><span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;batchNum &amp;&amp; <span class="built_in">NextObj</span>(end) != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">end = <span class="built_in">NextObj</span>(end);</span><br><span class="line">++i;</span><br><span class="line">++actualNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拿走 actualNum个对象</span></span><br><span class="line">span-&gt;_freeList = <span class="built_in">NextObj</span>(end);</span><br><span class="line"><span class="built_in">NextObj</span>(end) = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">_spanLists[index]._mtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> actualNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完善完成上述内容后，我们回到最开始，thread cache向central cache申请内存</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从中心缓存获取对象</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ThreadCache::FetchFromCentralCache</span><span class="params">(<span class="type">size_t</span> index, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 慢开始反馈调节算法</span></span><br><span class="line"><span class="comment">// 先算要多少个size大小的对象</span></span><br><span class="line"><span class="type">size_t</span> batchNum = std::<span class="built_in">min</span>(SizeClass::<span class="built_in">NumMoveSize</span>(size),_freeLists[index].<span class="built_in">MaxSize</span>());</span><br><span class="line"><span class="keyword">if</span> (_freeLists[index].<span class="built_in">MaxSize</span>() == batchNum)</span><br><span class="line">&#123;</span><br><span class="line">_freeLists[index].<span class="built_in">MaxSize</span>() += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 知道要多少个对象后就向central cache层要batchNum个对象</span></span><br><span class="line"><span class="type">void</span>* start;</span><br><span class="line"><span class="type">void</span>* end;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> actualNum = CentralCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">FetchRangeObj</span>(start, end, batchNum, size);</span><br><span class="line"><span class="built_in">assert</span>(actualNum &gt;= <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (actualNum == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只有一个</span></span><br><span class="line"><span class="built_in">assert</span>(start == end);</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将NextObj(start)-end 头插进自由链表，返回start</span></span><br><span class="line">_freeLists[index].<span class="built_in">PushRange</span>(<span class="built_in">NextObj</span>(start), end);</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Damus下载</title>
      <link href="/posts/1935618777/"/>
      <url>/posts/1935618777/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Damus是一款建立在去中心化网络Nostr（支持加密的端到端私人消息传递等功能）上的应用软件，其中Nostr并不是基于服务器来运行网络，相反，它是利用去中心化中继器来分发消息。中继器（Relay）是托管的服务器，所有人都可以运行中继器。获得其他用户，比如你好友的更新，需要研究询问多个中继站是否了解其他人的情况；而中继站所做的，就是接受人们的帖子并将其转发给其他人。</p></blockquote><h2 id="下载地址">下载地址</h2><ul><li><p><a href="https://apps.apple.com/ca/app/damus/id1628663131">苹果下载链接Damus</a></p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.vitorpamplona.amethyst&amp;hl=en%E2%80%A6">安卓下载链接Amethyst</a></p></li><li><p><a href="https://snort.social">网页版</a></p></li></ul><blockquote><p>注意不要把你的私钥当做公钥发出来。</p></blockquote><h2 id="换头像方式：">换头像方式：</h2><ul><li>需要图床图片链接</li><li>回到Damus，edit profile，头像的链接粘贴save即可</li></ul><h2 id="使用体验">使用体验</h2><p>已经使用了两天，登录注册体验很不错，不需要提供任何的个人信息，（手机号、邮箱、推特、Facebook…），直接注册给你公钥和私钥，但是使用起来体验十分的差劲，可能是没有监管的原因，各种各样的广告满天飞，没有监管的去中心化社交不大行感觉</p>]]></content>
      
      
      <categories>
          
          <category> web3.0 </category>
          
          <category> 社交 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、高并发内存池-ThreadCache</title>
      <link href="/posts/1785806469/"/>
      <url>/posts/1785806469/</url>
      
        <content type="html"><![CDATA[<h1>框架设计</h1><blockquote><p>thread cache是哈希桶的结构，每个桶是一个按桶位置映射大小的内存块对象的自由链表，我们知道定长内存池只有一个自由链表，因为它每个内存块对象大小相等，但是我们这个内存池需要支持不同大小的内存块，所以需要多个自由链表。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302031953455.png" alt="thread_cache.png"></p><p>具体抽象结构大致如上，每个线程都会有一个thread cache对象，这样每个线程在这里获取对象和释放对象的时候是无锁的。</p><h2 id="申请内存">申请内存</h2><ol><li>当内存申请size&lt;=256kb时，先获取线程本地存储的thread cache对象，计算size映射的哈希桶自由链表的下标i</li><li>如果自由链表的freeLists[i] 中有对象，则直接Pop一个内存对象返回</li><li>如果freeLists[i]中没有对象，则批量从central cache中获取一定数量的对象，插入到自由链表，并返回一个对象</li></ol><h2 id="释放内存">释放内存</h2><ol><li>当释放内存小于256kb时将内存释放回thread cache，计算size映射自由链表桶位置i，将对象Push到freeList[i]</li><li>当链表的长度过长，则回收一部分内存对象到central cache</li></ol><h2 id="内存碎片">内存碎片</h2><blockquote><p>外碎片问题前边已经讲过，这里只说一下内碎片的问题，如果我们将每种字节数都用一个自由链表管理，那么256kb就是256* 1024个自由链表，这样自由链表的数量会太多，这些头指针就会占据大量内存。所以可以采取类似上边抽象图。8字节对齐，16字节…</p></blockquote><p>我们所用对象的大小可能并不是准确的8、16…，有可能是1字节，14字节，但是我们仍然给对应的8字节16字节，那么就会有部分内存浪费，也就是内碎片问题</p><h1>具体实现</h1><h2 id="对齐规则">对齐规则</h2><blockquote><p>我们thread cache，底层是哈希桶，我们希望桶的数量不那么多，同时内碎片的浪费综合起来也不那么多。综合考量，使不同范围内的字节数按照不同的对齐数对齐，如下所示：</p></blockquote><table><thead><tr><th style="text-align:center">字节数</th><th style="text-align:center">对齐数</th><th style="text-align:center">哈希桶下标</th></tr></thead><tbody><tr><td style="text-align:center">1 ~ 128</td><td style="text-align:center">8字节对齐</td><td style="text-align:center">0 - 15</td></tr><tr><td style="text-align:center">128+1 ~ 1024</td><td style="text-align:center">16字节对齐</td><td style="text-align:center">16 - 71</td></tr><tr><td style="text-align:center">1024+1 ~ 8*1024</td><td style="text-align:center">128字节对齐</td><td style="text-align:center">72 - 127</td></tr><tr><td style="text-align:center">8*1024+1 ~ 64*1024</td><td style="text-align:center">1024字节对齐</td><td style="text-align:center">128 - 183</td></tr><tr><td style="text-align:center">64*1024+1 ~ 256*1024</td><td style="text-align:center">8*1024字节对齐</td><td style="text-align:center">184 - 207</td></tr></tbody></table><p>举几个例子：</p><ul><li>1~128字节，都按8字节对齐，也就是1字节的话，会给你8字节，浪费7个字节</li><li>129~1024字节，按16字节对齐，申请129会给129+16-1=144字节，会浪费15字节，比重为：15/144</li><li>1025~8*1024字节，按128字节对齐，申请1025会给1025+128-1=1152字节，浪费127字节，比重为：127/1152</li><li>…</li></ul><blockquote><p>1~128字节区间最多浪费7个字节，后面范围浪费字节的比重大概都在10%左右。</p></blockquote><h2 id="功能实现">功能实现</h2><h3 id="ThreadCache类">ThreadCache类</h3><blockquote><p>我们先定义这个threadcache类，功能有申请内存、释放内存和从中心缓存获取对象</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadCache</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Deallocate</span><span class="params">(<span class="type">void</span>* obj, <span class="type">size_t</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从中心缓存获取对象</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">FetchFromCentralCache</span><span class="params">(<span class="type">size_t</span> index, <span class="type">size_t</span> size)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 管理各种内存大小的自由链表的哈希桶</span></span><br><span class="line">FreeList _freeLists[NFREELIST];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="自由链表类">自由链表类</h3><blockquote><p>我们的是管理自由链表的哈希桶，自由链表有多个，定义一个类实现，功能和实现我们之前的定长内存池一样，成员就是一个void*的指针，提供push、pop和empty接口。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>*&amp; <span class="title">NextObj</span><span class="params">(<span class="type">void</span>* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">void</span>**)obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 管理切分好的小对象的自由链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FreeList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">void</span>* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(obj);</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="built_in">NextObj</span>(obj) = _freeList;</span><br><span class="line">_freeList = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(_freeList); </span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line"><span class="type">void</span>* obj = _freeList;</span><br><span class="line">_freeList = <span class="built_in">NextObj</span>(_freeList);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _freeList == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">void</span>* _freeList = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ThreadCache类实现">ThreadCache类实现</h3><blockquote><p>然后就是 ThreadCache类中成员函数的具体实现，也就是如何申请释放内存</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ThreadCache::Allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(size &lt;= MAX_BYTES); </span><br><span class="line"><span class="comment">// 先算size个字节映射到哪个桶，但是不同的字节范围，映射的规则不同，用一个类管理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadCache::Deallocate</span><span class="params">(<span class="type">void</span>* obj, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从中心缓存获取对象</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ThreadCache::FetchFromCentralCache</span><span class="params">(<span class="type">size_t</span> index, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对齐-计算下标">对齐+计算下标</h3><blockquote><p>但是开始我们就会面临一个问题，我们申请内存，首先是要看哈希桶的自由链表，我们就要知道申请的字节数对应哪个哈希桶的自由链表，这里涉及到对齐和计算哈希桶下标，我们还是用一个类管理</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算对象大小的对齐映射规则</span></span><br><span class="line"><span class="comment">// 1、需要将对应的字节数先向上取整</span></span><br><span class="line"><span class="comment">// 2、取整后的字节数转换到哈希下标</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SizeClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 整体控制在最多10%左右的内碎片浪费</span></span><br><span class="line"><span class="comment">// [1,128]8byte对齐    freelist[0,16)</span></span><br><span class="line"><span class="comment">// [128+1,1024]16byte对齐    freelist[16,72)</span></span><br><span class="line"><span class="comment">// [1024+1,8*1024]128byte对齐    freelist[72,128)</span></span><br><span class="line"><span class="comment">// [8*1024+1,64*1024]1024byte对齐     freelist[128,184)</span></span><br><span class="line"><span class="comment">// [64*1024+1,256*1024]8*1024byte对齐   freelist[184,208)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要将对应的字节数先向上取整</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">RoundUp</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">128</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">8</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">64</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">256</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明出现了不想申请的字节数，直接报错</span></span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算映射的哪一个自由链表桶</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">Index</span><span class="params">(<span class="type">size_t</span> bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(bytes &lt;= MAX_BYTES);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个区间有多少个链</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> group_array[<span class="number">4</span>] = &#123; <span class="number">16</span>, <span class="number">56</span>, <span class="number">56</span>, <span class="number">56</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (bytes &lt;= <span class="number">128</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> _Index(bytes, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes &lt;= <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> _Index(bytes - <span class="number">128</span>, <span class="number">4</span>) + group_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes &lt;= <span class="number">8</span> * <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> _Index(bytes - <span class="number">1024</span>, <span class="number">7</span>) + group_array[<span class="number">1</span>] + group_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes &lt;= <span class="number">64</span> * <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> _Index(bytes - <span class="number">8</span> * <span class="number">1024</span>, <span class="number">10</span>) + group_array[<span class="number">2</span>] + group_array[<span class="number">1</span>] + group_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes &lt;= <span class="number">256</span> * <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> _Index(bytes - <span class="number">64</span> * <span class="number">1024</span>, <span class="number">13</span>) + group_array[<span class="number">3</span>] + group_array[<span class="number">2</span>] + group_array[<span class="number">1</span>] + group_array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="对齐">对齐</h4><blockquote><p>我们用一个子函数实现这个功能</p></blockquote><p>常规写法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> _RoundUp(<span class="type">size_t</span> bytes, <span class="type">size_t</span> alignNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 常规写法</span></span><br><span class="line"><span class="keyword">if</span> (bytes % alignNum == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 9 对齐到16 | 9/8+1=2 2*8=16</span></span><br><span class="line"><span class="comment">// 就是看当前的size占几个对齐数，然后+1 再乘对齐数</span></span><br><span class="line"><span class="built_in">return</span> (bytes / alignNum + <span class="number">1</span>) * alignNum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>牛比写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> _RoundUp(<span class="type">size_t</span> bytes, <span class="type">size_t</span> alignNum)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ((bytes + alignNum - <span class="number">1</span>) &amp; ~(alignNum - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体例子说明：</p><p>字节数为1，应该对齐到8<br>前半部分：1+8-1=8    二进制：0000 1000<br>后半部分：8-1=7        二进制：0000 0111</p><p>8 &amp;~ 7 = 8</p><p>字节数为10，应该对齐到16<br>前半部分：10+8-1=17  二进制：0001 0001<br>后半部分： 8-1=7         二进制：0000 0111</p><p>10 &amp;~7 = 10000 = 16</p><p>8：1000<br>~7：1111 1000<br>别的数和~7相与，后3位会变成0<br>16：10000<br>~15：1111 0000<br>别的数和~15相与，后4位会变成0<br>…</p><blockquote><p>它的原理是让当前的字节数+对齐数-1，这样就大于或等于一个向上对齐的大小，然后与后面一部分相与，去掉多余的部分</p></blockquote><h4 id="计算下标">计算下标</h4><p>1字节，在0号桶<br>10字节，在1号桶<br>…<br>129字节，在16号桶</p><p>···</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> _Index(<span class="type">size_t</span> bytes, <span class="type">size_t</span> align_shift)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ((bytes + (<span class="number">1</span> &lt;&lt; align_shift) - <span class="number">1</span>) &gt;&gt; align_shift) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和上边算对齐数有点像</p></blockquote><p>比如 1字节：</p><ul><li>1+（1&lt;&lt;3) -1 = 8  （部分是当前字节数加了一个对齐数-1，这个数大于等于当前字节所要对齐的那个对齐数）</li><li>8&gt;&gt;3=1 (相当于除以一个对齐数)</li><li>1-1=0</li></ul><p>比如10字节：</p><ul><li>10+(1&lt;&lt;3)-1=17</li><li>17&gt;&gt;3=2</li><li>2-1=1</li></ul><h3 id="ThreadCache类继续">ThreadCache类继续</h3><blockquote><p>完成上边的功能后，我们可以具体写ThreadCache类的实现了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">ThreadCache::Allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(size &lt;= MAX_BYTES); </span><br><span class="line"><span class="comment">// 先算size个字节映射到哪个桶，但是不同的字节范围，映射的规则不同，用一个类管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找到当前字节数的对齐数，以及对应哈希桶的下标</span></span><br><span class="line"><span class="type">size_t</span> alignSize = SizeClass::<span class="built_in">RoundUp</span>(size);</span><br><span class="line"><span class="type">size_t</span> index = SizeClass::<span class="built_in">Index</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果所在自由链表不为空，头删返回头节点</span></span><br><span class="line"><span class="keyword">if</span> (!_freeLists[index].<span class="built_in">Empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _freeLists[index].<span class="built_in">Pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//为空，则去CentralCache层获取</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FetchFromCentralCache</span>(index, alignSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadCache::Deallocate</span><span class="params">(<span class="type">void</span>* obj, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(obj);</span><br><span class="line"><span class="built_in">assert</span>(size &lt;= MAX_BYTES);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> index = SizeClass::<span class="built_in">Index</span>(size);</span><br><span class="line">_freeLists[index].<span class="built_in">Push</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ThreadCache无锁访问">ThreadCache无锁访问</h3><blockquote><p>每个线程都有自己的thread cache，如何创建这个thread cache呢？如果创建为全局，那么肯定是需要锁来控制</p></blockquote><p>如果实现每个线程无锁的访问thread cache，就需要用到线程局部存储TLS(Thread Local Storage)，使用该方式存储的遍历在它所在的线程全局是可访问的，但是不能被其他线程访问到，可以保证线程的独立性。</p><blockquote><p>我们在 声明下边这个指针、</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TLS thread local storage</span></span><br><span class="line"><span class="type">static</span> _declspec(thread) ThreadCache* pTLSThreadCache = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在整个调用中可以用下述方式</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">ConcurrentAlloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pTLSThreadCache == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pTLSThreadCache = <span class="keyword">new</span> ThreadCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码，获取进程的id</span></span><br><span class="line">cout &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; pTLSThreadCache &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pTLSThreadCache-&gt;<span class="built_in">Allocate</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConcurrentDealloc</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(pTLSThreadCache);</span><br><span class="line">pTLSThreadCache-&gt;<span class="built_in">Deallocate</span>(ptr, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly主题-giscus评论</title>
      <link href="/posts/3307342311/"/>
      <url>/posts/3307342311/</url>
      
        <content type="html"><![CDATA[<h2 id="1、创建新仓库">1、创建新仓库</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051226551.png" alt="image.png"></p><h2 id="2、安装giscus">2、安装giscus</h2><p>点击这个链接安装：<a href="https://github.com/apps/giscus">GitHub Apps - giscus</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051226562.png" alt="image.png"></p><p>选择刚建立的仓库，点击install</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051228750.png" alt="image.png"></p><h2 id="3、配置仓库discuss部分">3、配置仓库discuss部分</h2><p>首先打开仓库的setting，将Discussions部分打上对号</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051535566.png" alt="image.png"></p><p>然后建立一个Announcements的分类</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051537858.png" alt="image.png"></p><h2 id="4、进入giscus配置">4、进入giscus配置</h2><p>链接在这：<a href="https://giscus.app/zh-CN">giscus</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051524708.png" alt="image.png"></p><p>配置完上述部分后，可以在启动giscus下边复制几个东西</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051530141.png" alt="image.png"></p><p>将上边复制的东西填到butterfly主题配置文件的这里就可以了</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051531097.png" alt="image.png"></p><h2 id="5、大功告成">5、大功告成</h2><p>博客文章部分就有了下边的评论区</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302051538865.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3、高并发内存池-框架</title>
      <link href="/posts/1235732513/"/>
      <url>/posts/1235732513/</url>
      
        <content type="html"><![CDATA[<h1>问题考虑</h1><blockquote><p>主要是在多线程高并发的场景下，性能更强，主要考虑下面几个问题</p></blockquote><ol><li>性能问题</li><li>多线程环境下，锁竞争问题</li><li>内存碎片问题</li></ol><h1>组成部分</h1><blockquote><p>concurrent memory pool 主要由三部分构成：thread cache、central cache、page cache，如下图所示</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302031859699.png" alt="sdsdasd.drawio.png"></p><ol><li><strong>thread cache</strong> : 线程缓存，是每个线程独有的，用于小于256kb内存的分配，线程从这里申请内存不需要加锁，每个线程独享一个cache，这也是内存池高效的原因</li><li><strong>central cache</strong> : 中心缓存，被所有线程共享，thread cache是按需从central cache 中获取的对象，central cache合适的时机回收thread cache的对象，避免一个线程占用过多的内存，而其他线程内存不足，使得内存分配在多个线程中更均衡的按需调度，cnetral cache是存在竞争的，从这里获取内存对象需要加锁，但是这里用的是<strong>桶锁</strong>，而且只有thread cache没有内存对象时，才会找central  cache，所以这里竞争不会很激烈。</li><li><strong>page cache</strong> : 页缓存，是在central cache缓存上面的一层缓存，存储的内存是以页为单位存储及分配的，central cache没有内存对象时，从page cache分配出一定数量的page，并且切割成定长大小的小块内存，分配给central cache，当一个span的几个跨度页的对象都回收以后，page cache会回收central cache满足条件的span对象，并且合并相邻的页，组成更大的页，缓解内存碎片的问题。</li></ol><h1>总结</h1><blockquote><p>高并发内存池的这三部分都挺复杂，后面也会具体分为三个章节谈论这三个部分的原理以及实现。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、高并发内存池-预备</title>
      <link href="/posts/594127029/"/>
      <url>/posts/594127029/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不积跬步，无以至千里；不积小流，无以成江海，做项目也是一样，先从简单的部分做起，在正式的项目开始前，可以先来个开胃菜，一是可以熟悉简单的内存池是如何控制的，二是会作为之后内存池的一个基本组件。</p></blockquote><h1>malloc和定长内存池对比</h1><blockquote><p>malloc场景如下，malloc是一个通用的内存池，在什么场景下都可以使用，但这也意味着malloc在什么场景下都不会有很高的性能，因为malloc并不是针对某种场景专门设计的。</p></blockquote><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TDA[场景A] --&gt; B(malloc)E[场景B] --&gt; B(malloc)C[场景C] --&gt; B(malloc)  </pre></div><blockquote><p>定长内存池就是针对固定大小内存块申请和释放的内存池，由于定长内存池只需要支持固定大小内存块的申请和释放，因此我们可以将其性能做到极致，并且在实现定长内存池时不需要考虑内存碎片等问题，因为我们申请/释放的都是固定大小的内存块。</p></blockquote><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart BTA[内存池A] --&gt; B1(场景A)E[内存池B] --&gt; B2(场景B)C[内存池C] --&gt; B3(场景C)  </pre></div><h1>定长内存池实现</h1><h2 id="框架设计">框架设计</h2><blockquote><p>我们的思路是先申请大块内存，每次申请就切sizeof(T)大小的内存块，释放后，用链表组织起来，每个内存块前4/8个字节存下一个内存块的地址，再次申请内存时，如果_freeList不为空，就重复利用</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302012204835.png" alt="image.png"></p><h3 id="核心成员">核心成员</h3><ul><li>_ memory：指向申请大块内存的空间</li><li>_ freeList：组织归还的内存块的链表</li><li>_ remainBytes：大块内存剩余字节数</li></ul><h3 id="存在问题">存在问题</h3><ul><li>大块内存，剩下的内存不足一个T的大小如何处理？</li><li>T的类型大小若是小于指针的大小如何处理？</li><li>内存块的前段内存存指针，这个大小是4？还是8？能不能考虑平台兼容？</li><li>如何取一块内存的前4/8个字节？</li></ul><blockquote><p>这些问题怎么解决呢？我们在下面的内容详细讲解</p></blockquote><h2 id="成员函数">成员函数</h2><h3 id="New">New</h3><blockquote><p>申请内存，返回对应类型的指针，我们首先看一下流程图</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302021614783.png" alt="eeee.png"></p><blockquote><p>如果按照上述流程，先申请了大块内存之后，每次切T类型大小的内存块，但是最后的时候剩余的内存块不够的话，就会出现越界问题，所有，我们有了remainBytes成员，这个标识剩余的容量，当剩下的内存不足一个T的大小，我们就直接申请大块内存，初始的时候remainBytes为0，也是小于T的大小，同样进行申请，这就回答了第一个问题，和remainBytes成员的用处。</p></blockquote><p>然后我们来看一下具体申请的两种操作：</p><blockquote><p>1、在大块内存上切内存块，返回_memory的地址，然后让_memory往后移动sizeof(T)的距离。这也是我们为什么将memory成员设置为char * 的原因，因为+1操作就是往后移动一个字节。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302021358722.png" alt="image.png"></p><blockquote><p>2、如过freeList不为空，就头删取头节点返回即可</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302021455261.png" alt="image.png"></p><p>New代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T* obj = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span> (_freeList) <span class="comment">//freeList不为空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接进行头删</span></span><br><span class="line">obj = (T*)_freeList;</span><br><span class="line"><span class="comment">/* freeList指向下一个节点，我们首先得取出来freeList指向得内存块中得前</span></span><br><span class="line"><span class="comment">指针大小的字节，但是32位平台下，指针的大小为4，64位平台指针的大小为8，如果是4的话，我们可以将freeList强转为int* 然后解引用拿到了前4个字节，但是在64位平台下指针的大小占8个字节，这个就不行了。</span></span><br><span class="line"><span class="comment">我们可以将 freeList强转为二级指针，解引用就是一级指针，这样就能拿到4或者8个字节了。这就回答了后边两个问题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">_freeList = *(<span class="type">void</span>**)_freeList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_remainBytes &lt; <span class="built_in">sizeof</span>(T))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line">_remainBytes = <span class="number">128</span> * <span class="number">1024</span>;</span><br><span class="line">_memory = (<span class="type">char</span>*)<span class="built_in">malloc</span>(_remainBytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> objSize = <span class="built_in">sizeof</span>(T) &gt; <span class="built_in">sizeof</span>(<span class="type">void</span>*) ? <span class="built_in">sizeof</span>(T) : <span class="built_in">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">obj = (T*)_memory;</span><br><span class="line">_memory += objSize;</span><br><span class="line">_remainBytes -= objSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对T类型初始化-使用定位new</span></span><br><span class="line"><span class="keyword">new</span>(obj)T;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete">Delete</h3><blockquote><p>释放内存（归还内存）, 直接对freeList进行头插操作即可，具体细节放到代码注释部分</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302021448061.png" alt="image.png"><br>Delete代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(T* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先显示调用析构</span></span><br><span class="line">obj-&gt;~<span class="built_in">T</span>();</span><br><span class="line"><span class="comment">//头插 进freeList链表</span></span><br><span class="line">*(<span class="type">void</span>**)obj = _freeList;</span><br><span class="line">_freeList = (<span class="type">void</span>*)obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能测试">性能测试</h2><blockquote><p>性能测试代码很简单，就是不断的申请释放节点，申请的指针用vector保存，然后记录固定次数的申请释放时间就可以了</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> _val;</span><br><span class="line">TreeNode* _left;</span><br><span class="line">TreeNode* _right;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TreeNode</span>()</span><br><span class="line">:_val(<span class="number">0</span>)</span><br><span class="line">, _left(<span class="literal">nullptr</span>)</span><br><span class="line">, _right(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestObjectPool</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 申请释放的轮次</span></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> Rounds = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮申请释放多少次</span></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> N = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;TreeNode*&gt; v1;</span><br><span class="line">v1.<span class="built_in">reserve</span>(N);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> begin1 = <span class="built_in">clock</span>(); <span class="comment">//记录开始时间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; Rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="keyword">new</span> TreeNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> v1[i];</span><br><span class="line">&#125;</span><br><span class="line">v1.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> end1 = <span class="built_in">clock</span>(); <span class="comment">// 结束时间</span></span><br><span class="line"></span><br><span class="line">std::vector&lt;TreeNode*&gt; v2;</span><br><span class="line">v2.<span class="built_in">reserve</span>(N);</span><br><span class="line"></span><br><span class="line">ObjectPool&lt;TreeNode&gt; TNPool;</span><br><span class="line"><span class="type">size_t</span> begin2 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; Rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line">v2.<span class="built_in">push_back</span>(TNPool.<span class="built_in">New</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line">TNPool.<span class="built_in">Delete</span>(v2[i]);</span><br><span class="line">&#125;</span><br><span class="line">v2.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end2 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;new花费时间:&quot;</span> &lt;&lt; end1 - begin1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;定长内存池花费时间:&quot;</span> &lt;&lt; end2 - begin2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过性能测试，当N是1000000，Release模式下，定长内存池速度大概为new的10几倍</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302021531020.png" alt="image.png"></p><h2 id="整体代码">整体代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _WIN32</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectPool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">T* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T* obj = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span> (_freeList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接进行头删</span></span><br><span class="line">obj = (T*)_freeList;</span><br><span class="line">_freeList = *(<span class="type">void</span>**)_freeList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_remainBytes &lt; <span class="built_in">sizeof</span>(T))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line">_remainBytes = <span class="number">128</span> * <span class="number">1024</span>;</span><br><span class="line">_memory = (<span class="type">char</span>*)<span class="built_in">malloc</span>(_remainBytes);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> objSize = <span class="built_in">sizeof</span>(T) &gt; <span class="built_in">sizeof</span>(<span class="type">void</span>*) ? <span class="built_in">sizeof</span>(T) : <span class="built_in">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">obj = (T*)_memory;</span><br><span class="line">_memory += objSize;</span><br><span class="line">_remainBytes -= objSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对T类型初始化-使用定位new</span></span><br><span class="line"><span class="keyword">new</span>(obj)T;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete</span><span class="params">(T* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先显示调用析构</span></span><br><span class="line">obj-&gt;~<span class="built_in">T</span>();</span><br><span class="line"><span class="comment">//头插 进freeList链表</span></span><br><span class="line">*(<span class="type">void</span>**)obj = _freeList;</span><br><span class="line">_freeList = (<span class="type">void</span>*)obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* _memory = <span class="literal">nullptr</span>; <span class="comment">// 指向大块内存的指针</span></span><br><span class="line"><span class="type">size_t</span> _remainBytes = <span class="number">0</span>; <span class="comment">// 大块内存在切分过程中剩余字节数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* _freeList = <span class="literal">nullptr</span>; <span class="comment">// 还回来过程中链接的自由链表的头指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内存申请（系统接口）补充">内存申请（系统接口）补充</h2><blockquote><p>在Windows下，可以调用VirtualAlloc函数，申请堆内存</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接去堆上按页申请空间</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">void</span>* <span class="title">SystemAlloc</span><span class="params">(<span class="type">size_t</span> kpage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, kpage&lt;&lt;<span class="number">13</span>, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// linux下brk mmap等</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>VirtualAlloc是Windows API中的一个函数，它在进程的虚拟地址空间内保留或提交内存页。</p></blockquote><p>传递给VirtualAlloc的参数包括：</p><ul><li>0：要分配的区域的起始地址。0表示系统将选择起始地址。</li><li>kpage&lt;&lt;13：要分配的内存区域的大小（以字节为单位）。kpage&lt;&lt;13表示“kpage乘以2的13次方”。</li><li>MEM_COMMIT | MEM_RESERVE：分配的类型，在本例中，分配的是提交内存和保留内存。</li><li>PAGE_READWRITE：分配所需的内存保护，在这种情况下，指定了读写访问。</li></ul><p>该函数返回指向分配内存的第一个字节的指针，该字节存储在ptr变量中</p><blockquote><p>采用系统调用后，New的申请内存可以按下方的写法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T* obj = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span> (_freeList)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 直接进行头删</span></span><br><span class="line">obj = (T*)_freeList;</span><br><span class="line">_freeList = *(<span class="type">void</span>**)_freeList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_remainBytes &lt; <span class="built_in">sizeof</span>(T))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明需要先申请大块内存</span></span><br><span class="line">_remainBytes = <span class="number">128</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="comment">//_memory = (char*)malloc(_remainBytes);</span></span><br><span class="line">_memory = (<span class="type">char</span>*)<span class="built_in">SystemAlloc</span>(_remainBytes &gt;&gt; <span class="number">13</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> objSize = <span class="built_in">sizeof</span>(T) &gt; <span class="built_in">sizeof</span>(<span class="type">void</span>*) ? <span class="built_in">sizeof</span>(T) : <span class="built_in">sizeof</span>(<span class="type">void</span>*);</span><br><span class="line">obj = (T*)_memory;</span><br><span class="line">_memory += objSize;</span><br><span class="line">_remainBytes -= objSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对T类型初始化-使用定位new</span></span><br><span class="line"><span class="keyword">new</span>(obj)T;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>震惊！！！C语言也能实现泛型编程吗？？</title>
      <link href="/posts/2871490963/"/>
      <url>/posts/2871490963/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天看到一个有意思的知识点，赶紧记录一下，总所周知，C语言没有泛型，但是C11新增了一种表达式，叫做泛型选择表达式(_ Generic)，这个是干啥的呢？它的作用是根据表达式的类型选择一个值，让我们来看一看它具体的语法</p></blockquote><h1>泛型选择引入</h1><p>先看一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> y = <span class="number">2.0</span>;</span><br><span class="line"><span class="type">char</span> z = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">_Generic</span>(x, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">_Generic</span>(y, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">_Generic</span>(z, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_Generic是C11关键字，后面的圆括号中包含有多个用逗号分隔的项，第一个项是表达式，后面的每一个项都由一个类型、一个冒号和一个值组成，如double: 1。第一个项的类型匹配哪一个标签，整个表达式的值就是该标签后面的值</code></p><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011644537.png" alt="image.png"></p><blockquote><p>可以看到，根据传入的变量的类型，打印的结果也不同，第一个printf的第一项x是int，那么整个表达式的结果为0，第二个printf的第一项是double，表达式的结果就是1，第三个printf打印结果为3是因为char类型没有匹配，走了默认的default，结果为3</p></blockquote><p><font color="#ff0000">其实，这个东西很像switch语句，只是Generic用表达式类型匹配标签，switch用表达式的值匹配标签</font></p><h1>与宏定义组合</h1><blockquote><p>我们可以看到啊，上边的用法还是比较恶心麻烦的，但是呢，我们可以结合宏定义组合去玩这个东西，这样就会非常的方便</p></blockquote><p>直接看例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MYTYPE(X) _Generic((X),int:<span class="string">&quot;int&quot;</span>, double:<span class="string">&quot;double&quot;</span>, default:<span class="string">&quot;other&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(d));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(<span class="number">1.0</span>*d));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(<span class="string">&quot;string&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011709745.png" alt="image.png"></p><blockquote><p>与宏定义结合是不是感觉好多了，甚至有点C++泛型编程的感觉了，但是其实还差点。</p></blockquote><h1>进阶玩法</h1><blockquote><p>_ Generic标签对应的值，可以是整形，也可以是字符串，当然也可以是函数指针。</p></blockquote><p>我们来看一下下边的这段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintInt</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintDouble</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSting</span><span class="params">(<span class="type">char</span>* x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintOther</span><span class="params">(<span class="type">void</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;类型有点问题\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(X) _Generic((X),\</span></span><br><span class="line"><span class="meta">int:PrintInt,\</span></span><br><span class="line"><span class="meta">double:PrintDouble,\</span></span><br><span class="line"><span class="meta">const char*:PrintSting,\</span></span><br><span class="line"><span class="meta">default:PrintOther)(X)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">2.0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello _Generic&quot;</span>;</span><br><span class="line">PRINT(x);</span><br><span class="line">PRINT(y);</span><br><span class="line">PRINT(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011719753.png" alt="image.png"></p><blockquote><p>这样是不是和C++的泛型编程很像了呢，是不是挺有意思的，当然还是C++的泛型好用一些。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、高并发内存池-序章</title>
      <link href="/posts/4062989894/"/>
      <url>/posts/4062989894/</url>
      
        <content type="html"><![CDATA[<h1>项目介绍</h1><blockquote><p>这是一个CPP实现的高并发内存池，原型是谷歌的tcmalloc开源项目（Thread-Caching Malloc），既线程缓存的malloc，实现了高效的多线程内存管理，用于替代系统的内存分配相关函数（malloc、free）</p></blockquote><h1>前置需求</h1><ul><li>C/C++</li><li>数据结构（链表、哈希桶）</li><li>操作系统内存管理</li><li>单例模式</li><li>多线程</li><li>互斥锁</li><li>…</li></ul><h1>内存池简介</h1><h2 id="1、池化技术">1、池化技术</h2><blockquote><p>池化技术就是程序先向系统申请过量的资源，然后自己管理，能大大提升程序的运行效率</p></blockquote><p>常见的池化技术场景</p><ul><li>内存池</li><li>线程池</li><li>对象池</li><li>…</li></ul><h2 id="2、内存池">2、内存池</h2><blockquote><p>内存池是指程序预先从操作系统申请一块足够大内存，此后，当程序中需要申请内存的时候，不是直接向操作系统申请，而是直接从内存池中获取；同理，当程序释放内存的时候，并不真正将内存返回给操作系统，而是返回内存池。当程序退出(或者特定时间)时，内存池才将之前申请的内存真正释放。</p></blockquote><h2 id="3、内存池解决的问题">3、内存池解决的问题</h2><h3 id="内存碎片问题">内存碎片问题</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301292200227.png" alt="内存碎片.png"></p><h3 id="效率问题">效率问题</h3><blockquote><p>向操作系统频繁申请内存消耗较大，内存池能够避免让程序频繁的向系统申请和释放内存</p></blockquote><h2 id="4、malloc">4、malloc</h2><blockquote><p>C/C++中动态申请内存都是通过malloc去申请内存，malloc本质也是一个内存池，原理如下：</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301292206748.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 高并发内存池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程推荐-理财篇</title>
      <link href="/posts/953025558/"/>
      <url>/posts/953025558/</url>
      
        <content type="html"><![CDATA[<h2 id="Python数据分析实战：构建股票量化交易系统">Python数据分析实战：构建股票量化交易系统</h2><ul><li>深入理解量化交易的本质、发展、优势、意义和过程；</li><li>掌握Python基础工具的使用方法，如Python、Pandas、Numpy、Matplotlib、TA-Lib、Tushare、statsmodels、pyecharts等；</li><li>掌握Python数据分析和挖掘的过程和技能；</li><li>掌握Python实现经典金融技术指标的方法，如K线、均线、成交量、MACD、KDJ等。</li><li>掌握使用Matplotlib、pyecharts可视化方法绘制出股票行情分析界面以捕捉个股动向，为大家呈现不同的显示效果。</li><li>掌握Python实现应用数学中经典算法，如线性回归、蒙特卡洛、随机漫步、凯利公式等；</li><li>掌握如何从数据特征值中实现常用的量化交易策略，如择时、选股、风险控制、度量、仓位管理等。通过学习我们可以制定量化交易策略以及度量策略效果，应用交易策略来辅助股票交易。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281429616.jpg" alt="D90C09628F49A26EBEF4BB6308B6BE05.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>课程推荐-后端篇</title>
      <link href="/posts/3294300332/"/>
      <url>/posts/3294300332/</url>
      
        <content type="html"><![CDATA[<h2 id="课程1-MySQL-性能调优必知必会">课程1 - MySQL 性能调优必知必会</h2><ul><li>数据架构方面：主要讲述 MySQL 主从架构之间可能遇到的问题，以及主从架构如何提高稳定性。</li><li>存储引擎方面：主要讲述 MySQL 数据库中的 InnoDB 存储引擎的底层运行原理以及 InnoDB 存储引擎的优化。</li><li>SQL 方面：主要讲述 SQL 的实现原理，例如，order by（排序）的实现原理及优化、join（连表）的实现原理及优化等，更有一条 SQL 从执行的开始到结束都经历过哪些模块，在使用过程中优化的最佳实践等。</li><li>MySQL 数据安全：主要讲述在 MySQL 数据库中如何防止数据丢失，以及数据库中各种日志的作用。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428630.jpg" alt="11E0A633507956E663577A8E64791E6D.jpg"></p><h2 id="课程2-Python-异步网络编程实战">课程2 - Python 异步网络编程实战</h2><ul><li>从事 Python Web 开发的技术人员</li><li>对 Python 感兴趣，想了解 Python 异步实现过程</li><li>在开发过程中，想使用异步方式提升 Python 性能的开发者</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428056.jpg" alt="E6D29224C353AC28FC76ABD734A8C32C.jpg"></p><h2 id="课程3-深入理解-TCP-协议：从原理到实战">课程3 - 深入理解 TCP 协议：从原理到实战</h2><ul><li>学习 TCP 协议多次从入门到放弃的同学</li><li>想通过实验方法学习 TCP 协议的同学</li><li>对于前端工程师，学完可以快速辨识开发中遇到的问题是前端还是后端的问题，对页面性能优化有更深的理解</li><li>对于后端工程师，TCP 协议可以说是必须要掌握的技能，学完能从协议和网络层面快速分析后端诸多分布式组件的问题，对提升接口的性能和分布式系统的可靠性会更有把握</li><li>对于测试工程师，对网络协议理解的越深，越能发现隐藏很深的 Bug，对性能测试、压力测试会有更深的理解</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428061.jpg" alt="0F0CD1421DF22FE9CFBA9E317E9E2B45.jpg"></p><h2 id="课程4-开发者必备的-Docker-实践指南">课程4 - 开发者必备的 Docker 实践指南</h2><ul><li>虚拟化技术、容器技术和 Docker 的背景</li><li>Docker 运行环境的搭建</li><li>镜像与容器的管理与使用</li><li>自定义镜像和共享镜像</li><li>通过 Compose 编排应用</li><li>多个使用 Docker 搭建运行环境的实践</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281429087.jpg" alt="35C46EF4C2C8A41F16DC9C43DE6CA8B6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>课程推荐-工具篇</title>
      <link href="/posts/1556496795/"/>
      <url>/posts/1556496795/</url>
      
        <content type="html"><![CDATA[<h2 id="Git">Git</h2><blockquote><p>随着这几年 GitHub 的流行，Git 已经是一个程序员逃不过的技术项，但很多人却纷纷倒在了学习它的路上。而且，出于工作原因而不得不用 Git 的人，有不少在工作中对 Git 也是能不用就不用，生怕哪个命令用错就把公司的代码库毁掉了🙈。而那些对 Git 掌握得比较好的少数人，就像团队中的神一样，在同事遇到 Git 相关的问题的时候用各种风骚操作来拯救队友于水火。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281415936.jpg" alt="E1AEE84870D5BE5C2DA57BDF00F1C3D8.jpg"></p><h2 id="Nvim">Nvim</h2><ul><li>适合有一点 VIM 基础的使用者（至少知道怎么编辑文件和退出 VIM 😁）。</li><li>有程序开发基础，有可以访问 Github 的网络环境，想要提升开发效率与开发体验的程序开发人员。</li><li>想要系统学习 Neovim 配置，却被网上零散过时的 VIM 配置教程困扰的同学们。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281416032.jpg" alt="01893C4AF74549C45EEC1A4DC4D77019.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这里有个彩蛋哦</title>
      <link href="/posts/3396067387/"/>
      <url>/posts/3396067387/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bdcf00d57de64824eb8c2090af0b3a041ff223bd737c2570bea95d28baef4c82">30be79645dddaee9803da55d5222e25b3b8286b1b1b642cba5ff858bd643142d801475a84ef4fcddda705ade8184eaabecb154b558500d3d28a368d3cb64d1b923ee8ced777f1754eb52d3dfe352ea26bf0e18ea5ebe9158885c55566d98395a8536e8015ae1ca61e32428de6fafdf589580353eb27fd401cd2e3071a1b462d378979df0b133e952f82a5d9cde81f2866c3fae1d022292234d6c7e94322e5e5134e132e2a208e3b8554036facc4c5ee24d5f40534cd1244a808eb33d2a4acefb3cf023952a1574f83966da4367fd70d340e2a6366f4b336738bb241b33834814da91779c9ef5110b23d5774eb9591209191c498846ac99ab57510509c659fa9ed86883f042e7b2967d7f1d666bee11af150c9f8f57702038a883fbcbb1fa2a58b1019f23ade742ccbb2403007d212455d64263fd296c3d899af37b25d7bcc92bd2d51a6b000768e851a5fb951d6f383d7d9aa5db13c188641b087b7e7729b5940d3519fef01cdb83c998d122b70d615ffa29587f05c42ac735f744001d734b7bc44d92011c8e232a9e8b748b7f385aa9852f91e3516a68f2860d59ea8a64f0894d0ac43e5a770e3080e8706e4544c426abe27cb76b06c3dc85a1bcf85a8de5e0675a245576b6bdfe1ce42a27ce5a13a5252e7847bd683fb141f7b202e260a1ebd56c79dbf20a89bae4bcae246f23bcf42872ce749b9188190f2e24ca17fae818cbf59ee489aadfc7350fbbecb3f04e8ba323b00a738286e2bdc36f050e1c4b24b87c089937fbefe0dd6644bffae252ef13ab68e74cc0a0a3f50dffae023865559cc510bcc65b0697fe3f89529230c79a8e5ffb497bff94c25bdb6b0b9fba02f990daac672f647eede2167e00088cd1c0f9d0739f2928d2ba291f94c938b84f654a6958f13a27011cec14090d50eccef160a289eab140652a8f11f587f89627c35b93c6e3ac9b3a6b2869fa3af35664f7969617029eea6ae946ca13a116ad0478377a7fb32721afd3e4e822c7bf7e7737b4605a898ac0f2f350c250590f4dc1489dedb4200028d70432cfb96b16ee8268130c074a43ebc5ea4661a2fa4aae3bcf6425f82c2abb09007c6bd621870dcf8964d820898e6dbd7f4bb5ed8821d4d9a63ab0a797dffe1c707e051383436039b1da540da0d317f563323c9fac93c66ef9b5f7a1a3bdffdab3bd2cb111355e33d2b361db900961eab7b6da7c502d4b3506c551f4fb0a5f2029bcd885e597de54be3f0681486dd133ba0324c82bb972d60968d8863128da6ee46bc3b4fa88493550f9618f9f9118ebf33ce820a675dcbb59aa5dd58f83ff8f006d97fd00627a196c79add9c0d8cb4a46c082a75d3b3dd1bb2f0cccfef06604bbcda612116059c7efbdb81b65a7c258501cc9ed39376b3662c28a51e1b9a8768fd06a51b22669ad6c34aaa73851d851677e5423dfcd5166f893cb644ab51659b96667b75ba057fe069b739a6116e78cc9fa2c02b6f4cb3ea4901827d55e47667cf0e2b841daabe1938787a84c78d3c9ce982af690289cdbd7c43aeb026cb7c3fb7d75437152baa2e8b6d8ecc933ee5275ccda87a48e93ed3fac40afb52bdbb5cf0ae9ece1ff7898c0a910a41bb8622f79e379453c3322312e0951e4d95da800436954738d0efbd2007e2c966a3f6009899757d7cf6d350ad93e94233413fc3b2e38778d22a0854098bfb207e173d2c34a4b340e511730c5ed54a154c5e76e0f3a42304ff2a2de4b7f7fd5432570ecf759496ff5d6a8f350fd7f359a8a2db0f63713021f92a142d96522e4daf3071857c2d941c7ec49e4dff8117d97a01c44584e28cde21172b020c2b2d347ebf581f1b77fd37f8a0614b473538b95ebe76304907ddd98ae6044ab070629ab8c7a4857a14fde17e8140bb71c656f06f6b722732fc95da78aea669246e16766889bf1a922d051b011e250c72845f7fcb04ccb8b4f549e9663d7c033611b8d031878f2047a6918ccc5852794d755d0a54952241b85627614b3dce1d42f05eb77a9d7cc429d42b1151ebf8d419ae4ef14bf67dda558c049b34fc6a239eb31478127fcfcaa29013b305ffd199f5e76ae40d35cf066d6f3a1d9c2e8e0565c316ca811220e434fcde08eec9ee87de6cada9f10f70cbafa2460cdb360f4a5e76591f66eeccd120a9fb57b600119a9d1a7564bbb649e9dbfb326f4fb72618522d8dddbd1f35df73e7a876a5bc62967a1fea6dbfe2de23ca33b98457d6a09630549597ebd3aff0d7fb4b7b2ff4da26ced95ba32b9e0ef33fb9c6c16b310bed800725e27d2bbd19798f40fff3d758f6a88ef30ef42e12985aeb3413f816732e926909efc80afb186b8feb1311412eb06d97a5f635942e163ac6353879791d0dedac522d3c8be31c04dc7479738a976008f5f37e54a1e26673ee3c5109b8401c271bc29408d5656c16333deac92dd9931beedd37f92a93c97b969a8682d5d0992c7e1e089ad88b4dbcacf04cecf9bc2086f221198f8ce04004eaa0c4162c18c7725c03165d8f9851c28f4e40994bacf2eeb59597d1c71d39acff41e4b25ef029b8c02349b4de4a6865d08aaf9de1e85e48c55d4f41abe0a7421ce123e5d8a8d20eaf186c35a438af5c3a629e0cfe66dc1cbb256919107abc877d350420185f5d8e991974ffbc9cf219a40d583351f11a9f012fcce1b16f146597e450f14c02c5a328f1c00d43a6a35d99a68e9e10e22d0b4ee11f4a831a66aa2f55cfd276ffec6de1a2a4d0f0f999aeae9173e3f47c791b7da673c64fc498a62ea66aa92781f313a7ed3d8910e7ef5403fbba2246e5bb6a9d92b6e6a0b3a989284ba228530f1f66d4ea91edd052be20db783f43397af9931d4d4a2872b03169cfcbb366975f18051d133e87b03ef0d759c7f55c9533a115cb062107e111de3110c49cf37fe6db2f1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">微信公众号“孙菜菜”回复关键词【彩蛋】获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何最快的打造一个帅气好看可以装逼的github主页呢？</title>
      <link href="/posts/2286645816/"/>
      <url>/posts/2286645816/</url>
      
        <content type="html"><![CDATA[<p><strong>先说结论：抄别人好看的主页</strong></p><blockquote><p>PS：自己去搞得话，并不一定好弄，而且不如人家的好看，当然我也在后边放了几个小网站，想自己丰富的可以去看看。</p></blockquote><h2 id="好看主页推荐">好看主页推荐</h2><blockquote><p>这边推荐四个主页，后边会说复制主页的方法，github的主页是需要建立一个与github的ID同名的仓库的，然后里面放README.md的文档，这个文档内容就会被展示到主页。</p></blockquote><p><a href="https://github.com/blinkfox">blinkfox (闪烁之狐 (blinkfox)) (github.com)</a></p><p>推荐指数：⭐⭐⭐⭐</p><p>好看指数：⭐⭐</p><p>复制难易：⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210027622.png" alt=""></p><p><a href="https://github.com/L1cardo">L1cardo (Licardo) (github.com)</a></p><p>推荐指数：⭐⭐⭐⭐⭐</p><p>好看指数：⭐⭐⭐⭐</p><p>复制难易：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210034952.png" alt=""></p><p><a href="https://github.com/appotry">appotry (夜法之书(appotry)) (github.com)</a></p><p>推荐指数：⭐⭐</p><p>好看指数：⭐⭐⭐</p><p>复制难易：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210041636.png" alt=""></p><p><a href="https://github.com/atongrun">atongrun (孙菜菜) (github.com)</a></p><p>推荐指数：⭐⭐⭐</p><p>好看指数：⭐⭐</p><p>复制难易：⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210049534.png" alt=""></p><blockquote><p>前三个是大佬的，最后一个是我的，我是抄的大佬的，这里就没必要放太多了，因为大差不差，大家可以自己打开github主页下载文档，当然方便点也可以关注我的公众号【孙菜菜】，回复【帅气主页】，获取源文件。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210119032.png" alt=""></p><h2 id="如何复制">如何复制</h2><h3 id="步骤1、建立同名仓库">步骤1、建立同名仓库</h3><p>在github上建立一个同名的仓库，这里就不多说，看主页美化的大家应该都会的，然后对README.md文档操作就OK了</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211357638.png" alt=""></p><h2 id="步骤2、Copy大法">步骤2、Copy大法</h2><blockquote><p>具体步骤如下，记得一定用markdown编辑器弄最好，容易显示出实时的效果，可以按照自己的喜欢酌情删减哦，或者几个文档混合copy</p></blockquote><ul><li>打开四个文件夹的任何一个（你喜欢的）</li><li>将所有内容放到你本地仓库</li><li>打开README.md文档，将里面的github用户名换成自己的</li><li>将各种链接换成自己的</li><li>git add -&gt; git commit -&gt; git push 大功告成</li></ul><blockquote><p>当然，如果大家嫌麻烦怕改链接名错误啥的话，同样关注【孙菜菜】公众号，回复【帅气主页】，获取源文件。里面我还放了个详细的说明，以我的github主页为例子，放到word里面了，将所有需要修改的地方都加上了高亮和注释。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211354492.png" alt=""></p><blockquote><p>欢迎关注哦。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211358151.gif" alt=""></p><h2 id="网站推荐">网站推荐</h2><blockquote><p>如果大家非得说不喜欢直接copy别人的，那么你就可以看看下面几个网站了，这下边是我觉得最常见的github主页的几个部件了，如果你要配的比较好看的话，可能还需要懂一点HTML语言哦</p></blockquote><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">各种表情</a></p><blockquote><p>在这里有许多 emoji 的符号代码，你可以直接将它们用到 README 中。</p></blockquote><p>实用指数：⭐⭐⭐</p><p><a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">统计卡片</a></p><blockquote><p>这个就是github主页最常见的小部件了</p></blockquote><p>实用指数：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210105140.png" alt=""></p><p><a href="https://shields.io/">丰富标签</a></p><blockquote><p>无论是项目还是github主页出现频率超高的小标签，非常的实用。</p></blockquote><p>实用指数：⭐⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210106308.png" alt=""></p><p><a href="https://github.com/ryo-ma/github-profile-trophy/blob/master/README.md">各种奖杯</a></p><blockquote><p>这个也是和卡片差不多的统计相关的小部件，出现频率也挺高</p></blockquote><p>实用指数：⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211413651.png" alt=""></p><h2 id="总结">总结</h2><p>有一个好看的github主页挺好玩主要的可以装逼，希望大家都能搞一个令自己满意的主页。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>白嫖零花钱</title>
      <link href="/posts/2137780596/"/>
      <url>/posts/2137780596/</url>
      
        <content type="html"><![CDATA[<h2 id="1、微信扫码">1、微信扫码</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301191345034.jpg" alt=""></p><h2 id="2、搜索关键词">2、搜索关键词</h2><p>进去搜索以下关键词，选择价格最高做即可，基本上3分钟左右就Ok了</p><blockquote><p>下面都是我自己做过的。</p><p>主要是时间短、价格高，当然还有很多，大家可以自己找找。</p><p>迫于懒的原因，没找多少，都是想改善一下自己的生活的时候，才做的</p></blockquote><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">名称</th><th style="text-align:center">价格</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">凹音短视频</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">云闪付</td><td style="text-align:center">15+</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">小招推客</td><td style="text-align:center">10+</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">快步</td><td style="text-align:center">5+</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">云缴费</td><td style="text-align:center">5+</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">星云视界</td><td style="text-align:center">4+</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">香蕉乐玩</td><td style="text-align:center">12+</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">游易赚</td><td style="text-align:center">10+</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">豆豆趣玩</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">辅助注册</td><td style="text-align:center">8+</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">哔哩哔哩</td><td style="text-align:center">5+</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">btd</td><td style="text-align:center">11+</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">淘宝特价版</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">京东白条</td><td style="text-align:center">20+</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">冲顶鸭</td><td style="text-align:center">10+</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">一淘</td><td style="text-align:center">5+</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">梨漩</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">京东极速版</td><td style="text-align:center">6+</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">聚跑</td><td style="text-align:center">6+</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">萌犬世界</td><td style="text-align:center">12+</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">AITD</td><td style="text-align:center">10+</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">小蚂蚁</td><td style="text-align:center">7+</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">陌嗨短视频</td><td style="text-align:center">8+</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">未完</td><td style="text-align:center">待更新。。。</td></tr></tbody></table><p><strong>Ps：也可以看网页版的，点击阅读原文即可，网页版的更新快一点。只做简单的，勿被标题迷惑，提交截图超过2个的，直接放弃即可，因为太繁琐了</strong></p>]]></content>
      
      
      <categories>
          
          <category> 推荐 </category>
          
          <category> 业余 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++的IO流</title>
      <link href="/posts/3964554901/"/>
      <url>/posts/3964554901/</url>
      
        <content type="html"><![CDATA[<h2 id="C-IO体系">C++IO体系</h2><blockquote><p>ostream/istream 更好的支持自定义类型对象的流插入和流提取，自定义类型，可以自己重载，控制流提取和流插入的方式</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151704396.png" alt=""></p><h2 id="输入输出">输入输出</h2><h3 id="c输入">c输入</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151712088.png" alt=""></p><h3 id="c-输入">c++输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; str;</span><br><span class="line"></span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">mon = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151724063.png" alt=""></p><p>ctrl+z+换行结束输入</p><blockquote><p>为什么可以用上边循环的写法呢？是因为cin的对象可以隐式类型转换成bool（调用operator bool），在流里面读到错误或者结束标志的时候，会返回false</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151732425.png" alt=""></p><p>举例详解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a)  <span class="comment">//这里前边加上explict，下边 A aa1 = 1 代码就编不过去了</span></span><br><span class="line">:_a(a)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="comment">//如果这个前边加explict那么int i = aa1也不行，但是可以强转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 内置类型 转换成自定义类型</span></span><br><span class="line">A aa1 = <span class="number">1</span>; <span class="comment">// 隐式类型转换 用1构造A临时对象，再拷贝构造aa1，优化后直接1构造aa1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型 转换成内置类型</span></span><br><span class="line"><span class="type">int</span> i = aa1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件IO">文件IO</h2><blockquote><p>C++根据文件内容的数据格式分为二进制文件和文本文件</p></blockquote><p>定义一个文件流对象</p><ul><li>ifstream ifile(只输入用)</li><li>ofstream ofile(只输出用)</li><li>fstream iofile(既输入又输出用)</li></ul><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;test.cpp&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> ch = ifs.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ch;</span><br><span class="line">ch = ifs.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这段程序可以读取当前文件的内容</code></pre><p>C++特有的优点：</p><p>对内置的类型</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151927497.png" alt=""></p><p>对自定义的类型：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151934569.png" alt=""></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151935531.png" alt=""></p><pre><code>前题是自定义的类型支持流提取，这样对自定义类型的读写通过流的方式就非常的方便了。</code></pre><blockquote><p>两种读写方式对比</p></blockquote><ol><li>二进制读写：在内存如何存储，就如何写到磁盘文件<br>优点：快<br>缺点：写出去内容看不见</li><li>文本读写：对象数据序列化字符串写出来，读回来也是字符串，反序列化转成对象数据<br>优点：可以看见写出去是什么<br>缺点：存在一个转换过程，要慢一些</li></ol><h3 id="二进制读写">二进制读写</h3><blockquote><p>一个关于二进制读取string类型的坑</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ServerInfo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//char _address[32];</span></span><br><span class="line">string _address; <span class="comment">// 换成string 类型</span></span><br><span class="line"><span class="type">int</span> _port;  <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">Date _date;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ConfigManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConfigManager</span>(<span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;server.config&quot;</span>)</span><br><span class="line">:_filename(filename)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteBin</span><span class="params">(<span class="type">const</span> ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(_filename, ios_base::out | ios_base::binary)</span></span>;</span><br><span class="line">ofs.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;info, <span class="built_in">sizeof</span>(info));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReadBin</span><span class="params">(ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(_filename, ios_base::in | ios_base::binary)</span></span>;</span><br><span class="line">ifs.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;info, <span class="built_in">sizeof</span>(info));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string _filename; <span class="comment">// 配置文件</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 二进制写出去</span></span><br><span class="line"><span class="comment">//ServerInfo winfo = &#123; &quot;127.0.0.1&quot;, 888 &#125;;</span></span><br><span class="line"><span class="comment">//ServerInfo winfo = &#123; &quot;https://legacy.cplusplus.com/reference/istream/istream/read/&quot;, 888 &#125;;</span></span><br><span class="line"><span class="comment">//ConfigManager cm;</span></span><br><span class="line"><span class="comment">//cm.WriteBin(winfo);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制的读</span></span><br><span class="line">ServerInfo rinfo;</span><br><span class="line">ConfigManager cm;</span><br><span class="line">cm.<span class="built_in">ReadBin</span>(rinfo);</span><br><span class="line">cout &lt;&lt; rinfo._address &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rinfo._port &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>情况1、写入字符较短时</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152109265.png" alt=""></p><pre><code>结果虽然读取成功，但是程序出现了问题，退出码不是0</code></pre><blockquote><p>情况2、写入字符串较长时</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152111415.png" alt=""></p><pre><code>可以看到address直接读取报错</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152116889.png" alt=""></p><p>原因是当address比较长的时候，string对象，字符串会存在堆里面，ptr指针指向这个字符串，但是写到文件里面的时候，写的不是堆的内存，而是ptr这个地址。</p><p>二进制读写，不大适合有在堆上申请数据类型的</p><h3 id="文本读写">文本读写</h3><p>下边是文本读写的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*void WriteText(const ServerInfo&amp; info)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ofstream ofs(_filename, ios_base::out);</span></span><br><span class="line"><span class="comment">ofs.write(info._address.c_str(), info._address.size());</span></span><br><span class="line"><span class="comment">ofs.put(&#x27;\n&#x27;);</span></span><br><span class="line"><span class="comment">const string str = to_string(info._port);</span></span><br><span class="line"><span class="comment">ofs.write(str.c_str(), str.size());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void ReadText(ServerInfo&amp; info)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ifstream ifs(_filename, ios_base::in | ios_base::binary);</span></span><br><span class="line"><span class="comment">char buff[128];</span></span><br><span class="line"><span class="comment">ifs.getline(buff, 128);</span></span><br><span class="line"><span class="comment">info._address = buff;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ifs.getline(buff, 128);</span></span><br><span class="line"><span class="comment">info._port = stoi(buff);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteText</span><span class="params">(<span class="type">const</span> ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(_filename, ios_base::out)</span></span>;</span><br><span class="line">ofs &lt;&lt; info._address &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; info._port &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; info._date &lt;&lt; endl; <span class="comment">//这里是日期类的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReadText</span><span class="params">(ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(_filename, ios_base::in | ios_base::binary)</span></span>;</span><br><span class="line">ifs &gt;&gt; info._address &gt;&gt; info._port &gt;&gt; info._date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stringstream">stringstream</h2><p>一个例子：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152147060.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ChatInfo</span></span><br><span class="line">&#123;</span><br><span class="line">string _name; <span class="comment">// 名字</span></span><br><span class="line"><span class="type">int</span> _id;      <span class="comment">// id</span></span><br><span class="line">Date _date;   <span class="comment">// 时间</span></span><br><span class="line">string _msg;  <span class="comment">// 聊天信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">ChatInfo winfo = &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">135246</span>, &#123; <span class="number">2022</span>, <span class="number">4</span>, <span class="number">10</span> &#125;, <span class="string">&quot;晚上一起看电影吧&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//ostringstream oss;</span></span><br><span class="line">stringstream oss;</span><br><span class="line">oss &lt;&lt; winfo._name &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._id &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._date &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str = oss.<span class="built_in">str</span>();</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络传输str，另一端接收到了字符串串信息数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">ChatInfo rInfo;</span><br><span class="line"><span class="comment">//istringstream iss(str);</span></span><br><span class="line"><span class="function">stringstream <span class="title">iss</span><span class="params">(str)</span></span>;</span><br><span class="line">iss &gt;&gt; rInfo._name;</span><br><span class="line">iss &gt;&gt; rInfo._id;</span><br><span class="line">iss &gt;&gt; rInfo._date;</span><br><span class="line">iss &gt;&gt; rInfo._msg;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rInfo._date &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rInfo._name &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; rInfo._id &lt;&lt; <span class="string">&quot;]:&gt;&quot;</span> &lt;&lt; rInfo._msg &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分割字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(<span class="string">&quot;sad ad fsd&quot;</span>)</span></span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++类型转换</title>
      <link href="/posts/3229432098/"/>
      <url>/posts/3229432098/</url>
      
        <content type="html"><![CDATA[<h1>C语言中的类型转换</h1><h2 id="隐式类型转换">隐式类型转换</h2><blockquote><p>隐式类型转换（意义相近的类型）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 隐式类型转换(意义相近的类型)</span></span><br><span class="line"><span class="type">double</span> d = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %.2f\n&quot;</span>, i, d);</span><br></pre></td></tr></table></figure><h2 id="显示类型转换">显示类型转换</h2><blockquote><p>显示的强制类型转换(意义不相近的类型，值转换后有意义)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int address = p; //这样没法隐式类型转换会报错</span></span><br><span class="line"><span class="type">int</span> address = (<span class="type">int</span>)p; <span class="comment">//强制类型转换没问题</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x, %d\n&quot;</span>, p, address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>C++强制类型转换</h1><blockquote><p>c++也支持c的类型转换，但是c++为了加强类型转换的可视性，引入了四种命名的强制类型转换操作符</p></blockquote><h2 id="static-cast">static_cast</h2><blockquote><p>这个就像c中的隐式类型转换，只不过显示的写了出来，static_cast用于非多态类型的转换（静态转换），编译器隐式执行的任何类型转换都可用static_cast，但它不能用于两个不相关的类型进行转换</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> d = <span class="number">12.34</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reinterpret-cast">reinterpret_cast</h2><blockquote><p>类似于c的显示强制类型的转换，一般用于将一种类型转换为另一种不同的类型</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(a);  <span class="comment">// 把int 强转为 int*</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-cast">const_cast</h2><blockquote><p>能够删除变量的const属性</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//int* p = const_cast&lt;int*&gt;(&amp;a);</span></span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;a; <span class="comment">// c的那一套也可以</span></span><br><span class="line">*p = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上边的代码会出现一个问题，就是运行结果显示，a还是2，不过当我们打开监视窗口可以看到a其实已经被改成3了，这是什么原因呢？</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301131530309.png" alt=""></p><pre><code>a被const修饰，编译器以为不会被修改，所以加载到寄存器，虽然内存中已经被改了但是寄存器里面的还是2，cout的时候直接去寄存器读，所以打印出来是2</code></pre><p>我们可以在定义a变量的时候加上 volatile关键字，这样编译器处理的时候就会去内存中读取数据，这样，运行结果就变成3 3了。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301131535214.png" alt=""></p><p>注：</p><ol><li>兼容c隐式类型转换和强制类型转换</li><li>期望不要再用了，最好用规范的cpp显示强制类型转换</li><li>static_cast（隐式类型转换）、reinterpret_cast、const_cast（强制类型转换）</li></ol><h2 id="dynamic-cast">dynamic_cast</h2><blockquote><p>用于将一个父类对象的指针或者引用转换为子类的指针或者引用（动态转换）</p></blockquote><p><strong>向上转型</strong>：子类对象指针/引用-&gt;父类指针/引用  （不需要转换，赋值兼容规则）<br><strong>向下转型</strong>：父类对象指针/引用-&gt;子类指针/引用  （用dynamic_cast转型是安全的）</p><ol><li>dynamic_cast只能用于父类含有虚函数的类</li><li>dynamic_cast会先检查是否能转换成功，能成功则转换，不能则返回0</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A*指针pa有可能指向父类，有可能指向子类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(A* pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果pa是指向子类，那么可以转换，转换表达式返回正确的地址</span></span><br><span class="line"><span class="comment">// 如果pa是指向父类，那么不能转换，转换表达式返回nullptr</span></span><br><span class="line">B* pb = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(pa); <span class="comment">// 安全的</span></span><br><span class="line"><span class="comment">//B* pb = (B*)pa;             // 不安全</span></span><br><span class="line"><span class="keyword">if</span> (pb)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;转换成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">pb-&gt;_a++;</span><br><span class="line">pb-&gt;_b++;</span><br><span class="line">cout &lt;&lt; pb-&gt;_a &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; pb-&gt;_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;转换失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">pa-&gt;_a++;</span><br><span class="line">cout &lt;&lt; pa-&gt;_a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A aa;</span><br><span class="line"><span class="comment">// 父类对象无论如何都是不允许转换成子类对象的</span></span><br><span class="line"><span class="comment">/*B bb = dynamic_cast&lt;B&gt;(aa);</span></span><br><span class="line"><span class="comment">B bb = (B)aa;*/</span></span><br><span class="line">B bb;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fun</span>(&amp;aa);</span><br><span class="line"><span class="built_in">fun</span>(&amp;bb);</span><br><span class="line"><span class="comment">//fun(nullptr); 转换失败并且报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细节部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a1 = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a2 = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A1, <span class="keyword">public</span> A2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B bb; <span class="comment">//定义子类对象</span></span><br><span class="line">A1* ptr1 = &amp;bb;</span><br><span class="line">A2* ptr2 = &amp;bb;</span><br><span class="line">cout &lt;&lt; ptr1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ptr2 &lt;&lt; endl &lt;&lt; endl;  <span class="comment">//这两个地址是不同的</span></span><br><span class="line"></span><br><span class="line">B* pb1 = (B*)ptr1;</span><br><span class="line">B* pb2 = (B*)ptr2;</span><br><span class="line">cout &lt;&lt; pb1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pb2 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">B* pb3 = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(ptr1);</span><br><span class="line">B* pb4 = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(ptr2);</span><br><span class="line">cout &lt;&lt; pb3 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pb4 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151637140.png" alt=""></p><pre><code>可以看到，强转成子类指针，和dynamic_cast都可以将指针位置偏移到头上</code></pre><p>总结：</p><ul><li>如果有个子类的对象，将地址传给一个函数，函数形参是父类的指针，那么函数内部可以将这个指针重新安全的转成子类的指针。</li><li>普通的父类指针强转成子类可能有风险，如果父类的指针本来指向的对象就是父类的对象，那么将这个指针转换成子类，会有越界的风险。</li></ul><h1>RTTI</h1><blockquote><p>Run-time Type identification ：运行时类型识别</p></blockquote><p>c++通过以下方式支持RTTI</p><ol><li>typeid运算符   (获取对象类型的字符串)</li><li>dynamic_cast运算符 （识别父类的指针是指向父类对象还是子类对象）</li><li>decltype   （推导一个对象类型，这个类型可以用来定义另一个对象）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/posts/299414317/"/>
      <url>/posts/299414317/</url>
      
        <content type="html"><![CDATA[<h2 id="继承的概念及定义">继承的概念及定义</h2><h3 id="继承概念">继承概念</h3><p>继承(inheritance)机制是面向对象程序设计使代码可以复用的最重要的手段，它允许程序员在保 持原有类特性的基础上进行扩展，增加功能，这样产生新的类，称派生类。继承呈现了面向对象 程序设计的层次结构，体现了由简单到复杂的认知过程。以前我们接触的复用都是函数复用，继承是类设计层次的复用</p><h3 id="继承定义">继承定义</h3><h4 id="定义格式">定义格式</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665842803037-eb12fae7-3e8c-4243-a915-09d684e626bd.png#averageHue=%23fbfbfb&amp;clientId=ucddb3e9e-e17a-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=369&amp;id=ude023e28&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=554&amp;originWidth=920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25512&amp;status=done&amp;style=none&amp;taskId=ue258894c-c700-4c08-af2f-16f2fe31140&amp;title=&amp;width=613.3333333333334" alt="image.png"><br>继承后，父类的成员，包括成员函数和成员变量，都会变成子类的一部分。</p><h4 id="默认继承方式">默认继承方式</h4><p>在使用继承时，可以不指定继承方式，使用关键字class时默认的继承方式是private，使用struct时，默认的继承方式是public</p><h4 id="继承关系和访问限定符">继承关系和访问限定符</h4><p>访问限定符：</p><ul><li>public</li><li>protected</li><li>private</li></ul><p>继承关系</p><ul><li>public</li><li>protected</li><li>private</li></ul><p>私有成员的意义：不想被子类继承的成员，可以设计成私有<br>基类中想给子类复用，但是又不想暴露直接访问的成员，就应该定义成保护</p><h4 id="继承基类成员访问方式的变化">继承基类成员访问方式的变化</h4><table><thead><tr><th>类成员/继承方式</th><th>public继承</th><th>protected继承</th><th>private继承</th></tr></thead><tbody><tr><td>基类的public成员</td><td>派生类的public成员</td><td>派生类的protected成员</td><td>派生类的private成员</td></tr><tr><td>基类的protected成员</td><td>派生类的protected成员</td><td>派生类的protected成员</td><td>派生类的private成员</td></tr><tr><td>基类的private成员</td><td>在派生类不可见</td><td>在派生类不可见</td><td>在派生类不可见</td></tr></tbody></table><p>:::info<br>取成员限定符和继承方式的较小<br>:::</p><blockquote><p>protected/private  类外边不能访问 类里面可以访问<br>不可见                         隐身，类里面外面都无法访问</p></blockquote><h4 id="总结">总结</h4><ul><li>基类private成员在派生类中无论以什么方式继承都是不可见的。这里的不可见是指基类的私<br>有成员还是被继承到了派生类对象中，但是语法上限制派生类对象不管在类里面还是类外面<br>都不能去访问它。</li><li>基类private成员在派生类中是不能被访问，如果基类成员不想在类外直接被访问，但需要在<br>派生类中能访问，就定义为protected。可以看出保护成员限定符是因继承才出现的。</li><li>实际上面的表格我们进行一下总结会发现，基类的私有成员在子类都是不可见。基类的其他<br>成员在子类的访问方式 == Min(成员在基类的访问限定符，继承方式)，public &gt; protected&gt;private。</li><li>使用关键字class时默认的继承方式是private，使用struct时默认的继承方式是public，不过<br>最好显示的写出继承方式。</li><li>在实际运用中一般使用都是public继承，几乎很少使用protetced/private继承，也不提倡<br>使用protetced/private继承，因为protetced/private继承下来的成员都只能在派生类的类里<br>面使用，实际中扩展维护性不强</li></ul><h2 id="基和派生类对象赋值转换">基和派生类对象赋值转换</h2><ul><li>派生类对象 可以赋值给 基类的对象 / 基类的指针 / 基类的引用。这里有个形象的说法叫切片<br>或者切割。寓意把派生类中父类那部分切来赋值过去。</li><li>基类对象不能赋值给派生类对象。</li><li>基类的指针或者引用可以通过强制类型转换赋值给派生类的指针或者引用。但是必须是基类<br>的指针是指向派生类对象时才是安全的。这里基类如果是多态类型，可以使用RTTI(RunTime Type Information)的dynamic_cast 来进行识别后进行安全转换。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665911527698-30aebb38-ac6a-4bc6-9963-62f385ae1e2d.png#averageHue=%23fdf7eb&amp;clientId=uda2bf642-89db-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=524&amp;id=uedf0ce47&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=786&amp;originWidth=554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43417&amp;status=done&amp;style=none&amp;taskId=u10f1346e-edeb-46c9-ad83-93a2d7d8c24&amp;title=&amp;width=369.3333333333333" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line">string _sex;  <span class="comment">// 性别</span></span><br><span class="line"><span class="type">int</span>_age; <span class="comment">// 年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _No; <span class="comment">// 学号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student sobj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.子类对象可以赋值给父类对象/指针/引用</span></span><br><span class="line"><span class="comment">// 这里虽然是不同类型，但是不是隐式类型转换</span></span><br><span class="line"><span class="comment">// 这里算是一个特殊支持，语法天然支持的</span></span><br><span class="line">Person pobj = sobj;</span><br><span class="line">Person* pp = &amp;sobj;</span><br><span class="line">Person&amp; rp = sobj;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span>&amp; d = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sobj = (Student)pobj;   //强转成派生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：基类的对象不能赋值给派生类对象，基类的指针可以通过强制类型转换赋值给派生类的指针，但是此时基类的指针必须是指向派生类的对象才是安全的。</p><h2 id="继承中的作用域">继承中的作用域</h2><ul><li>在继承体系中，基类和派生类都有独立的作用域</li><li>子类和父类中有同名成员，子类成员将屏蔽父类对同名成员的直接访问，这种情况叫隐藏，也叫重定义。（在子类成员函数中，可以使用 基类::基类成员 显示访问）</li><li>注意在实际中在继承体系里最好不要定义同名的成员</li><li>需要注意的是如果是成员函数的隐藏，只需要函数名相同就构成隐藏</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="type">int</span> _num;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _num;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;child&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s;</span><br><span class="line">s._num = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; s._num &lt;&lt; endl;</span><br><span class="line">s.Person::_num = <span class="number">2</span>;</span><br><span class="line">cout &lt;&lt; s.Person::_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">fun</span>();</span><br><span class="line">s.Person::<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="派生类的默认成员函数">派生类的默认成员函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665924224019-25167b1f-d0d9-41fb-8a1e-3036a3938fc3.png#averageHue=%23d6e81f&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=170&amp;id=ue92dcd90&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=255&amp;originWidth=913&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69980&amp;status=done&amp;style=none&amp;taskId=u3248b978-23c3-41d1-b69d-a99b288c1ca&amp;title=&amp;width=608.6666666666666" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Person(const char* name = &quot;peter&quot;)</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> <span class="type">char</span>* name)</span><br><span class="line">: _name(name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p)</span><br><span class="line">: _name(p._name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person(const Person&amp; p)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person operator=(const Person&amp; p)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;p)</span><br><span class="line">_name = p._name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Person()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> num)</span><br><span class="line">:<span class="built_in">Person</span>(name)   <span class="comment">//父类没有默认构造，初始化列表规定这么写，就像匿名对象那样</span></span><br><span class="line">, _num(num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> Student&amp; s)</span><br><span class="line">:<span class="built_in">Person</span>(s) <span class="comment">//切片  </span></span><br><span class="line">, _num(s._num)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Student(const Student&amp; s)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Student&amp; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">Person::<span class="keyword">operator</span>=(s);</span><br><span class="line"></span><br><span class="line">_num = s._num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Student&amp; operator=(const Student&amp; s)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类的析构的函数跟父类析构函数构成隐藏。</span></span><br><span class="line"><span class="comment">// 由于后面多态的需要，析构函数名字会统一处理成destructor()</span></span><br><span class="line">~<span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 不需要显示调用父类析构函数</span></span><br><span class="line"><span class="comment">// 每个子类析构函数后面，会自动调用父类析构函数，这样才能保证先析构子类，再析构父类</span></span><br><span class="line"><span class="comment">//Person::~Person();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...处理子类自己的</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Student()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student* operator&amp;()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return this;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int* _ptr;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student s2(s1);</span></span><br><span class="line">Student s2 = s1;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">s3</span><span class="params">(<span class="string">&quot;李四&quot;</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s1 = s3;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &amp;s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665923523186-23fc5042-b349-4418-abc2-3f816c892f7f.png#averageHue=%23272625&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=277&amp;id=ua98444aa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=415&amp;originWidth=633&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31156&amp;status=done&amp;style=none&amp;taskId=ucc19a40c-5c37-435c-b800-e4ef171ef8d&amp;title=&amp;width=422" alt="image.png"></p><blockquote><p>构造时，先调用父类的构造，再调用子类的，析构时先析构子，再析构父类</p></blockquote><h3 id="子类默认生成的构造函数">子类默认生成的构造函数</h3><ul><li>自己的成员，跟类和对象一样，内置类型不处理，自定义类型调用他的默认构造</li><li>继承父类成员必须调用父类构造函数初始化</li></ul><h3 id="编译器默认生成的析构函数">编译器默认生成的析构函数</h3><ul><li>自己的成员， 内置类型不处理，自定义类型调用它的析构</li><li>继承的成员，调用父类析构函数处理</li></ul><hr><h3 id="编译生成的默认拷贝构造">编译生成的默认拷贝构造</h3><ul><li>自己成员，跟类和对象一样（内置类型，值拷贝，自定义类型调用它的拷贝构造）</li><li>继承的父类成员，必须调用父类拷贝构造初始化</li></ul><h3 id="编译器默认生成的operator">编译器默认生成的operator=</h3><p>同上</p><hr><h3 id="总结-2">总结</h3><ul><li>派生类的构造函数调用时，会自动调用基类的构造函数初始化基类的一部分成员，如果基类中没有默认构造函数则必须在派生类构造函数的初始化列表中显示调用基类的构造函数</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665924438484-50f4e250-c115-464a-ab08-7aa2536ecf3e.png#averageHue=%23fdfaf9&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=161&amp;id=sgyNG&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=241&amp;originWidth=650&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25919&amp;status=done&amp;style=none&amp;taskId=uac21a5c0-4078-4e18-90a7-bc711541814&amp;title=&amp;width=433.3333333333333" alt="image.png"></p><ul><li>派生类的拷贝构造函数必须调用基类的构造函数完成基类成员的拷贝构造</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665924541930-3bcafcf9-c9a3-4fb7-9d91-74cea67322fd.png#averageHue=%23fdfbfa&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=185&amp;id=ud658102a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=277&amp;originWidth=850&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31291&amp;status=done&amp;style=none&amp;taskId=u2622b831-0296-418f-81e4-0668e6475a3&amp;title=&amp;width=566.6666666666666" alt="image.png"></p><ul><li>派生类的赋值运算符重载函数必须调用基类的赋值运算符重载函数完成基类成员的赋值</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665924642477-58801ec0-cd39-4c14-800d-68029738993d.png#averageHue=%23fefcfc&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=349&amp;id=ubd1d7b31&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=524&amp;originWidth=1076&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52453&amp;status=done&amp;style=none&amp;taskId=u1e8b2984-42cd-4bfe-ab36-30167408283&amp;title=&amp;width=717.3333333333334" alt="image.png"></p><ul><li>派生类的析构函数会会在被调用完成后自动调用基类的析构函数清理基类成员</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665924714654-705f1273-b934-4799-a0fc-b63b87e4d831.png#averageHue=%23fefdfd&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=243&amp;id=u278f7ef6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=364&amp;originWidth=1434&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76014&amp;status=done&amp;style=none&amp;taskId=ua2ce9e09-5343-4181-86f3-e761020ab72&amp;title=&amp;width=956" alt="image.png"></p><ul><li>派生对象初始化时，会先调用基类的构造函数，再调用派生类的构造函数</li></ul><blockquote><p>另外几点注意</p></blockquote><ol><li>派生类和基类的赋值运算符重载函数因为函数名相同构造隐藏，因此在派生类当中，调用基类的赋值运算符重载函数时，需要使用作用域限定符指定调用</li><li>由于多态的某些原因，任何类的析构函数名都被统一处理为destructor()，因此，派生类和基类的析构函数就会因为函数名相同构成隐藏，如若我们需要在某处显示调用基类的析构函数，那么就要使用作用域限定符指定调用</li><li>在派生类的拷贝构造函数和operator=当中调用基类的拷贝构造函数，传参方式都是切片行为，都是将派生类对象直接赋值给基类的引用</li><li>基类的构造、拷贝构造、赋值我们都可以在派生类中自行调用，但是基类析构是当派生类析构函数调用后由编译器自动调用的，如果我们显示调用基类析构函数，会导致基类被析构多次</li><li>创建派生类对象时是先创建基类成员再创建派生类成员，编译器为了保证先定义的后析构，所以自动调用基类的析构函数</li></ol><h2 id="继承与友元">继承与友元</h2><p>友元关系不能继承，基类的友元函数，不能访问派生类的私有和保护</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> Person&amp; p, <span class="type">const</span> Student&amp; s)</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> Person&amp; p, <span class="type">const</span> Student&amp; s)</span></span>; <span class="comment">//这里不加会报错</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _stuNum; <span class="comment">// 学号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">(<span class="type">const</span> Person&amp; p, <span class="type">const</span> Student&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; p._name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s._stuNum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">Student s;</span><br><span class="line"><span class="built_in">Display</span>(p, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与静态成员">继承与静态成员</h2><p>若基类中定义了一个static静态成员变量，那么在整个继承体系中只有一个该静态成员，无论派生出多少个子类，都只有一个static成员实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123; ++_count; &#125;</span><br><span class="line"><span class="comment">//protected:</span></span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _count; <span class="comment">// 统计人的个数。</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::_count = <span class="number">0</span>;   <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _stuNum; <span class="comment">// 学号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">Student s;</span><br><span class="line"></span><br><span class="line">p._name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">cout &lt;&lt; s._name &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; Student::_count &lt;&lt; endl;</span><br><span class="line">++Person::_count;</span><br><span class="line">cout &lt;&lt; Student::_count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &amp;Person::_count &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;Student::_count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：</p><ul><li>子类 count++  父类 也会++</li><li>两个count 地址相同</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665926120982-afd1f668-5895-4c23-b042-5891253899d1.png#averageHue=%23434140&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=117&amp;id=u275c88b4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=176&amp;originWidth=350&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7607&amp;status=done&amp;style=none&amp;taskId=u0b735a34-b8a5-4c78-9dc3-bae9a28d15b&amp;title=&amp;width=233.33333333333334" alt="image.png"></p><h2 id="复杂的菱形继承及菱形虚拟继承">复杂的菱形继承及菱形虚拟继承</h2><h3 id="如何定义一个不能被继承的类">如何定义一个不能被继承的类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// C++98</span></span><br><span class="line"><span class="comment">// 1、父类构造函数私有-- 子类是不可见</span></span><br><span class="line"><span class="comment">// 2、子类对象实例化，无法调用构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11</span></span><br><span class="line"><span class="comment">// final</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//B bb;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665926275604-95484c9a-7dfe-4e5a-ac44-6069a199abba.png#averageHue=%236babdf&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=49&amp;id=ue4cf0d64&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=74&amp;originWidth=1462&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14903&amp;status=done&amp;style=none&amp;taskId=ubf9c4de1-9e31-4ece-aefc-d9ce21309b6&amp;title=&amp;width=974.6666666666666" alt="image.png"></p><h3 id="继承方式">继承方式</h3><blockquote><p>单继承：一个子类只有一个直接父类</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665926407861-410505cc-54ef-4f2c-b258-fa75dcae5bbf.png#averageHue=%23f6f6f6&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=440&amp;id=u3930072f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=660&amp;originWidth=1050&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4930&amp;status=done&amp;style=none&amp;taskId=u22cdf83d-7d24-445d-b7a4-60c1bb39e82&amp;title=&amp;width=700" alt="image.png"></p><blockquote><p>多继承：一个子类有两个或两个以上直接父类</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665926491715-d1faab7e-ac2e-462b-9b8a-bcb641e79382.png#averageHue=%23f7f7f7&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=341&amp;id=u186177c4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4295&amp;status=done&amp;style=none&amp;taskId=uddca721d-77c1-467c-9cec-0ca4dc91358&amp;title=&amp;width=649.3333333333334" alt="image.png"></p><blockquote><p>菱形继承：多继承的一种特殊情况</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665926639901-30398b6a-75ad-4a1c-a4e4-6acbe0258f5e.png#averageHue=%23f8f8f8&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=527&amp;id=uc7e73fba&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=791&amp;originWidth=955&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6898&amp;status=done&amp;style=none&amp;taskId=ue910af18-9434-4c87-b8e7-42cbf793754&amp;title=&amp;width=636.6666666666666" alt="image.png"><br>菱形继承的方式存在数据冗余和二义性的问题</p><h3 id="一个题">一个题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="keyword">public</span>:  <span class="type">int</span> _b1; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; <span class="keyword">public</span>:  <span class="type">int</span> _b2; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derive</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123; <span class="keyword">public</span>: <span class="type">int</span> _d; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Derive d;</span><br><span class="line">Base1* p1 = &amp;d;</span><br><span class="line">Base2* p2 = &amp;d;</span><br><span class="line">Derive* p3 = &amp;d;</span><br><span class="line"></span><br><span class="line">d._b1 = <span class="number">1</span>;</span><br><span class="line">d._b2 = <span class="number">2</span>;</span><br><span class="line">d._d = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>P1 P2 P3的关系： “先使用了低地址”<br>p1==p3&lt;p2</p><p><strong>解释：</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665927761574-109c0daa-a64d-4ec2-bbe9-45e38bb19a86.png#averageHue=%23f6f6f6&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=213&amp;id=u4533b4cf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=319&amp;originWidth=1360&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13067&amp;status=done&amp;style=none&amp;taskId=u4141fed7-a89e-4356-a6ed-b01929f0ef3&amp;title=&amp;width=906.6666666666666" alt="image.png"><br><strong>该类对象模型：</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665927183117-40ca8bae-cd49-4b91-996f-06263871b07a.png#averageHue=%23fefefe&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=500&amp;id=u3aa93300&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=750&amp;originWidth=822&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15161&amp;status=done&amp;style=none&amp;taskId=u545af6a6-487d-4e0d-8c91-d2cb5c94944&amp;title=&amp;width=548" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665927302508-4e02ebc3-cecc-410a-9e73-a5addf5a7c05.png#averageHue=%23f0c782&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=147&amp;id=u927f6c7f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=220&amp;originWidth=492&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13295&amp;status=done&amp;style=none&amp;taskId=ua3c395ac-74f6-4cbc-91c0-47180a97f08&amp;title=&amp;width=328" alt="image.png"></p><p>&amp;d 看到内存信息，01地址最低，也就是_b1的地址最低，base1是先继承的，所以地址最低，我们传统的想法是栈是向下增长，先使用高地址再使用低地址，但是在这个对象里成员就像倒着存一样</p><h3 id="菱形继承的问题">菱形继承的问题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int _age;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _num; <span class="comment">//学号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _id; <span class="comment">// 职工编号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Assistant</span> : <span class="keyword">public</span> Student, <span class="keyword">public</span> Teacher</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _majorCourse; <span class="comment">// 主修课程</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Assistant at;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菱形继承的二义性问题</span></span><br><span class="line"><span class="comment">// 数据冗余</span></span><br><span class="line"><span class="comment">//at._name = &quot;张三&quot;;</span></span><br><span class="line">at.Student::_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">at.Teacher::_name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二义性可以通过指定类域解决，但是数据冗余的问题还是无法解决，Assistant这个类中有两份的_name.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665928284321-c1616231-08cd-4c01-9c15-460c7727b0ce.png#averageHue=%23f9f8f6&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=193&amp;id=u4fe948a1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=290&amp;originWidth=869&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26788&amp;status=done&amp;style=none&amp;taskId=u42b53a14-4f5b-4850-8c9c-3001e700fd0&amp;title=&amp;width=579.3333333333334" alt="image.png"></p><blockquote><p>这时候需要用菱形虚拟继承，用法就是在继承方式前边加一个virtual，在菱形继承的腰部加virtual</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string _name; <span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int _age;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _num; <span class="comment">//学号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _id; <span class="comment">// 职工编号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Assistant</span> : <span class="keyword">public</span> Student, <span class="keyword">public</span> Teacher</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _majorCourse; <span class="comment">// 主修课程</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Assistant at;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菱形虚拟继承解决了二义性和数据冗余</span></span><br><span class="line">at._name = <span class="string">&quot;小张&quot;</span>;</span><br><span class="line">at.Student::_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">at.Teacher::_name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665928541044-58906662-6534-4929-a125-f71ed144504f.png#averageHue=%23fcfaf9&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=451&amp;id=u505afb34&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=677&amp;originWidth=2084&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=166970&amp;status=done&amp;style=none&amp;taskId=u0a404cfc-23d6-4b61-a3ee-974587803bc&amp;title=&amp;width=1389.3333333333333" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665928728293-6786235e-8f54-4ebf-b745-42eee72ca4f8.png#averageHue=%23fcfaf8&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=369&amp;id=u06883c63&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=553&amp;originWidth=2083&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=142280&amp;status=done&amp;style=none&amp;taskId=u9d3c0d5f-83fd-45c0-aff8-ab9ca53cf71&amp;title=&amp;width=1388.6666666666667" alt="image.png"></p><p>这里解决了数据冗余的问题，因为_name都是一个</p><h3 id="虚拟继承的对象模型">虚拟继承的对象模型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class B : public A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class C : public A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">D d;</span><br><span class="line">d.B::_a = <span class="number">1</span>;</span><br><span class="line">d.C::_a = <span class="number">2</span>;</span><br><span class="line">d._a = <span class="number">0</span>;</span><br><span class="line">d._b = <span class="number">3</span>;</span><br><span class="line">d._c = <span class="number">4</span>;</span><br><span class="line">d._d = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">B b = d;</span><br><span class="line">B* pb = &amp;d;</span><br><span class="line"></span><br><span class="line">C c = d;</span><br><span class="line">C* pc = &amp;d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有虚拟继承</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665929216002-77d2109f-1280-486a-96e7-f30915b7517d.png#averageHue=%23e1be87&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=737&amp;id=ua5ea4805&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1105&amp;originWidth=2077&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=258149&amp;status=done&amp;style=none&amp;taskId=ud8ef7aeb-9160-48cc-be1e-0e2c6c56464&amp;title=&amp;width=1384.6666666666667" alt="image.png"><br>我们来看内存的具体信息<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665930343351-8fa3f176-7e43-4803-87a5-f421bc79d7e9.png#averageHue=%23fcfaf7&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=467&amp;id=uae4d76fa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=700&amp;originWidth=1957&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=97769&amp;status=done&amp;style=none&amp;taskId=u0761c169-fa35-4371-b9f6-72127f42028&amp;title=&amp;width=1304.6666666666667" alt="image.png"></p><p>虚拟继承后类对象模型变成了如下<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665930553735-f608a98b-8117-440e-aa4b-242da677bd08.png#averageHue=%23fefdfd&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=507&amp;id=u8e90a8c2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=761&amp;originWidth=903&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10332&amp;status=done&amp;style=none&amp;taskId=ub30041f5-98e6-4109-9076-6fc6db9a7db&amp;title=&amp;width=602" alt="image.png"><br>对象里面有了两个指针，叫做虚基表指针，他们分别指向一个虚基表，虚基表中包含两个数据，第一个是为多态的虚表预留的存偏移量的位置，第二个数据就是当前类对象位置距离公共虚基类的偏移量</p><p><strong>如果没有虚拟继承</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665930786365-d351fcb7-1648-4c4b-b52c-7baf6d006387.png#averageHue=%23fcfcfb&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=274&amp;id=u82e87a07&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=411&amp;originWidth=1246&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35325&amp;status=done&amp;style=none&amp;taskId=ue79b9a48-1be0-434b-a73c-d38be29be6b&amp;title=&amp;width=830.6666666666666" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665930848594-a73182f0-67fa-44d2-bbd0-67e7249ae9c0.png#averageHue=%23fefdfd&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=485&amp;id=ud37b8164&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=727&amp;originWidth=723&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9686&amp;status=done&amp;style=none&amp;taskId=u67aee36b-3cdf-4e57-8ff9-f334d68402e&amp;title=&amp;width=482" alt="image.png"><br>这里有个问题，好像使用虚拟继承和不用虚拟继承空间是消耗了相同的，但是，如果A的_a是个大对象，就会省空间。<br>注：如果，将D类对象，赋值给B类对象，在这个切片过程中，就需要通过虚基表中的第二个数据找到公共虚基类A的成员，得到切片后，该B类对象在内存中仍然保持这种分布。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665931305427-e4136cd3-ae7a-44c6-bc95-c2608d9ad85f.png#averageHue=%23fdfdfd&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=218&amp;id=u6318824f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=327&amp;originWidth=439&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17436&amp;status=done&amp;style=none&amp;taskId=u29ac3bc0-c7a4-46c6-b52d-d4374cf633b&amp;title=&amp;width=292.6666666666667" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665931293362-77525e34-b172-4107-8d56-fcc8b432e9cb.png#averageHue=%23f3e8d8&amp;clientId=u9a15f95a-cdec-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=128&amp;id=u93c161c3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=192&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11212&amp;status=done&amp;style=none&amp;taskId=u55bee722-0a8f-4764-9058-9478555dc00&amp;title=&amp;width=248" alt="image.png"></p><h2 id="继承的总结和反思">继承的总结和反思</h2><p>所以一般不建议设计出多继承，一定不要设计出菱形继承。否则在复杂度及性能上都有问题。多继承可以认为是C++的缺陷之一，很多后来的OO语言都没有多继承，如Java。</p><h3 id="继承和组合">继承和组合</h3><ul><li>public继承是一种is-a的关系。也就是说每个派生类对象都是一个基类对象。</li><li>组合是一种has-a的关系。假设B组合了A，每个B对象中都有一个A对象。</li></ul><p>继承允许你根据基类的实现来定义派生类的实现。这种通过生成派生类的复用通常被称<br>为白箱复用(white-box reuse)。术语“白箱”是相对可视性而言：在继承方式中，基类的<br>内部细节对子类可见 。继承一定程度破坏了基类的封装，基类的改变，对派生类有很<br>大的影响。派生类和基类间的依赖关系很强，耦合度高。</p><p>对象组合是类继承之外的另一种复用选择。新的更复杂的功能可以通过组装或组合对象<br>来获得。对象组合要求被组合的对象具有良好定义的接口。这种复用风格被称为黑箱复<br>用(black-box reuse)，因为对象的内部细节是不可见的。对象只以“黑箱”的形式出现。<br>组合类之间没有很强的依赖关系，耦合度低。优先使用对象组合有助于你保持每个类被<br>封装。</p><p>实际尽量多去用组合。组合的耦合度低，代码维护性好。不过继承也有用武之地的，有<br>些关系就适合继承那就用继承，另外要实现多态，也必须要继承。类之间的关系可以用<br>继承，可以用组合，就用组合</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29247941/1665932203320-44346fb6-7516-4f7c-98c6-c400b8a66dff.png#averageHue=%23fcfcfc&amp;clientId=uf24a1cd6-4779-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=368&amp;id=ub1ac8a38&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=552&amp;originWidth=1114&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47650&amp;status=done&amp;style=none&amp;taskId=ua8df4665-72a3-45e4-a680-44f1d967f22&amp;title=&amp;width=742.6666666666666" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/posts/4046760165/"/>
      <url>/posts/4046760165/</url>
      
        <content type="html"><![CDATA[<h1>字体</h1><h2 id="斜体">斜体</h2><blockquote><p>两个下划线，或者两个星号</p></blockquote><p><em>斜体</em><br><em>斜体</em></p><h2 id="粗体">粗体</h2><blockquote><p>两个下划线或者两个星号</p></blockquote><p><strong>粗体</strong><br><strong>粗体</strong></p><h2 id="组合">组合</h2><blockquote><p>三个星号，或者三个下划线，粗斜体</p></blockquote><p><em><strong>粗斜体</strong></em></p><h2 id="删除线">删除线</h2><blockquote><p>前后两个~~</p></blockquote><p><s>删除线</s></p><h2 id="下划线">下划线</h2><blockquote><p><u> </u></p></blockquote><p><u> 下划线</u></p><h1>区块</h1><blockquote><p>一个&gt;两个&gt;&gt;三个&gt;&gt;&gt;</p></blockquote><blockquote><p>1</p><blockquote><p>2</p><blockquote><p>3</p></blockquote></blockquote></blockquote><h1>表格</h1><blockquote><p>加 : 可以实现左对齐，右对齐，居中，不加默认左对齐</p></blockquote><table><thead><tr><th style="text-align:left">表头</th><th style="text-align:left">表头</th><th style="text-align:left">表头</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:left">单元格</td><td style="text-align:left">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:left">单元格</td><td style="text-align:left">单元格</td></tr></tbody></table><h1>mermaid</h1><h2 id="流程图">流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">A[Hard] --&gt;|Text| B(Round)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result 1]</span><br><span class="line">C --&gt;|Two| E[Result 2]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">TD</th><th style="text-align:center">TB</th><th style="text-align:center">BT</th><th style="text-align:center">RL</th><th style="text-align:center">LR</th></tr></thead><tbody><tr><td style="text-align:center">上到下</td><td style="text-align:center">上到下</td><td style="text-align:center">下到上</td><td style="text-align:center">右到左</td><td style="text-align:center">左到右</td></tr></tbody></table><h2 id="饼图">饼图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 为什么总是宅在家里？</span><br><span class="line">    &quot;喜欢宅&quot; : 45</span><br><span class="line">    &quot;天气太热&quot; : 70</span><br><span class="line">    &quot;穷&quot; : 500</span><br><span class="line">&quot;关你屁事&quot; : 95</span><br></pre></td></tr></table></figure><h2 id="类图">类图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    Animal &lt;|-- Duck</span><br><span class="line">    Animal &lt;|-- Fish</span><br><span class="line">    Animal &lt;|-- Zebra</span><br><span class="line">    Animal : +int age</span><br><span class="line">    Animal : +String gender</span><br><span class="line">    Animal: +isMammal()</span><br><span class="line">    Animal: +mate()</span><br><span class="line">    class Duck&#123;</span><br><span class="line">      +String beakColor</span><br><span class="line">      +swim()</span><br><span class="line">      +quack()</span><br><span class="line">    &#125;</span><br><span class="line">    class Fish&#123;</span><br><span class="line">      -int sizeInFeet</span><br><span class="line">      -canEat()</span><br><span class="line">    &#125;</span><br><span class="line">    class Zebra&#123;</span><br><span class="line">      +bool is_wild</span><br><span class="line">      +run()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试ing</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊类设计</title>
      <link href="/posts/540862120/"/>
      <url>/posts/540862120/</url>
      
        <content type="html"><![CDATA[<h1>设计不能被拷贝的类</h1><blockquote><p>c++11是下边的用法，c++98就是将拷贝构造变成私有，并且只声明并不实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> val):_val(val)&#123;&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; a) = <span class="keyword">delete</span>;</span><br><span class="line">A&amp; <span class="keyword">operator</span>=(<span class="type">const</span> A&amp; a) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>设计只能在堆上创建的类</h1><blockquote><p>方案1、将析构函数私有化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">~<span class="built_in">HeapOnly</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HeapOnly* hp = <span class="keyword">new</span> HeapOnly;</span><br><span class="line">hp-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方案2、构造函数私有</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> HeapOnly* <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HeapOnly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 防止拷贝</span></span><br><span class="line"><span class="built_in">HeapOnly</span>(<span class="type">const</span> HeapOnly&amp; hp) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">HeapOnly</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HeapOnly* hp = HeapOnly::<span class="built_in">CreatObj</span>();</span><br><span class="line"><span class="keyword">delete</span> hp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>注意：也要把拷贝构造给删除掉</code></pre><h1>设计只能在栈上创建的类</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">StackOnly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">StackOnly</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackOnly sk = StackOnly::<span class="built_in">CreatObj</span>();</span><br><span class="line"><span class="comment">// 避免不了下边的情况</span></span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">copy</span><span class="params">(sk)</span></span>;</span><br><span class="line">StackOnly* copy2 = <span class="keyword">new</span> <span class="built_in">StackOnly</span>(sk);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决new</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> StackOnly <span class="title">CreatObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">StackOnly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> n)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">StackOnly</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是静态区的拷贝构造还是不能被禁止。</p><h1>设计不能被继承的类</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++98中构造函数私有化，派生类中调不到基类的构造函数。则无法继承  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonInherit</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="function"><span class="type">static</span> NonInherit <span class="title">GetInstance</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">NonInherit</span>();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line"><span class="built_in">NonInherit</span>()&#123;&#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在C++11中有了final关键字，修饰类就说明该类不能被继承。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ....  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>设计只能创建一个对象的类（单例）</h1><h2 id="饿汉模式">饿汉模式</h2><blockquote><p>构造函数私有，在静态区创建一个对象，</p></blockquote><ul><li>简单，没有线程安全问题</li><li>一个程序中，多个单例，并且有先后创建初始化的顺序要求时，饿汉无法控制，比如多个文件，就无法控制顺序</li><li>饿汉的单例类，初始化时任务多，会影响程序的启动速度。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> A* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;调用fun()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"><span class="type">static</span> A* _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_a = <span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* p = A::<span class="built_in">getInstance</span>();</span><br><span class="line">p-&gt;<span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉模式">懒汉模式</h2><blockquote><p>第一次使用对象再创建实例对象</p></blockquote><ul><li>可以控制创建的顺序</li><li>不影响启动速度</li><li>相对复杂，有线程安全问题</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> A* <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_a == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_a = <span class="keyword">new</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;调用fun()\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个内嵌垃圾回收类    </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CGarbo</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">CGarbo</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_a)</span><br><span class="line"><span class="keyword">delete</span> _a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"><span class="type">static</span> A* _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A* A::_a = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// 回收对象，main函数结束后，他会调用析构函数，就会释放单例对象</span></span><br><span class="line"><span class="type">static</span> A::CGarbo gc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A* p = A::<span class="built_in">getInstance</span>();</span><br><span class="line">p-&gt;<span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例对象释放">单例对象释放</h2><ul><li>一般情况下，单例对象不需要释放，因为一般整个程序运行期间都可能用它</li><li>单例对象在进程正常结束后，也会资源释放</li><li>有些特殊场景需要释放，比如单例对象析构时，要进行一些持久化操作（往文件数据库写）操作</li><li>释放时，可以做个内部类，如上边代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>智能指针</title>
      <link href="/posts/950606023/"/>
      <url>/posts/950606023/</url>
      
        <content type="html"><![CDATA[<h1>RAII</h1><blockquote><p>在了解智能指针之前，我们需要先要了解RAII，那么什么是RAII呢？RAII是一种利用对象生命周期来控制程序资源（如内存、文件句柄、网络链接、互斥量等）的简单技术</p></blockquote><p>具体来说，是在对象构造时获取资源，对资源的控制管理在整个对象的生命周期内都保持有效，并在对象析构时释放资源，也就是将资源的管理托管给一个对象，这有着一些好处：</p><ul><li>不用显示释放资源</li><li>对象所需的资源在其整个生命周期内始终保持有效</li></ul><h2 id="RAII-引入">RAII-引入</h2><blockquote><p>下边是一段异常相关的代码，main函数调用fun，fun函数先new了块空间，然后调用div函数，但是div函数如果出现除0错误，会抛出异常，直接被main函数捕获，那么fun中的delete就被跳过了。这样导致了内存泄漏问题。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;除0错误&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">div</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上边代码，是有一些方法进行处理的，但是这里可以用RAII的技术解决这个问题，具体看下方代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SmartPtr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">SmartPtr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_ptr)</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;SmartPtr：申请的资源已经释放&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="string">&quot;除0错误&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SmartPtr&lt;<span class="type">int</span>&gt;sp = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">div</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上边场景我们可以设计一个SmartPtr类，这个类构造函数接收一个资源的管理权，析构函数释放这份资源，那么当创建的对象的生命周期结束后，就自动调用析构函数并释放资源。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102206518.png" alt=""></p><h1>智能指针</h1><blockquote><p>上边的SmartPtr类，就是RAII，但是只有管理资源释放的功能，并没有指针解引用和-&gt;的操作，不能对管理的资源进行控制，那么我们如何让SmartPtr支持像指针一样的行为呢？这里我们将引入智能指针的概念，并且简要的模拟四种库的智能指针，理解原理</p></blockquote><p>智能指针的原理如下：</p><ol><li>RAII特性</li><li>重载operator * 和opertaor-&gt;，具有像指针一样的行为。</li></ol><blockquote><p>我们之前实现的SmartPtr其实还存在着其他的问题：就是不能进行拷贝，如果进行拷贝，会出现资源重复释放的问题。</p></blockquote><p>比如下面的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> _b = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SmartPtr&lt;A&gt;<span class="built_in">ap1</span>(<span class="keyword">new</span> A);</span><br><span class="line"></span><br><span class="line">SmartPtr&lt;A&gt;<span class="built_in">ap2</span>(ap1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果也不出意外的报错了。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102243974.png" alt=""></p><h2 id="auto-ptr">auto_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102219593.png" alt=""></p><blockquote><p>针对上边拷贝的问题，auto_ptr提供了它的方案，auto_ptr的实现原理：<strong>管理权转移的思想</strong>，但是这种做法并不太好，你一旦拷贝构造，被拷贝的对象就无法使用了，容易出错。</p></blockquote><p>看一下库的auto_ptr，如果对进行拷贝构造，其实是进行资源的转移</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102236948.png" alt=""></p><p>我们对auto_ptr进行模拟实现，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">auto_ptr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造要进行管理权的转移</span></span><br><span class="line"><span class="built_in">auto_ptr</span>(auto_ptr&lt;T&gt;&amp; ap)</span><br><span class="line">&#123;</span><br><span class="line">_ptr = ap._ptr;</span><br><span class="line">ap._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">auto_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(auto_ptr&lt;T&gt;&amp; ap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;ap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr) <span class="comment">// 判断_ptr是否为空</span></span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"></span><br><span class="line">_ptr = ap._ptr;</span><br><span class="line">ap._ptr = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">auto_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr)</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="unique-ptr">unique_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301102347615.png" alt=""></p><blockquote><p>unique_ptr的实现原理：简单粗暴的防拷贝</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">unique_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">unique_ptr</span>(T* ptr)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="built_in">unique_ptr</span>(<span class="type">const</span> unique_ptr&lt;T&gt;&amp; up) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> unique_ptr&lt;T&gt;&amp; up) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">unique_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_ptr)</span><br><span class="line"><span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="shared-ptr">shared_ptr</h2><pre><code>下边代码有一些开始写成了share_ptr，少了个d，后补上了，导致有一些截图和代码少一个d</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301110001271.png" alt=""></p><blockquote><p>auto_ptr和unique_ptr都针对智能指针的拷贝问题上有各自的处理方式，但是都比较呆，很多时候我们是有拷贝指针的需求的，那么这时候share_ptr就登场了。</p></blockquote><p>shared_ptr的原理：是通过引用计数的方式来实现多个shared_ptr对象之间共享资源。</p><ol><li>shared_ptr在其内部，给每个资源都维护了着一份计数，用来记录该份资源被几个对象共享</li><li>在对象被销毁时(也就是析构函数调用)，就说明自己不使用该资源了，对象的引用计数减一</li><li>如果引用计数是0，就说明自己是最后一个使用该资源的对象，必须释放该资源</li><li>如果不是0，就说明除了自己还有其他对象在使用该份资源，不能释放该资源，否则其他对象就成野指针了。</li></ol><p>如何根据shared_ptr的原理，进行引用计数功能的实现呢？</p><p><strong>方案1、静态成员变量 count计数</strong></p><p>这里是否可行呢？我们试着实现一下，并测试效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shared_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">&#123;</span><br><span class="line">_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp._ptr)</span><br><span class="line">&#123;</span><br><span class="line">_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">int</span> shared_ptr&lt;T&gt;::_count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>运行测试：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111412860.png" alt=""></p><p>使用静态成员变量确实可以解决拷贝构造导致的重复释放资源的问题，但是，这也会引发新的问题。因为静态成员变量不属于某一个对象，它属于整个类。如果我们再创建一个对象就会引发资源泄漏的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111417078.png" alt=""></p><pre><code>这里创建了个sp3，按理说有了两份资源，但是只析构了一次，原因如下。</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111424168.png" alt=""></p><p>我们其实期望的是对一份资源的管理，这一份资源要有独立的引用计数，但是用静态成员变量做不到这一点，无论多少份的资源，它们会共享一份引用计数，这样就会导致资源泄漏问题。</p><p>所以，静态成员变量这种方案是不行的，那么应该怎么做呢？我们引入第二种的方案。</p><p><strong>方案2、在堆上申请一块空间做计数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shared_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">:_ptr(ptr)</span><br><span class="line">,_pcount(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp._ptr)</span><br><span class="line">,_pcount(sp._pcount)</span><br><span class="line">&#123;</span><br><span class="line">(*_pcount)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// share_ptr&lt;A&gt;sp1(new A)</span></span><br><span class="line"><span class="comment">// share_ptr&lt;A&gt;sp2(sp1)</span></span><br><span class="line"><span class="comment">// sp1 = sp2</span></span><br><span class="line"><span class="comment">// 为了防止上边场景，用_ptr判断更好</span></span><br><span class="line"><span class="keyword">if</span> (_ptr == sp._ptr) </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --被赋值对象的计数，如果是最后一个对象要释放资源</span></span><br><span class="line"><span class="keyword">if</span> (--(*_pcount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"><span class="keyword">delete</span> _pcount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共管新资源，++计数</span></span><br><span class="line">_ptr = sp._ptr;</span><br><span class="line">_pcount = sp._pcount;</span><br><span class="line"></span><br><span class="line">(*_pcount)++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--(*_pcount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _ptr;</span><br><span class="line"><span class="keyword">delete</span> _pcount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"><span class="type">int</span>* _pcount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行结果如下：可以看到解决了上边的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111508572.png" alt=""></p><h2 id="weak-ptr">weak_ptr</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111514694.png" alt=""></p><blockquote><p>我们的shared_ptr看起来已经很厉害了，那这个weak_ptr又有什么作用呢？这里就要看shared_ptr潜在的一个问题了。</p></blockquote><h3 id="循环引用">循环引用</h3><blockquote><p>问题的引入：我们有个节点类，用shared_ptr会发生什么样的问题，我们来看一下下面</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111622216.png" alt=""></p><pre><code>上边说share_ptr的对象不能给Node*，我们可以更改一个Node类，将前后指针改成智能指针。</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111624432.png" alt=""></p><pre><code>经过更改后发现没有任何的问题，shared_ptr好像完美的胜任了节点的指针这个角色</code></pre><p>我们继续看一个场景：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111626436.png" alt=""></p><pre><code>当我们加上sp2-&gt;_pre=sp1时，就出现问题了，运行结果是两个节点都没有释放，这是为啥呢，非常奇怪的问题。</code></pre><blockquote><p>这里我们就要引出，循环引用的概念了。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111651493.png" alt=""></p><p>这时候就出现了循环引用的问题，导致了两边的资源都没有没释放，这时候就引入了weak_ptr来解决这个问题。</p><blockquote><p>解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了</p></blockquote><p>sp1-&gt; _ next = sp2；sp2-&gt;_ pre = sp1；时weak_ptr的_next和_ prev不会增加sp1和sp2的引用计数。</p><p>我们再看一下运行结果，发现问题已经被解决。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301111706127.png" alt=""></p><h3 id="weak-ptr模拟">weak_ptr模拟</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">weak_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">weak_ptr</span>()</span><br><span class="line">:_ptr(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">:_ptr(sp.<span class="built_in">get</span>())</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> weak_ptr&lt;T&gt;&amp; wp)</span><br><span class="line">:_ptr(wp._ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line">_ptr = sp.<span class="built_in">get</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>切换成st的命名空间，结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112019787.png" alt=""></p><p>也实现了库中weak_ptr的效果，解决了循环引用的问题。</p><h1>定制删除器</h1><blockquote><p>定制删除器是针对智能指针管理的类型定制专用的删除器，如果没有制删除器可能会出现一些错误。</p></blockquote><p>比如下边代码，用了库里面的shared_ptr</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt;<span class="built_in">s1</span>(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]);</span><br><span class="line">std::shared_ptr&lt;Node&gt;<span class="built_in">sp2</span>(<span class="keyword">new</span> Node[<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112050260.png" alt=""></p><pre><code>可以看到程序直接崩溃了，其实第一个还没有崩，第二个Node[5]那里才崩溃掉</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112104024.png" alt=""></p><p>由于释放的位置不对导致程序崩溃掉。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112105450.png" alt=""></p><p>可以通过定制删除器解决这个问题，也就是传个函数对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete[]&quot;</span> &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Free</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;free&quot;</span> &lt;&lt; ptr &lt;&lt; endl;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 仿函数对象</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n1</span><span class="params">(<span class="keyword">new</span> Node[<span class="number">5</span>], DeleteArray&lt;Node&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">n3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>], DeleteArray&lt;<span class="type">int</span>&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">n4</span><span class="params">((<span class="type">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="number">12</span>)), Free&lt;<span class="type">int</span>&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda</span></span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">m1</span><span class="params">(<span class="keyword">new</span> Node[<span class="number">5</span>], [](Node* ptr)&#123;<span class="keyword">delete</span>[] ptr; &#125;)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">m2</span><span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">m3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>], [](<span class="type">int</span>* ptr)&#123;<span class="keyword">delete</span>[] ptr; &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">m4</span><span class="params">((<span class="type">int</span>*)malloc(<span class="keyword">sizeof</span>(<span class="number">12</span>)), [](<span class="type">int</span>* ptr)&#123;free(ptr); &#125;)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">m5</span><span class="params">(fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* ptr)&#123;fclose(ptr); &#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">主要unique是在模板参数这里</span><br><span class="line"><span class="comment">//std::unique_ptr&lt;Node, DeleteArray&lt;Node&gt;&gt; up(new Node[5]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模拟完善shared-ptr">模拟完善shared_ptr</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">D</span> = Delete&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> shared_ptr</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(T* ptr = <span class="literal">nullptr</span>)</span><br><span class="line">: _ptr(ptr)</span><br><span class="line">, _pCount(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">Release</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (--(*_pCount) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">D</span>()(_ptr);</span><br><span class="line"><span class="keyword">delete</span> _pCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Release</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">: _ptr(sp._ptr)</span><br><span class="line">, _pCount(sp._pCount)</span><br><span class="line">&#123;</span><br><span class="line">(*_pCount)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&lt;T&gt;&amp; sp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if (this == &amp;sp)</span></span><br><span class="line"><span class="keyword">if</span> (_ptr == sp._ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Release</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共管新资源，++计数</span></span><br><span class="line">_ptr = sp._ptr;</span><br><span class="line">_pCount = sp._pCount;</span><br><span class="line"></span><br><span class="line">(*_pCount)++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">use_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *_pCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T* <span class="title">get</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* _ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数</span></span><br><span class="line"><span class="type">int</span>* _pCount;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的模拟定制删除器的功能，是简单版的通过模板参数控制</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301112131999.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++异常</title>
      <link href="/posts/4208010459/"/>
      <url>/posts/4208010459/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们写代码的过程中，出现错误是非常常见的事情，如何对一些异常进行合理方式的处理是非常重要的问题，c语言有c语言的方法，当然，cpp作为oop的语言当然也有它的一套体系。</p></blockquote><h1>C语言处理错误的方式</h1><h2 id="c错误处理方式">c错误处理方式</h2><ol><li><p><strong>终止程序</strong>：比如assert，缺点：有些问题会直接退出会让用户非常难受，比如出现网络错误，我们通常希望的是告警，而不是进程退出。</p></li><li><p><strong>返回错误码</strong>：返回错误码的方式并不直观，比如返回一个5，并不能直接知道出了什么错误，必须要查对应的的错误。</p><p>大部分情况c还是采用返回错误码的方式处理错误，部分情况使用终止进程处理特别严重的错误。</p></li></ol><h1>C++异常概念</h1><blockquote><p>异常是什么？其实是一种处理错误的方式，当一个函数遇到无法处理的错误时，就可以抛出异常，让函数可以直接或者间接的调用者去处理这个错误。</p></blockquote><p>大概形式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// 保护的标识代码  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName e1 )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName e2 )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;<span class="built_in">catch</span>( ExceptionName eN )  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="comment">// catch 块  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>异常的使用</h1><h2 id="关键字">关键字</h2><blockquote><p>使用异常前，先认识一下异常的关键字</p></blockquote><ul><li><strong>throw</strong>：抛出异常关键字，可以抛出任意的东西（字符串、整数…）</li><li><strong>try</strong>：括号内的代码就是可能会出现异常的地方。</li><li><strong>catch</strong>：能捕捉抛出的异常，当然要类型对应。</li></ul><h2 id="异常规则">异常规则</h2><h3 id="异常的抛出和捕获">异常的抛出和捕获</h3><ul><li>抛出对象的类型严格匹配catch类型</li><li>抛出对象匹配最近的catch</li><li>抛出的是对象的拷贝</li><li>catch(…) 可以捕捉任意类型的异常，用来兜底</li><li>可以抛派生类对象，用父类进行捕获</li></ul><h4 id="类型匹配例子：">类型匹配例子：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试扔出三种类型，匹配对应的catch</span></span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw 0;</span></span><br><span class="line"><span class="comment">//throw string(&quot;除0错误&quot;);</span></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a/b=&quot;</span> &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> errid)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errid：&quot;</span> &lt;&lt; errid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">char</span> errch)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errch：&quot;</span> &lt;&lt; errch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> string&amp; errstr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;errstr：&quot;</span> &lt;&lt; errstr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，匹配对应的catch</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301082345139.png" alt=""></p><h4 id="子类异常基类捕获">子类异常基类捕获</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exception</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Exception</span>(<span class="type">const</span> string&amp; errmsg, <span class="type">int</span> id)</span><br><span class="line">:_errmsg(errmsg)</span><br><span class="line">, _id(id)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">what</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _errmsg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getid</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string _errmsg;   <span class="comment">// 错误信息</span></span><br><span class="line"><span class="type">int</span> _id;          <span class="comment">// 错误码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorA</span> : <span class="keyword">public</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ErrorA</span>(<span class="type">const</span> string&amp; errmsg, <span class="type">int</span> id, <span class="type">const</span> string&amp; errorA)</span><br><span class="line">:<span class="built_in">Exception</span>(errmsg,id)</span><br><span class="line">,_errA(errorA)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> string <span class="title">what</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = _errmsg + <span class="string">&quot; &quot;</span> + _errA;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string _errA;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">rand</span>() % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">ErrorA</span>(<span class="string">&quot;错误：&quot;</span>, <span class="number">100</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> Exception&amp; e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未知错误&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301090028259.png" alt=""></p><h3 id="在函数调用链中异常展开匹配规则">在函数调用链中异常展开匹配规则</h3><ul><li>现在当前栈帧中看</li><li>没有去上一层栈帧</li><li>如果到了main栈帧还未匹配，终止程序</li><li>catch处理后，会继续执行之后的语句</li></ul><h4 id="函数调用例子">函数调用例子</h4><blockquote><p>代码大致如上方代码，但是fun函数里面调用了div函数，并在fun函数里面进行异常捕获，同样的在main函数中，也对fun进行异常的捕获</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">div</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw 0;</span></span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">string</span>(<span class="string">&quot;除0错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a/b=&quot;</span> &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">div</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> errid)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun中catch：&quot;</span> &lt;&lt; errid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">![](https:<span class="comment">//tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301082359524.png)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 异常栈帧展开</span><br><span class="line"></span><br><span class="line">![](https:<span class="comment">//tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301090003458.png)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 异常安全</span><br><span class="line"></span><br><span class="line">+ 最好不要在构造函数中抛出异常，可能导致构造对象不完整</span><br><span class="line">+ 最好不要在析构函数中抛出异常，可能会导致资源泄露</span><br><span class="line">+ C++中异常经常会导致资源泄漏的问题，比如在<span class="keyword">new</span>和<span class="keyword">delete</span>中抛出了异常，导致内存泄漏，在lock和unlock之间抛出了异常导致死锁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如下面的场景：</span><br><span class="line">&gt; 如果发生异常，就不会执行<span class="keyword">delete</span>，这样导致了资源泄漏，当然可以在Func中的<span class="keyword">catch</span>中再增加<span class="keyword">delete</span>，但是还有隐藏的问题，比如，array1成功，array2失败，arr2抛异常，会抛到main函数栈帧中。会导致array1得不到释放。</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="type">void</span> <span class="built_in">Func</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这里可以看到如果发生除0错误抛出异常，另外下面的array没有得到释放。</span></span><br><span class="line"><span class="comment">// 所以这里捕获异常后并不处理异常，异常还是交给外面处理，这里捕获了再</span></span><br><span class="line"><span class="comment">// 重新抛出去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐患，第一个成功，第二个失败</span></span><br><span class="line">    <span class="comment">// 可以解决，但是很麻烦，这样的问题一般是用智能指针解决</span></span><br><span class="line"><span class="type">int</span>* array1 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>* array2 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len, time;</span><br><span class="line">cin &gt;&gt; len &gt;&gt; time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Division</span>(len, time) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (...)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 若第一个new成功，第二个失败，这里还要delete arr2</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array2; </span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span>; <span class="comment">// 捕获什么抛出什么</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;delete []&quot;</span> &lt;&lt; array2 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] array2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* errmsg)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; errmsg &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常规范">异常规范</h2><ol><li>异常规格说明的目的是为了让函数使用者知道该函数可能抛出的异常有哪些。 可以在函数的后面接throw(类型)，列出这个函数可能抛掷的所有异常类型。</li><li>函数的后面接throw()，表示函数不抛异常。</li><li>若无异常接口声明，则此函数可以抛掷任何类型的异常</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里表示这个函数会抛出A/B/C/D中的某种类型的异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span> <span class="title">throw</span><span class="params">(A，B，C，D)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里表示这个函数只会抛出bad_alloc的异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(std::<span class="type">size_t</span> size)</span> <span class="title">throw</span> <span class="params">(std::bad_alloc)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里表示这个函数不会抛出异常  </span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">delete</span> <span class="params">(std::<span class="type">size_t</span> size, <span class="type">void</span>* ptr)</span> <span class="title">throw</span><span class="params">()</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 中新增的noexcept，表示不会抛异常  </span></span><br><span class="line"><span class="built_in">thread</span>() <span class="keyword">noexcept</span>;  </span><br><span class="line"><span class="built_in">thread</span> (thread&amp;&amp; x) <span class="keyword">noexcept</span>;</span><br></pre></td></tr></table></figure><h1>异常的优缺点</h1><h2 id="C-异常优点">C++异常优点</h2><ol><li>异常对象定义好之后，相比错误码的方式更能清晰准确的展示出错误的各种信息，甚至可以包含调用堆栈的信息，可以更容易定位程序bug</li><li>可以直接跳出到catch捕捉的地方，而不用像错误码一样层层返回。</li><li>很多第三方库包含异常</li><li>部分函数使用异常更好处理，比如构造函数没有返回值，不方便使用错误码方式处理，方括号的重载，pos越界错误，只能通过异常或者终止程序。</li></ol><h2 id="C-异常缺点">C++异常缺点</h2><ol><li>执行流可能会乱跳，运行时抛出，会比较的混乱</li><li>有性能开销</li><li>容易导致内存泄漏、死锁安全问题</li><li>C++标准体系定义不好，导致大家自定义各自的异常体系，十分混乱</li></ol><h2 id="总结">总结</h2><p>异常尽量规范使用，不要随便抛异常，遵守如下：</p><ul><li>所有异常类型都继承于一个基类</li><li>函数是否抛异常，抛什么异常，都使用 fun() throw(); 的方式规范化。</li></ul><p>异常总体来说，利大于弊。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++11（下篇）</title>
      <link href="/posts/3042503810/"/>
      <url>/posts/3042503810/</url>
      
        <content type="html"><![CDATA[<h1>类的新功能</h1><h2 id="默认成员函数">默认成员函数</h2><p>在以前的C++类中，有6个默认成员函数：</p><ol><li>构造函数</li><li>析构函数</li><li>拷贝构造函数</li><li>拷贝赋值重载</li><li>取地址重载</li><li>const 取地址重载</li></ol><p>比较重要的是前4个，后两个的用处并不大，默认的成员函数就是我们不写编译器会生成一个默认的。</p><blockquote><p>在C++11中，新增了两个默认成员函数</p></blockquote><ol><li>移动构造函数</li><li>移动赋值运算符重载</li></ol><p>针对这两个新的默认成员函数，有了新的注意事项：</p><p>1、如果<strong>没有自己实现移动构造</strong>，<strong>且没有实现析构函数、拷贝构造、拷贝赋值重载中的任何一个</strong>，那么编译器会自动生成一个<strong>默认移动构造</strong>。</p><p>让我们来看个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> <span class="type">char</span>* name = <span class="string">&quot;&quot;</span>, <span class="type">int</span> age = <span class="number">0</span>)</span><br><span class="line">:_name(name)</span><br><span class="line">, _age(age)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">st::string _name;</span><br><span class="line"><span class="type">int</span> _age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">s1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">Person s2 = std::<span class="built_in">move</span>(s1); <span class="comment">// 移动构造 （没有移动构造，再调用拷贝构造）</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的这个Person类，只自己实现了一个构造函数，析构、拷贝构造、拷贝赋值重载都未手动实现，Person的_name成员用的自己模拟实现的string类。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021417868.png" alt=""></p><p>可以看到，调用了string的移动构造，那么如果我们在Person类中加个析构结果是什么样呢？</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021418203.png" alt=""></p><p>这里就调用了拷贝构造，原因是有了析构，就不再生成默认的移动构造函数。</p><p>2、默认生成的移动构造</p><ul><li>对于<strong>内置类型会逐字节拷贝</strong></li><li>对于<strong>自定义类型</strong>，则需要看这个成员是否实现了移动构造，如果<strong>实现了就调用移动构造，没有实现就调用拷贝构造</strong>。（如下图所示）</li></ul><blockquote><p>当删除了string类的移动构造后</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021436581.png" alt=""></p><p>3、默认生成的移动赋值和默认生成的移动构造完全类似。</p><p>4、如果提供了移动构造或者移动赋值，编译器不会自动提供拷贝构造和拷贝赋值。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021427141.png" alt=""></p><h2 id="default和delete">default和delete</h2><h3 id="default">default</h3><blockquote><p>强制生成默认函数</p></blockquote><p>我们知道对于类来说有时候会需要生成默认成员函数，比如我们实现了有参的构造，无参构造就不会默认生成，或者实现了拷贝构造，默认生成的移动构造就不会生成。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021450459.png" alt=""></p><p>上图场景是我们实现了拷贝构造，那么默认的移动构造就不会生成，我们强制生成之后实现了我们想要的效果。</p><h3 id="delete">delete</h3><blockquote><p>禁止生成默认函数的关键字</p></blockquote><p>比如要求delete关键字实现，一个类，只能在堆上创建对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeapOnly</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HeapOnly</span>()</span><br><span class="line">&#123;</span><br><span class="line">_str = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">HeapOnly</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span>[] _str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* _str;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>只需要：<strong>~HeapOnly() = delete</strong>;</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021502973.png" alt=""></p><p>这样在栈和静态区都不能创建对象。如果要创建对象只能在堆上创建。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021520043.png" alt=""></p><pre><code>注意，destroy() 函数，第一是释放 char* 的那个空间，第二个是要释放ptr指向的那段空间。释放ptr指向的空间要用 operator delete()，因为 delete会调用析构</code></pre><h1>可变参数模板</h1><blockquote><p>C++11的新特性可变参数模板能够创建可以接受可变参数的函数模板和类模板</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021533875.png" alt=""></p><pre><code>我们把带省略号的参数称为“参数包”，它里面包含了0到N（N&gt;=0）个模版参数，比如args里面有三个参数包，这里需要注意，参数包里面的内容不能直接取出来。也不能用方括号直接访问</code></pre><p>可以用<strong>sizeof…(args)</strong> 计算参数包有几个参数。</p><h2 id="递归函数方式展开参数包">递归函数方式展开参数包</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021547497.png" alt=""></p><h2 id="逗号表达式展开参数包">逗号表达式展开参数包</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintArg</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowList</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; (<span class="built_in">PrintArg</span>(args), <span class="number">0</span>)... &#125;;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ShowList</span>(<span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>, <span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>C++11的另外一个特性——初始化列表，通过初始化列表来初始化一个变长数组, &#123;(printarg(args), 0)...&#125;将会展开成((printarg(arg1),0),  (printarg(arg2),0), (printarg(arg3),0), etc... )，最终会创建一个元素值都为0的数组int arr[sizeof...(args)],也就是说在构造int数组的过程中就将参数包展开了，这个数组的目的纯粹是为了在数组构造的过程展开参数包</code></pre><p>也可以这样：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/20230102160429.png" alt=""></p><h2 id="STL容器中的empalce相关接口函数">STL容器中的empalce相关接口函数</h2><h2 id="push-back">push_back</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021616978.png" alt=""></p><p>下边这种场景，是一个构造加拷贝构造，或者构造加移动构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;bit::string, <span class="type">int</span>&gt;&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><h2 id="emplace-back">emplace_back</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021617720.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>));</span><br><span class="line">v.<span class="built_in">emplace_back</span>(<span class="string">&quot;sort&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="对比">对比</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021613445.png" alt=""></p><p>可以看到vector，测试两种方式没有区别，但是list测试，emplace_back更高效，因为只有一次构造，参数传递的参数包直接构造到List的节点上。</p><h2 id="总结">总结</h2><p>对于内置类型来说，两种并无区别，对自定义类型来说，一些容器，比如list可以直接将参数包构造到容器的对象上面。更高效一些。</p><h1>lambda表达式</h1><blockquote><p>像函数使用的对象/类型</p></blockquote><ol><li>函数指针</li><li>仿函数/函数对象</li><li>lambda</li></ol><h2 id="lambda语法">lambda语法</h2><blockquote><p>格式： [捕捉列表] (参数列表) mutable -&gt; 返回值类型 {函数体}</p></blockquote><p>来个例子：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021646421.png" alt=""></p><p>看一下f的类型：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021651018.png" alt=""></p><p>具体说明：</p><ul><li><strong>捕捉列表</strong>：译器根据 [] 来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用。</li><li><strong>参数列表</strong>：和普通函数列表一致，如果不需要参数传递可以省略()。</li><li><strong>mutable</strong> ：默认情况下，lambda函数总是一个const函数，mutable可以取消常量性，使用该修饰符时，不能省略()</li><li><strong>返回值类型</strong>：与常规函数一样，可以省略</li><li><strong>函数体</strong>：除了使用参数外，还可以使用捕捉的变量。</li></ul><p>注意：</p><p>在lambda函数定义中，<strong>参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空</strong>，C++11中，最简单的lambda函数为：[] () ；该函数不能做任何事情，只是符合语法。</p><blockquote><p>看一个mutable的使用</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301021717343.png" alt=""></p><p>这里值捕获x和y，但是这个lambda默认是const的函数。修改了x和y所以会报错。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> swap3 = [x, y]()<span class="keyword">mutable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>加上mutable就可以，不过也没有起到交换的作用，因为是值捕捉。</p><h2 id="捕捉列表">捕捉列表</h2><ul><li>[var]：表示值传递方式捕捉变量var</li><li>[=]：表示值传递方式捕获所有父作用域中的变量(包括this)</li><li>[&amp;var]：表示引用传递捕捉变量var</li><li>[&amp;]：表示引用传递捕捉所有父作用域中的变量(包括this)</li><li>[this]：表示值传递方式捕捉当前的this指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> swap3 = [&amp;x, &amp;y]</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一些常见用法看下边例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、生命周期（存储区域）</span></span><br><span class="line"><span class="comment">//2、作用域（编译器编译，用的地方能否找到）</span></span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">a = b = c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部传值捕捉</span></span><br><span class="line"><span class="keyword">auto</span> f1 = [=]() &#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合捕捉</span></span><br><span class="line"><span class="keyword">auto</span> f2 = [=, &amp;a]() &#123;</span><br><span class="line">a++;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f4 = [&amp;]()</span><br><span class="line">&#123;</span><br><span class="line">f++; <span class="comment">//没问题，可以捕捉全局变量</span></span><br><span class="line">x++; <span class="comment">//错误，x是静态变量，但是它的作用域是fun</span></span><br><span class="line">cout &lt;&lt; f &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">f4</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda底层细节">lambda底层细节</h2><p>看一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rate</span>(<span class="type">double</span> rate) : _rate(rate)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span> money, <span class="type">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money * _rate * year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> _rate;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> rate = <span class="number">0.49</span>;</span><br><span class="line"><span class="function">Rate <span class="title">r1</span><span class="params">(rate)</span></span>;</span><br><span class="line"><span class="built_in">r1</span>(<span class="number">10000</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> r2 = [=](<span class="type">double</span> monty, <span class="type">int</span> year)-&gt;<span class="type">double</span>&#123;<span class="keyword">return</span> monty*rate*year; &#125;;</span><br><span class="line"><span class="built_in">r2</span>(<span class="number">10000</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码r1是个函数对象，r2是lambda，转到反汇编看看，这两个的区别。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032135781.png" alt=""></p><p>由上图可以看出，r1和r2都是调用了重载的方括号，实际在底层编译器对于lambda表达式的处理方式，完全就是按照函数对象的方式处理的，即：<strong>如果定义了一个lambda表达式，编译器会自动生成一个类，在该类中重载了operator()</strong></p><p>编译器生成了个类似下边的东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda_uuid</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lambda_xxxx</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>包装器</h1><h2 id="function包装器引入">function包装器引入</h2><blockquote><p>function包装器 也叫作适配器。C++中的function本质是一个类模板，也是一个包装器。为什么需要function呢？可以看一个场景</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = <span class="built_in">func</span>(x);</span><br></pre></td></tr></table></figure><p>func可能是函数名、函数指针、函数对象(仿函数对象)、也有可能<br>是lamber表达式对象，这些都有可能。</p><p>看个demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> F, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">useF</span><span class="params">(F f, T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count:&quot;</span> &lt;&lt; ++count &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;count:&quot;</span> &lt;&lt; &amp;count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">f</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">double</span> i)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Functor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> d / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数指针</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数对象</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(<span class="built_in">Functor</span>(), <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lamber表达式对象</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>([](<span class="type">double</span> d)-&gt;<span class="type">double</span>&#123; <span class="keyword">return</span> d / <span class="number">4</span>; &#125;, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>useF是个函数模板，依次将函数指针，函数对象，lambda传入，运行看一下</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032203951.png" alt=""></p><p>可以看到静态变量count三次的地址都不一样，说明这个函数模板实例化出来三份代码。</p><p>我们上包装器：</p><h2 id="function包装器用法">function包装器用法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032213439.png" alt=""></p><blockquote><p>function在在头文件 &lt; functional &gt;</p></blockquote><p>模板参数说明：</p><ul><li>Ret: 被调用函数的返回类型</li><li>Args…：被调用函数的形参</li></ul><p>我们改造上面的程序，用包装器包装起来。注意模板参数那里的写法，<strong>先是返回值类型然后小括号里面的参数列表的类型</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数指针</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f1 = f;</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f1, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数对象</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f2 = <span class="built_in">Functor</span>();</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f2, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lamber表达式对象</span></span><br><span class="line">function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f3 = [](<span class="type">double</span> d)-&gt;<span class="type">double</span> &#123; <span class="keyword">return</span> d / <span class="number">4</span>; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">useF</span>(f3, <span class="number">11.11</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下运行结果</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032216604.png" alt=""></p><p>可以看到count的三个地址相同，说明只实例化出了一份代码。一定程度的解决模板效率低下，实例化多份的问题。</p><blockquote><p>用法注意：对于类的静态成员函数和普通成员函数用法的区别。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plus</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">plusi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">plusd</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; f1 = Plus::plusi;</span><br><span class="line"><span class="built_in">f1</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">function&lt;<span class="type">double</span>(Plus, <span class="type">double</span>, <span class="type">double</span>)&gt; f2 = &amp;Plus::plusd;</span><br><span class="line"><span class="built_in">f2</span>(<span class="built_in">Plus</span>(), <span class="number">1.1</span>, <span class="number">2.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>静态成员函数只需要加域限定符即可，但是类的成员函数，不仅仅需要域限定符，调用成员函数，前面还需要加取地址的符号，参数列表要增加类名。</code></pre><p>普通的类成员函数包装又有了新的问题，同样以上方代码为例，两个功能类似的函数，包装器确不一样，这个可以解决吗？这时候就引入了我们的bind</p><h2 id="bind">bind</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032247071.png" alt=""></p><blockquote><p>std::bind是一个函数模板，它就像一个函数包装器(适配器)，接受一个可调用对象，生成一个新的可调用对象来“适应”原对象的参数列表。一般而言，我们用它可以把一个原本接收N个参数的函数fn，通过绑定一些参数，返回一个接收M个（M可以大于N，但这么做没什么意义）参数的新函数。同时，使用std::bind函数还可以实现参数顺序调整等操作</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032248465.png" alt=""></p><pre><code> _1 _2.... 定义在placeholders命名空间中，代表绑定函数对象的形参， _1，_2...分别代表第一个形参、第二个形参...</code></pre><p>看个具体用法：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032256943.png" alt=""></p><p>绑定后，形参的顺序得以改变（用处不是很大）</p><p>更实用的用法：调整个数，绑定死固定参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Plus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">double</span> rate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b * rate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcPlus = Plus;</span><br><span class="line"><span class="comment">//function&lt;int(Sub, int, int)&gt; funcSub = &amp;Sub::sub;</span></span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcSub = <span class="built_in">bind</span>(&amp;Sub::sub, <span class="built_in">Sub</span>(), _1, _2);</span><br><span class="line"><span class="comment">// 注意</span></span><br><span class="line">function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; funcMul = <span class="built_in">bind</span>(Mul, _1, _2, <span class="number">1.5</span>);</span><br><span class="line">map&lt;string, function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt;&gt; opFuncMap =</span><br><span class="line">&#123;</span><br><span class="line">&#123; <span class="string">&quot;+&quot;</span>, Plus&#125;,</span><br><span class="line">&#123; <span class="string">&quot;-&quot;</span>, <span class="built_in">bind</span>(&amp;Sub::sub, <span class="built_in">Sub</span>(), _1, _2)&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;funcPlus(1, 2)=&quot;</span> &lt;&lt; <span class="built_in">funcPlus</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;funcSub(1, 2)=&quot;</span> &lt;&lt; <span class="built_in">funcSub</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;funcMul(2, 2)=&quot;</span>&lt;&lt; <span class="built_in">funcMul</span>(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;opFuncMap[\&quot; + \&quot;](1, 2)=&quot;</span> &lt;&lt; opFuncMap[<span class="string">&quot;+&quot;</span>](<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;opFuncMap[\&quot; - \&quot;](1, 2)=&quot;</span> &lt;&lt; opFuncMap[<span class="string">&quot;-&quot;</span>](<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">2</span>, y = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Div(2,10)=&quot;</span> &lt;&lt; <span class="built_in">Div</span>(x, y) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301032307091.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11（右值）</title>
      <link href="/posts/2681483246/"/>
      <url>/posts/2681483246/</url>
      
        <content type="html"><![CDATA[<h1>右值引用和移动语义</h1><blockquote><p>传统的C++语法中就有引用的语法，而C++11中新增了的右值引用语法特性，所以从现在开始我们之前学习的引用就叫做左值引用。无论左值引用还是右值引用，都是给对象取别名。</p></blockquote><h2 id="右值引入">右值引入</h2><blockquote><p>在以前我们知道有引用的语法，我们通常叫做左值引用，那么什么是左值呢？可以看下边的几个例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 左值：可以取它的地址</span></span><br><span class="line"><span class="comment">/*int a = 10;</span></span><br><span class="line"><span class="comment">const int b = 20;</span></span><br><span class="line"><span class="comment">int* p = &amp;a;</span></span><br><span class="line"><span class="comment">*p = 100;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的p、b、c、*p都是左值</span></span><br><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个是对上面左值的左值引用</span></span><br><span class="line"><span class="type">int</span>*&amp; rp = p;</span><br><span class="line"><span class="type">int</span>&amp; rb = b;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; rc = c;</span><br><span class="line"><span class="type">int</span>&amp; pvalue = *p;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> x = <span class="number">1.1</span>, y = <span class="number">2.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，左值，<strong>可以获取它的地址+可以对它赋值</strong>。当然定义时用const修饰的左值，也不能对他赋值，但是可以<strong>取地址</strong>。左值引用呢，就是给左值的引用。</p><blockquote><p>知道左值后，那么什么是右值呢？右值的形式是什么？右值有什么实际价值？看几个例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 右值:不能取地址</span></span><br><span class="line"><span class="number">10</span>; </span><br><span class="line">x + y;</span><br><span class="line"><span class="built_in">fmin</span>(x, y);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &amp;10 &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &amp;(x + y) &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下几个都是对右值的右值引用</span></span><br><span class="line"><span class="type">int</span>&amp;&amp; rr1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span>&amp;&amp; rr2 = x + y;</span><br><span class="line"><span class="type">double</span>&amp;&amp; rr3 = <span class="built_in">fmin</span>(x, y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里编译会报错</span></span><br><span class="line"><span class="number">10</span> = <span class="number">1</span>;</span><br><span class="line">x + y = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">fmin</span>(x, y) = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上几个例子都是右值，右值也是一个表达数据的表达式，如字面常量、表达式返回值，函数返回值（这个不能是左值引用返回）等等，<strong>右值可以出现在赋值符号右边，但是不能出现在赋值符号的左边，右值不能取地址</strong>。</p><blockquote><p>右值引用就是对右值的引用，给右值取别名</p></blockquote><h2 id="左值右值">左值右值</h2><blockquote><p>左值引用可以引用右值吗？右值引用可以引用右值吗？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有条件的支持</span></span><br><span class="line"><span class="comment">// 左值引用可以引用右值吗？ const的左值引用可以</span></span><br><span class="line"><span class="comment">//double&amp; r1 = x + y;</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span>&amp; r1 = x + y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右值引用可以引用左值吗？可以引用move以后的左值</span></span><br><span class="line"><span class="comment">//int&amp;&amp; rr5 = b;</span></span><br><span class="line"><span class="type">int</span>&amp;&amp; rr5 = <span class="built_in">move</span>(b);</span><br></pre></td></tr></table></figure><p>这里注意：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212281629905.png" alt=""></p><p>11是字面常量，Func函数参数列表是个左值引用，所以会报错，两种修改方法：</p><ul><li>Func(const T&amp; x)</li><li>Func(T&amp;&amp; x)</li></ul><p>第一种方法：<strong>const的左值引用可以接收右值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x既能接收左值，也能接收右值</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="type">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="左右值总结">左右值总结</h2><h3 id="左值引用总结">左值引用总结</h3><ol><li>左值引用只能引用左值。</li><li>但是const左值引用既可引用左值，也可引用右值。</li></ol><h3 id="右值引用总结">右值引用总结</h3><ol><li>右值引用只能引用右值，不能引用左值</li><li>右值引用可以引用move之后的左值</li></ol><h3 id="注意">注意</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212301753811.png" alt=""></p><p>rr1和rr2可以取地址了，它们是左值了。</p><h2 id="左值的不足">左值的不足</h2><blockquote><p>引用的价值：减少拷贝</p></blockquote><p>左值引用解决哪些问题？</p><ol><li>做参数。a、减少拷贝，提高效率  b、做输出型参数</li><li>做返回值。 a、减少拷贝，提高效率  b、引用返回，可以修改返回对象（比如：operator[]）</li></ol><p>但是，C++98的左值引用面向下边的场景很难进行处理：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212301937870.png" alt=""></p><p>右边的写法虽然解决了问题，但是并不是太符合使用习惯</p><h3 id="具体例子">具体例子</h3><p>不加移动构造的string</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302010806.png" alt=""></p><p>加移动构造的string类</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302045284.png" alt=""></p><p>不加移动构造移动赋值的string</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302216855.png" alt=""></p><p>加移动构造移动赋值的string类</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302216109.png" alt=""></p><h3 id="总结">总结</h3><p>移动构造和移动赋值解决了传值返回这些类型对象的问题，STL的各个容器在C++11增加移动构造和移动赋值。移动构造本质是将参数右值的资源窃取过来，占位已有，那么就不用做深拷贝了，所以它叫做移动构造，就是窃取别人的资源来构造自己。</p><h1>完美转发</h1><h2 id="模板中-万能引用">模板中&amp;&amp;万能引用</h2><blockquote><p>在模板中，&amp;&amp;不代表右值引用，而是万能引用，其既能接收左值又能接收右值，但是引用类型的唯一作用就是限制了接收的类型，后续使用中都退化成了左值。</p></blockquote><p>先看个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;左值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const 左值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span>&amp;&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;右值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp;&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const 右值引用&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PerfectForward</span><span class="params">(T&amp;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PerfectForward</span>(<span class="number">10</span>);           <span class="comment">// 右值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">PerfectForward</span>(a);            <span class="comment">// 左值</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(a)); <span class="comment">// 右值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">PerfectForward</span>(b);      <span class="comment">// const 左值</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(b)); <span class="comment">// const 右值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的预期中，Func函数应该是，左值打印左值，右值打印右值，但是运行结果确如下图所示：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302231604.png" alt=""></p><p>这里可以看到，所有的都成了左值引用，根本没有调用右值引用的版本，这个就是<strong>引用折叠</strong>的问题。</p><h2 id="std-forward">std::forward</h2><blockquote><p>我们希望能够在传递过程中保持它的左值或者右值的属性, 就需要用完美转发。</p></blockquote><p>针对上边的代码只需要将，T类型的参数t完美转发一下就可以了，<strong>std::forward 完美转发在传参的过程中保留对象原生类型属性</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PerfectForward</span><span class="params">(T&amp;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(std::forward&lt;T&gt;(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302243796.png" alt=""></p><p>可以看到完美转发的效果，左值调用左值，右值调用右值。</p><h2 id="实际应用例子">实际应用例子</h2><p>在我们模拟实现的list中测试，移动构造</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212302252471.png" alt=""></p><p>list插入&quot;world&quot;（右值），代码调用层级如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T&amp;&amp; x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">end</span>(), std::forward&lt;T&gt;(x)); <span class="comment">//完美转发保留右值属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用insert，这里也是万能引用接收</span></span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator pos, T&amp;&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* cur = pos._node;</span><br><span class="line">Node* prev = cur-&gt;_prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用节点的构造函数，也同样要完美转发，保留右值属性</span></span><br><span class="line">Node* newnode = <span class="keyword">new</span> <span class="built_in">Node</span>(std::forward&lt;T&gt;(x)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// prev newnode cur</span></span><br><span class="line">prev-&gt;_next = newnode;</span><br><span class="line">newnode-&gt;_prev = prev;</span><br><span class="line">newnode-&gt;_next = cur;</span><br><span class="line">cur-&gt;_prev = newnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(newnode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// insert调用了链表节点的构造，同样用万能引用接收</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list_node</span>(T&amp;&amp; x)</span><br><span class="line">:_data(std::forward&lt;T&gt;(x))  <span class="comment">//完美转发</span></span><br><span class="line">, _next(<span class="literal">nullptr</span>)</span><br><span class="line">, _prev(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>最后的节点的构造，会调用string类的构造，所以那里同样需要完美转发，调用了string类的右值构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(string&amp;&amp; s)</span><br><span class="line">:_str(<span class="literal">nullptr</span>)</span><br><span class="line">, _size(<span class="number">0</span>)</span><br><span class="line">, _capacity(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;string(string&amp;&amp; s) -- 资源转移&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">swap</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11基础</title>
      <link href="/posts/1163824125/"/>
      <url>/posts/1163824125/</url>
      
        <content type="html"><![CDATA[<h1>列表初始化</h1><h2 id="初始化">{} 初始化</h2><blockquote><p>在C++98中，标准允许使用花括号{}对数组或者结构体元素进行统一的列表初始值设定。</p></blockquote><p>比如下方示例：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272140842.png" alt=""></p><blockquote><p>C++11扩大了用大括号括起的列表(初始化列表)的使用范围，使其可用于所有的内置类型和用户自定义的类型，使用初始化列表时，可添加等号(=)，也可不添加</p></blockquote><h3 id="内置类型">内置类型</h3><p>以下三种写法一样</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272145021.png" alt=""></p><h3 id="自定义类型">自定义类型</h3><p>对于自定义类型同样适用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span><br><span class="line">:_year(year)</span><br><span class="line">, _month(month)</span><br><span class="line">, _day(day)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Date(int year, int month, int day)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _year;</span><br><span class="line"><span class="type">int</span> _month;</span><br><span class="line"><span class="type">int</span> _day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 都是在调用构造函数</span></span><br><span class="line"><span class="function">Date <span class="title">d1</span><span class="params">(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="comment">// C++11 要能看懂，但是不建议使用</span></span><br><span class="line">Date d2 = &#123;<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>&#125;; <span class="comment">// -&gt;调用构造函数</span></span><br><span class="line">Date d3&#123; <span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span> &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STL容器">STL容器</h3><p>stl容器同样支持如上操作，并且更加方便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 调用支持list (initializer_list&lt;value_type&gt; il）类似这样的构造函数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2 &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; lt1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; lt2&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Date&gt; v3 = &#123;d1, d2, d3&#125;;</span><br><span class="line">vector&lt;Date&gt; v4 = &#123; &#123; <span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123;<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">string s1 = <span class="string">&quot;11111&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造</span></span><br><span class="line">map&lt;string, string&gt; dict = &#123; &#123; <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;排序&quot;</span> &#125;, &#123; <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;插入&quot;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值重载 --- kvil要先明确，注意那个const</span></span><br><span class="line">initializer_list&lt;pair&lt;<span class="type">const</span> string, string&gt;&gt; kvil = &#123; &#123; <span class="string">&quot;left&quot;</span>, <span class="string">&quot;左边&quot;</span> &#125;, &#123; <span class="string">&quot;left&quot;</span>, <span class="string">&quot;左边&quot;</span> &#125; &#125;;</span><br><span class="line">dict = kvil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="std-initializer-list">std::initializer_list</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272134335.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> li = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(li).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272138565.png" alt=""></p><p>容器底层实现，如vector增加initializer_list参数的构造代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">vector</span>(initializer_list&lt;T&gt; li)</span><br><span class="line">: _start(<span class="literal">nullptr</span>), _finish(<span class="literal">nullptr</span>), _end_of_storage(<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">reserve</span>(li.<span class="built_in">size</span>())</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : li)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">push_back</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>C++11以后，一切对象都可以使用列表初始化，但是建议普通对象还是用以前的方式初始化，容器如果有需求可以用列表初始化</p><h1>变量类型推导</h1><h2 id="decltype">decltype</h2><blockquote><p>关键字decltype将变量的类型声明为表达式指定的类型</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212272258871.png" alt=""></p><h1>新增加容器</h1><h2 id="array">array</h2><ul><li>c语言数组越界读基本检查不出来，越界写是抽查</li><li>array可以检查出来越界</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> a1[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言数组越界检查，越界读基本检查不出来，越界写是抽查</span></span><br><span class="line">a1[N];</span><br><span class="line"><span class="comment">//a1[N] = 1;</span></span><br><span class="line">a1[N + <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 越界读写都可以被检查出来</span></span><br><span class="line"><span class="comment">// 实际情况：array用得很少，一方面大家用c数组用惯了</span></span><br><span class="line"><span class="comment">// 用array不如用vector + resize去替代c数组</span></span><br><span class="line"></span><br><span class="line">array&lt;<span class="type">int</span>, N&gt; a2;</span><br><span class="line">a2[N];</span><br><span class="line">a2[N] = <span class="number">1</span>;</span><br><span class="line">a2[N + <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forward-list">forward_list</h2><p>单链表</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增程式电动汽车CD/CS控制策略</title>
      <link href="/posts/552158714/"/>
      <url>/posts/552158714/</url>
      
        <content type="html"><![CDATA[<p><a name="vrhgN"></a></p><h2 id="一、简介">一、简介</h2><blockquote><p>CD/CS策略是最简单的EMS控制策略，这是基于规则的，最简单的控制策略，容易在实车上实现，通常在科研中用于与其他策略进行比较来体现其控制策略的优势。</p></blockquote><p><a name="ZfCCK"></a></p><h2 id="二、优缺点">二、优缺点</h2><p><strong>优点：</strong></p><ul><li><strong>实现简单</strong></li><li><strong>实时</strong></li><li><strong>发动机可工作在高效区</strong></li></ul><p><strong>缺点：</strong></p><ul><li><strong>适应力差</strong></li><li><strong>电池频繁冲放电</strong><br><a name="YXWMg"></a></li></ul><h2 id="三、流程图">三、流程图</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291635560.jpg" alt=""></p><p><a name="dQBv3"></a></p><h2 id="四、原理">四、原理</h2><p><a name="rhqIk"></a></p><h3 id="1、CD模式">1、CD模式</h3><p>需求功率只由电池提供，先推导状态变量SOC，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mover accent="true"><mi>O</mi><mo>˙</mo></mover><mi>C</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>S</mi><mi>O</mi><mi>C</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mo>−</mo><msub><mi>I</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub></mrow><msub><mi>C</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub></mfrac><mo>=</mo><mfrac><mrow><msqrt><mrow><msubsup><mi>U</mi><mrow><mi>O</mi><mi>C</mi><mi>V</mi></mrow><mn>2</mn></msubsup><mo>−</mo><mn>4</mn><msub><mi>P</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub><msub><mi>R</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub></mrow></msqrt><mo>−</mo><msub><mi>U</mi><mrow><mi>O</mi><mi>C</mi><mi>V</mi></mrow></msub></mrow><mrow><mn>2</mn><msub><mi>R</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub><msub><mi>C</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex"> S\dot OC=\frac{dSOC}{dt}=\frac{-I_{ess}}{C_{ess}}=\frac{\sqrt{U^2_{OCV}-4P_{ess}R_{ess}}-U_{OCV}}{2R_{ess}C_{ess}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9202em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9202em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.0556em;"><span class="mord">˙</span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.07153em;">SOC</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.466em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.63em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6938em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9362em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4065em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">OC</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2935em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.8962em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3038em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">OC</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>O</mi><msub><mi>C</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>≤</mo><mi>S</mi><mi>O</mi><mi>C</mi><msub><mo>≤</mo><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">SOC_{min} \leq SOC\leq_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">SO</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">SOC</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel">≤</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>推导SOC的导数（安时计量法）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>O</mi><msub><mi>C</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>S</mi><mi>O</mi><msub><mi>C</mi><mi>k</mi></msub><mo>−</mo><msubsup><mo>∫</mo><msub><mi>t</mi><mi>k</mi></msub><msub><mi>t</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></msubsup><mfrac><mrow><mi>η</mi><mi>I</mi><mi mathvariant="normal">d</mi><mi>t</mi></mrow><msub><mi>C</mi><mi>e</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">SOC_{k+1}=SOC_k-\int_{t_k}^{t_{k+1}}{\frac{\eta I{\rm d}t}{C_e}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">SO</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">SO</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.4501em;vertical-align:-0.4617em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9885em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2107em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4617em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0715em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">η</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">d</span></span></span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>后边  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>U</mi><mrow><mi>O</mi><mi>C</mi><mi>V</mi></mrow></msub><msub><mi>I</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub><mo>−</mo><msubsup><mi>I</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow><mn>2</mn></msubsup><msub><mi>R</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub><mo>=</mo><msub><mi>P</mi><mrow><mi>e</mi><mi>s</mi><mi>s</mi></mrow></msub></mrow><annotation encoding="application/x-tex">U_{OCV}I_{ess}-I_{ess}^2R_{ess}=P_{ess}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">OC</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ess</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>求根公式</p></blockquote><p>P_ess为动力电池功率，I_ess为动力电池电流，C_ess为动力电池额外容量，R_ess为动力电池内阻，U_ocv为动力电池开路电压<br><a name="yZYju"></a></p><h3 id="2、CS模式">2、CS模式</h3><p>CS模式是电量保持，模式，增程器控制采用定点控制策略，发动机在固定工作点工作。</p><ul><li>需求功率由增程器提供，多余功率给电池充电<br><a name="x2Wvn"></a></li></ul><h3 id="3、制动能量回收">3、制动能量回收</h3><ul><li>20%回收<br><a name="C3CLe"></a></li></ul><h2 id="五、代码实现">五、代码实现</h2><p><a name="E67Lu"></a></p><h3 id="1、流程逻辑">1、流程逻辑</h3><ul><li>导入工况数据</li><li>车辆参数初始化</li><li>计算工况功率需求</li><li>工况循环<br><a name="lqg0c"></a></li></ul><h3 id="2、提示">2、提示</h3><ul><li>未考虑效率问题</li><li>制动能量回收20%</li><li>CD模式精度可以，可与powertrain的EV一个NEDC比较。<br><a name="tsf3A"></a></li></ul><h3 id="3、实现环境">3、实现环境</h3><p>1️⃣** matlab **</p><ul><li>无脑建议2021b+，因为有代码提示和补全😁</li></ul><p>2️⃣** python**</p><ul><li><strong>3.7</strong></li><li><strong>numpy</strong></li><li><strong>math</strong></li><li><strong>scipy</strong></li><li><strong>matplotlib</strong></li></ul><br /><a name="JLaWD"></a>## 五、仿真结果<a name="Ze8Ya"></a>### 1、matlab<p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636129.png" alt=""></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636841.png" alt=""></p><h3 id="2、python">2、python</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636438.png" alt=""></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212291636851.png" alt=""></p><p><a name="pYpqN"></a></p><h2 id="六、github链接">六、github链接</h2><p><a href="https://github.com/suntong-1221/EMS_OS.git">https://github.com/suntong-1221/EMS_OS.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 新能源汽车 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希应用</title>
      <link href="/posts/1804708753/"/>
      <url>/posts/1804708753/</url>
      
        <content type="html"><![CDATA[<h1>位图</h1><blockquote><p>给40亿个不重复的无符号整数，没排过序。给一个无符号整数，如何快速判断一个数是否在这40亿个数中？</p></blockquote><ol><li>遍历，时间复杂度O(N)</li><li>排序(O(NlogN))，利用二分查找: logN</li><li>位图解决</li></ol><h2 id="位图概念">位图概念</h2><p>所谓位图，就是用每一个比特位来存放某种状态，适用于海量数据，数据无重复的场景。通常是用来判断某个数据存不存在的</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212262144541.png" alt=""></p><h2 id="位图实现">位图实现</h2><p>这里底层用了vector，存char类型，一个char占8个比特位。然后提供set接口，说明如下：</p><ul><li>先找要映射的数据在第几个char：<strong>x/8</strong></li><li>再看是在char的第几个位：<strong>x%8</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bitset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">bitset</span>()</span><br><span class="line">&#123;</span><br><span class="line">_bits.<span class="built_in">resize</span>(N / <span class="number">8</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>; <span class="comment">//找第几个char</span></span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>; <span class="comment">//第几个char的第几个位</span></span><br><span class="line">_bits[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>;</span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>;</span><br><span class="line">_bits[i] &amp;= ~(<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">test</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> i = x / <span class="number">8</span>;</span><br><span class="line"><span class="type">size_t</span> j = x % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">return</span> _bits[i] &amp; (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; _bits;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="位图应用">位图应用</h2><ol><li>快速查找某个数据是否在一个集合中</li><li>排序 + 去重</li><li>求两个集合的交集、并集等</li><li>操作系统中磁盘块标记</li></ol><h3 id="几个例子：">几个例子：</h3><blockquote><p>给定100亿个整数，设计算法找到只出现一次的整数？</p></blockquote><p>可以用两个位图，建立kv模型，具体如下：</p><p>kv的统计次数搜索模型</p><ul><li>0次：00</li><li>1次：01</li><li>2次及以上：10</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">twobitset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">size_t</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> inset1 = _bs1.<span class="built_in">test</span>(x);</span><br><span class="line"><span class="type">bool</span> inset2 = _bs2.<span class="built_in">test</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//00</span></span><br><span class="line"><span class="keyword">if</span> (inset1 == <span class="literal">false</span> &amp;&amp; inset2 == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">_bs2.<span class="built_in">set</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inset1 == <span class="literal">false</span> &amp;&amp; inset2 == <span class="literal">true</span>) <span class="comment">//01</span></span><br><span class="line">&#123;</span><br><span class="line">_bs1.<span class="built_in">set</span>(x);</span><br><span class="line">_bs2.<span class="built_in">reset</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inset1 == <span class="literal">true</span> &amp;&amp; inset2 == <span class="literal">false</span>) <span class="comment">//10</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//11</span></span><br><span class="line">_bs1.<span class="built_in">set</span>(x);</span><br><span class="line">_bs2.<span class="built_in">set</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_once_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//01</span></span><br><span class="line"><span class="keyword">if</span> (_bs1.<span class="built_in">test</span>(i) == <span class="literal">false</span> &amp;&amp; _bs2.<span class="built_in">test</span>(i) == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">bitset&lt;N&gt;_bs1;</span><br><span class="line">bitset&lt;N&gt;_bs2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>给两个文件，分别有100亿个整数，我们只有1G内存，如何找到两个文件的交集？<br>两个位图</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1G=1024Mb</span><br><span class="line">1024MB=1024*1024KB</span><br><span class="line">1024*1024KB=1024*1024*1024Byte</span><br><span class="line">2^30， 约等于10亿Byte</span><br></pre></td></tr></table></figure><p>那么100亿整数，就是400亿字节，也就是40G的空间，但是整数的范围就42亿多，那么假设43亿个整数，也就需要43亿个比特位，也就是43亿/8个字节，也就是5亿多字节，大概在0.5G多，可以先依次读取第一个文件中的所有整数，将其映射到一个位图。再读取另一个文件中的所有整数，判断在不在位图中，在就是交集，不在就不是交集。</p><blockquote><p>位图应用变形：一个文件有100亿个int，1G内存，设计算法找到次数不超过两次的所以整数</p></blockquote><ul><li>0次：00</li><li>1次：01</li><li>2次：10</li><li>3次及以上：11</li></ul><h2 id="位图特点：">位图特点：</h2><ul><li>快、节省空间，直接定址法，不存在冲突</li><li>相对局限，只能映射整形</li></ul><h1>布隆过滤器</h1><h2 id="概念">概念</h2><blockquote><p>布隆过滤器是由布隆（Burton Howard Bloom）在1970年提出的 一种紧凑型的、比较巧妙的概率型数据结构，特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存 在”，它是用多个哈希函数，将一个数据映射到位图结构中。此种方式不仅可以提升查询效率，也可以节省大量的内存空间</p></blockquote><h2 id="用处">用处</h2><p>1、可以做黑名单查询，不在黑名单的人一定占大多数，如果不在直接返回，如果在，这个结果可能就不准，继续在从数据库中查询。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271506798.png" alt=""></p><p>2、注册昵称的场景，如果要注册的昵称不存在，直接注册，如果存在，直接提示（可能有误判）</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271508884.png" alt=""></p><h2 id="布隆过滤器实现">布隆过滤器实现</h2><p>字符串哈希算法转成整形去映射一个或者多个位置进行标记</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212262302892.png" alt=""></p><p>下边为布隆过滤器代码，首先确定m的个数，下边m=5倍的n</p><blockquote><p>k为哈希函数的个数，m为布隆过滤器长度，n为插入元素的个数，p为误报率</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271500685.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HashBKDR</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">&#123;</span><br><span class="line">val *= <span class="number">131</span>;</span><br><span class="line">val += ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashAP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">hash ^= ((hash &lt;&lt; <span class="number">7</span>) ^ key[i] ^ (hash &gt;&gt; <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hash ^= (~((hash &lt;&lt; <span class="number">11</span>) ^ key[i] ^ (hash &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashDJB</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// BKDR</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash = <span class="number">5381</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">&#123;</span><br><span class="line">hash += (hash &lt;&lt; <span class="number">5</span>) + ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// N表示准备要映射N个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N, <span class="keyword">class</span> <span class="title class_">K</span> = string, <span class="keyword">class</span> Hash1 = HashBKDR, <span class="keyword">class</span> Hash2=HashAP, <span class="keyword">class</span> Hash3=HashDJB&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BloomFilter</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">void</span> <span class="built_in">Set</span>(<span class="type">const</span> K&amp; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> hash1 = <span class="built_in">Hash1</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash1);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash2 = <span class="built_in">Hash2</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash2);</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash3 = <span class="built_in">Hash3</span>()(key) % (_ratio * N);</span><br><span class="line">_bits-&gt;<span class="built_in">set</span>(hash3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Test</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> hash1 = <span class="built_in">Hash1</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash1) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash2 = <span class="built_in">Hash2</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash2) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> hash3 = <span class="built_in">Hash3</span>()(key) % (_ratio * N);</span><br><span class="line"><span class="keyword">if</span> (_bits-&gt;<span class="built_in">test</span>(hash3) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">size_t</span> _ratio = <span class="number">5</span>;</span><br><span class="line">std::bitset&lt;_ratio* N&gt;* _bits = <span class="keyword">new</span> std::bitset&lt;_ratio* N&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="几个例子">几个例子</h2><blockquote><p>1、给两个文件，分别有100亿个query，我们只有1G内存，如何找到两个文件的交集？（近似算法）</p></blockquote><ul><li>先读取其中一个文件当中的query，将其全部映射到一个布隆过滤器当中。</li><li>然后读取另一个文件当中的query，依次判断每个query是否在布隆过滤器当中，如果在则是交集，不在则不是交集。（这里的在可能会误判）</li></ul><blockquote><p>2、如何扩展BloomFilter使得它支持删除操作</p></blockquote><p>一般布隆过滤器删除可能会影响其他的元素，因为哈希函数可能会映射到相同的位，如果要支持删除操作，在底层继续增加位图，做引用计数的功能，但是会浪费很多空间，所以布隆过滤器一般不支持删除操作。</p><h2 id="哈希切割">哈希切割</h2><blockquote><p>1、给两个文件，分别有100亿个query，我们只有1G内存，如何找到两个文件的交集？（精确算法）</p></blockquote><ul><li>首先需要估算一下这里一个文件的大小，便于确定将一个文件切分为多少个小文件。</li><li>假设平均每个query为20字节，那么100亿个query就是200G，由于我们只有1G内存，这里可以考虑将一个文件切分成400个小文件。</li><li>这里我们将这两个文件分别叫做A文件和B文件，此时我们将A文件切分成了A0~A399共400个小文件，将B文件切分成了B0~B399共400个小文件。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271516166.png" alt=""></p><p>依次读取文件A中query，i=Hash(query)%400，这个query进入Ai号小文件，相同的query一定进入编号相同的小文件</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271600564.png" alt=""></p><ul><li>经过切分后理论上每个小文件的平均大小是512M，因此我们可以将其中一个小文件加载到内存，并放到一个set容器中，再遍历另一个小文件当中的query，依次判断每个query是否在set容器中，如果在则是交集，不在则不是交集。</li><li>当哈希切分并不是平均切分，有可能切出来的小文件中有一些小文件的大小仍然大于1G，此时如果与之对应的另一个小文件可以加载到内存，则可以选择将另一个小文件中的query加载到内存，因为我们只需要将两个小文件中的一个加载到内存中就行了。</li><li>但如果两个小文件的大小都大于1G，那我们可以考虑将这两个小文件再进行一次切分，将其切成更小的文件，方法与之前切分A文件和B文件的方法类似。</li></ul><blockquote><p>2、给一个超过100G大小的log file，log中存着IP地址，设计算法找到出现次数最多的IP地址？与上题条件相同，如何找到top K的IP</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212271603992.png" alt=""></p><p>相同的IP一定进入同一个小文件，然后依次使用map&lt;string,int&gt;对每个小文件统计次数</p><p>TopK，建立一个K值为&lt;ip, count&gt;的小堆。依次加载每个文件，如果某个IP地址出现的次数大于堆顶IP地址出现的次数，则将该IP地址与堆顶的IP地址进行交换，然后再进行一次向下调整，使其仍为小堆，最终比对完所有小文件中的IP地址后，这个小堆当中的K个IP地址就是出现次数top K的IP地址。</p><h2 id="布隆过滤器特点">布隆过滤器特点</h2><p>存在误判：<br>在：不准确的，存在误判<br>不在：准确的，不存在误判</p><p>理论而言：一个值映射的位越多，误判概率越低，但是也不敢映射太多，那么空间消耗就越多</p>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希</title>
      <link href="/posts/775623030/"/>
      <url>/posts/775623030/</url>
      
        <content type="html"><![CDATA[<h1>unordered系列关联式容器</h1><blockquote><p>内部是无序的，查询很快</p></blockquote><p>几个函数说明：</p><table><thead><tr><th>函数声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>operator[]</td><td>返回与key对应的value值</td></tr><tr><td>bucket_count()</td><td>返回桶的个数</td></tr><tr><td>size_t bucket_size(size_t n)const</td><td>返回n号桶有效元素的个数</td></tr><tr><td>size_t bucket(const K&amp; key)</td><td>返回元素key对应的桶号</td></tr></tbody></table><h1>底层结构</h1><blockquote><p>unordered系列的关联式容器之所以效率比较高，是因为其底层使用了哈希结构。</p></blockquote><h2 id="概念">概念</h2><p>通过某种函数(hashFunc)使元素的存储位置与它的关键码之间能够建立  一一映射的关系，那么在查找时通过该函数可以很快找到该元素。</p><p>例如：数据集合{1，7，6，4，5，9}<br>哈希函数设置为：<strong>hash(key) = key % capacity</strong>; <strong>capacity</strong>为存储元素底层空间总的大小</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231541251.png" alt=""></p><h2 id="哈希冲突">哈希冲突</h2><blockquote><p>不同关键字通过相同哈希哈数计算出相同的哈希地址，该种现象称为哈希冲突或哈希碰撞。</p></blockquote><h2 id="哈希函数">哈希函数</h2><p>引起哈希冲突的一个原因可能是：哈希函数设计不够合理。</p><p><strong>哈希函数设计原则：</strong></p><ul><li>哈希函数的定义域必须包括需要存储的全部关键码，而如果散列表允许有m个地址时，其值<br>域必须在0到m-1之间</li><li>哈希函数计算出来的地址能均匀分布在整个空间中</li><li>哈希函数应该比较简单</li></ul><h3 id="除留余数法">除留余数法</h3><p>设散列表中允许的地址数为m，取一个不大于m，但最接近或者等于m的质数p作为除数，<br>按照哈希函数：<strong>Hash(key) = key% p(p&lt;=m)</strong>,将关键码转换成哈希地址</p><h3 id="字符串哈希算法">字符串哈希算法</h3><p><a href="https://www.cnblogs.com/-clq/archive/2012/05/31/2528153.html">字符串哈希算法</a></p><h2 id="解决哈希冲突">解决哈希冲突</h2><h3 id="闭散列">闭散列</h3><p>闭散列：也叫开放定址法，当发生哈希冲突时，如果哈希表未被装满，说明在哈希表中必然还有空位置，那么可以把key存放到冲突位置中的“下一个” 空位置中去。那如何寻找下一个空位置</p><h4 id="线性探测">线性探测</h4><blockquote><p>从发生冲突的位置开始，依次向后探测，直到寻找到下一个空位置为止</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231551253.png" alt=""></p><p>线性探测缺点：一旦发生哈希冲突，所有的冲突连在一起，容易产生数据“堆积”，即：不同<br>关键码占据了可利用的空位置，使得寻找某关键码的位置需要许多次比较，导致搜索效率降<br>低</p><h4 id="二次探测">二次探测</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231600891.png" alt=""></p><p>每次平方的探测：<strong>hash+i^2 (i&gt;=0)</strong></p><h4 id="负载因子">负载因子</h4><p>负载因子：填入表中元素个数 / 散列表的长度</p><p>负载因子越小越不容易冲突，但是空间利用率比较低，一般设置0.7左右</p><h4 id="代码">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CloseHash</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">State</span></span><br><span class="line">    &#123;</span><br><span class="line">        EXIST,</span><br><span class="line">        DELETE,</span><br><span class="line">        EMPTY</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::pair&lt;K, V&gt; _kv;</span><br><span class="line">        State _state = EMPTY;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashFunc</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">size_t</span>)key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashFunc</span>&lt;string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">            &#123;</span><br><span class="line">                val *= <span class="number">131</span>;</span><br><span class="line">                val += ch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> HashTable</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">bool</span> <span class="built_in">insert</span>(<span class="type">const</span> pair&lt;K, V&gt; &amp;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(data.first))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span> || _size * <span class="number">10</span> / _tables.<span class="built_in">size</span>() &gt;= <span class="number">7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">size_t</span> newSize = _tables.<span class="built_in">size</span>() == <span class="number">0</span> ? <span class="number">10</span> : _tables.<span class="built_in">size</span>() * <span class="number">2</span>;</span><br><span class="line">                HashTable&lt;K, V, Hash&gt; newHT;</span><br><span class="line">                newHT._tables.<span class="built_in">resize</span>(newSize);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> e : _tables)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e._state == EXIST)</span><br><span class="line">                    &#123;</span><br><span class="line">                        newHT.<span class="built_in">insert</span>(e._kv);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _tables.<span class="built_in">swap</span>(newHT._tables);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(data.first) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (_tables[hashi]._state == EXIST)</span><br><span class="line">            &#123;</span><br><span class="line">                hashi++;</span><br><span class="line">                hashi %= _tables.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _tables[hashi]._kv = data;</span><br><span class="line">            _tables[hashi]._state = EXIST;</span><br><span class="line">            _size++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">HashData&lt;K, V&gt; *<span class="title">find</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> start = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">size_t</span> hashi = start;</span><br><span class="line">            <span class="keyword">while</span> (_tables[hashi]._state != EMPTY)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[hashi]._state != DELETE &amp;&amp; _tables[hashi]._kv.first == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &amp;_tables[hashi];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                hashi++;</span><br><span class="line">                hashi %= _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (hashi == start)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            HashData&lt;K, V&gt; *ret = <span class="built_in">find</span>(key);</span><br><span class="line">            <span class="keyword">if</span> (ret)</span><br><span class="line">            &#123;</span><br><span class="line">                ret-&gt;_state = DELETE;</span><br><span class="line">                --_size;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i]._state == EXIST)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;[%llu:%d] &quot;</span>, i, _tables[i]._kv.first);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;[%llu:*] &quot;</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;HashData&lt;K, V&gt;&gt; _tables;</span><br><span class="line">        <span class="type">size_t</span> _size = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">44</span>&#125;;</span><br><span class="line">        HashTable&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ht;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : a)</span><br><span class="line">        &#123;</span><br><span class="line">            ht.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(e, e));</span><br><span class="line">        &#125;</span><br><span class="line">        ht.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">        ht.<span class="built_in">erase</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ht.<span class="built_in">find</span>(<span class="number">44</span>)-&gt;_kv.first &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; ht.<span class="built_in">find</span>(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">        ht.<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开散列">开散列</h3><p>开散列法又叫链地址法(开链法)，首先对关键码集合用散列函数计算散列地址，具有相同地<br>址的关键码归于同一子集合，每一个子集合称为一个桶，各个桶中的元素通过一个单链表链<br>接起来，各链表的头结点存储在哈希表中。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212231612112.png" alt=""></p><h3 id="开散列闭散列比较">开散列闭散列比较</h3><p>应用链地址法（开散列）处理溢出，需要增设链接指针，似乎增加了存储开销。事实上：由于开地址法必须保持大量的空闲空间以确保搜索效率，如二次探查法要求装载因子a &lt;=  0.7，而表项所占空间又比指针大的多，所以使用链地址法反而比开地址法节省存储空间。</p><h1>unordered_map和unordered_set封装</h1><h2 id="hash表（开散列）">hash表（开散列）</h2><p>几个点：</p><ul><li>模板类，第一个模板参数是K，第二个参数T，上层决定这个T是什么</li><li>传入仿函数KeyOfT，这个可以从T类型中取K</li><li>insert插入，返回值设为迭代器和bool的键值对</li><li>迭代器（一个是节点指针，一个是哈希表指针）</li><li>迭代器用了哈希表，需要在迭代器前面进行哈希表的声明</li><li>迭代器有哈希表的指针，所以要将迭代器类，声明为哈希表类的友元</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashFunc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">size_t</span>)key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HashFunc</span>&lt;string&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string &amp;key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : key)</span><br><span class="line">        &#123;</span><br><span class="line">            val *= <span class="number">131</span>;</span><br><span class="line">            val += ch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OpenHash</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">HashData</span></span><br><span class="line">    &#123;</span><br><span class="line">        T _data;</span><br><span class="line">        HashData&lt;T&gt; *_next;</span><br><span class="line">        <span class="built_in">HashData</span>(<span class="type">const</span> T &amp;data)</span><br><span class="line">            : _data(data), _next(<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">HashTable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">__HashIterator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> HashData&lt;T&gt; Node;</span><br><span class="line">        <span class="keyword">typedef</span> HashTable&lt;K, T, Hash, KeyOfT&gt; HT;</span><br><span class="line">        <span class="keyword">typedef</span> __HashIterator&lt;K, T, Hash, KeyOfT&gt; self;</span><br><span class="line"></span><br><span class="line">        Node *_node;</span><br><span class="line">        HT *_pht;</span><br><span class="line"></span><br><span class="line">        __HashIterator(Node *node, HT *pht)</span><br><span class="line">            : _node(node), _pht(pht)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node-&gt;_data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T *<span class="keyword">operator</span>-&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;_node-&gt;_data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self &amp;<span class="keyword">operator</span>++()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_node-&gt;_next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果当前桶的下一个不为空，直接走到下一个位置</span></span><br><span class="line">                _node = _node-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 说明当前位置为空，要找下一个不为空的桶</span></span><br><span class="line">                Hash hash;</span><br><span class="line">                KeyOfT kot;</span><br><span class="line">                <span class="type">size_t</span> i = <span class="built_in">hash</span>(<span class="built_in">kot</span>(_node-&gt;_data)) % _pht-&gt;<span class="built_in">size</span>();</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">for</span> (; i &lt; _pht-&gt;<span class="built_in">size</span>(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_pht-&gt;_tables[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        _node = _pht-&gt;_tables[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == _pht-&gt;<span class="built_in">size</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    _node = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node != s._node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _node == s._node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Hash</span>, <span class="keyword">class</span> <span class="title class_">KeyOfT</span>&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">HashTable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">struct</span> <span class="title class_">__HashIterator</span>&lt;K,T,Hash,KeyOfT&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> HashData&lt;T&gt;</span><br><span class="line">            Node;</span><br><span class="line">        <span class="keyword">typedef</span> __HashIterator&lt;K, T, Hash, KeyOfT&gt; iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iterator</span>(_tables[i], <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="literal">nullptr</span>, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">inline</span> <span class="type">size_t</span> __stl_next_prime(<span class="type">size_t</span> n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">static</span> <span class="type">const</span> <span class="type">size_t</span> __stl_num_primes = <span class="number">28</span>;</span><br><span class="line">            <span class="comment">// 按素数，扩容，stl源码中</span></span><br><span class="line">            <span class="type">static</span> <span class="type">const</span> <span class="type">size_t</span> __stl_prime_list[__stl_num_primes] =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="number">53</span>, <span class="number">97</span>, <span class="number">193</span>, <span class="number">389</span>, <span class="number">769</span>,</span><br><span class="line">                    <span class="number">1543</span>, <span class="number">3079</span>, <span class="number">6151</span>, <span class="number">12289</span>, <span class="number">24593</span>,</span><br><span class="line">                    <span class="number">49157</span>, <span class="number">98317</span>, <span class="number">196613</span>, <span class="number">393241</span>, <span class="number">786433</span>,</span><br><span class="line">                    <span class="number">1572869</span>, <span class="number">3145739</span>, <span class="number">6291469</span>, <span class="number">12582917</span>, <span class="number">25165843</span>,</span><br><span class="line">                    <span class="number">50331653</span>, <span class="number">100663319</span>, <span class="number">201326611</span>, <span class="number">402653189</span>, <span class="number">805306457</span>,</span><br><span class="line">                    <span class="number">1610612741</span>, <span class="number">3221225473</span>, <span class="number">4294967291</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; __stl_num_primes; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (__stl_prime_list[i] &gt; n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> __stl_prime_list[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">HashTable</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *cur = _tables[i];</span><br><span class="line">                <span class="keyword">while</span> (cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    Node *next = cur-&gt;_next;</span><br><span class="line">                    <span class="keyword">delete</span> cur;</span><br><span class="line">                    cur = next;</span><br><span class="line">                &#125;</span><br><span class="line">                _tables[i] = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> T &amp;data)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            KeyOfT kot;</span><br><span class="line">            Hash hash;</span><br><span class="line"></span><br><span class="line">            iterator ret = <span class="built_in">find</span>(<span class="built_in">kot</span>(data));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(ret, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == _size)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// size_t newSize = _tables.size() == 0 ? 10 : 2 * _tables.size();</span></span><br><span class="line">                vector&lt;Node *&gt; newTables;</span><br><span class="line">                newTables.<span class="built_in">resize</span>(__stl_next_prime(_tables.<span class="built_in">size</span>()), <span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Node *cur = _tables[i];</span><br><span class="line">                    <span class="keyword">while</span> (cur)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Node *next = cur-&gt;_next;</span><br><span class="line">                        <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(<span class="built_in">kot</span>(cur-&gt;_data)) % newTables.<span class="built_in">size</span>();</span><br><span class="line">                        cur-&gt;_next = newTables[hashi];</span><br><span class="line">                        newTables[hashi] = cur;</span><br><span class="line">                        cur = next;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    _tables[i] = <span class="literal">nullptr</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                _tables.<span class="built_in">swap</span>(newTables);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(<span class="built_in">kot</span>(data)) % _tables.<span class="built_in">size</span>();</span><br><span class="line">            Node *newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(data);</span><br><span class="line">            newNode-&gt;_next = _tables[hashi];</span><br><span class="line">            _tables[hashi] = newNode;</span><br><span class="line">            ++_size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="built_in">iterator</span>(newNode, <span class="keyword">this</span>), <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">find</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Hash hash;</span><br><span class="line">            KeyOfT kot;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            Node *cur = _tables[hashi];</span><br><span class="line">            <span class="keyword">while</span> (cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">kot</span>(cur-&gt;_data) == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">iterator</span>(cur, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cur = cur-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (_tables.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Hash hash;</span><br><span class="line">            <span class="type">size_t</span> hashi = <span class="built_in">hash</span>(key) % _tables.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            Node *cur = _tables[hashi];</span><br><span class="line">            Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;_kv.first == key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 1、头删</span></span><br><span class="line">                    <span class="comment">// 2、中间删</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (parent == <span class="literal">nullptr</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _tables[hashi] = cur-&gt;_next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        parent-&gt;_next = cur-&gt;_next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">delete</span> cur;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;_next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _tables.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 桶的个数</span></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">bucket_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _tables.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_tables[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    ++num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">size_t</span> <span class="title">maxbucket_lenth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">size_t</span> maxlen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">                Node *cur = _tables[i];</span><br><span class="line">                <span class="keyword">while</span> (cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    cur = cur-&gt;_next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (len &gt; maxlen)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxlen = len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> maxlen;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;Node *&gt; _tables;</span><br><span class="line">        <span class="type">size_t</span> _size = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unordered-map">unordered_map</h2><p>unordered_map的底层是哈希表，第二个模板参数传个pair&lt;K,V&gt;，同时要配对应的仿函数，返回first</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> st</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> unordered_map</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> KeyOfT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> K &amp;<span class="built_in">operator</span>()(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> kv.first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> OpenHash::HashTable&lt;K, pair&lt;K, V&gt;, Hash, KeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">begin</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">insert</span>(kv);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V &amp;<span class="keyword">operator</span>[](<span class="type">const</span> K &amp;key)</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;iterator, <span class="type">bool</span>&gt; ret = _ht.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>()));</span><br><span class="line">            <span class="keyword">return</span> ret.first-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        OpenHash::HashTable&lt;K, pair&lt;K, V&gt;, Hash, KeyOfT&gt; _ht;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; countMap;</span><br><span class="line">        string arr[] = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            countMap[e]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;kv : countMap)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; kv.first &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; kv.second &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unordered-set">unordered_set</h2><p>unordered_set的底层也是哈希表，第二个模板参数传个K，同时要配对应的仿函数，返回K就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> st</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">Hash</span> = HashFunc&lt;K&gt;&gt;</span><br><span class="line">    <span class="keyword">class</span> unordered_set</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> KeyOfT</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> K &amp;<span class="built_in">operator</span>()(<span class="type">const</span> K&amp; key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> OpenHash::HashTable&lt;K, K, Hash, KeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">begin</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _ht.<span class="built_in">insert</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        OpenHash::HashTable&lt;K, K, Hash, KeyOfT&gt; _ht;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test_set</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        unordered_set&lt;string&gt; s;</span><br><span class="line">        string arr[] = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e: arr)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> e: s)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map和set</title>
      <link href="/posts/3902343519/"/>
      <url>/posts/3902343519/</url>
      
        <content type="html"><![CDATA[<p>关联式容器也是用来存储数据的，与序列式容器不同的是，其里面存储的是&lt;key, value&gt;结构的键值对，在数据检索时比序列式容器效率更高</p><h1>set</h1><p>排序+去重</p><p>find找不到会返回end</p><p>lower_bound(val)  返回大于或者等于val的位置<br>upper_bound(val) 返回大于val的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">3</span>,<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>,<span class="number">3</span>, <span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function">multiset&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(a, a + <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">count</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find时，如果有多个值，返回中序的第一个</span></span><br><span class="line"><span class="keyword">auto</span> pos = s.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span> (pos != s.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *pos &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">++pos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有的3</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">pos = s.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != s.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">erase</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1>map</h1><p>重载的方括号</p><ul><li>map中有这个key，返回value的引用。（查找、修改value）</li><li>map中没有这个key，会插入一个pair(key,V())，返回value的引用。（插入+修改）</li></ul><p>具体点：</p><ul><li>key在map中，返回pair(key_iterator, false)       这个<strong>pair</strong>是insert返回的</li><li>key不在map中，返回pair(new_key_iterator, true)</li></ul><p>实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V&amp; <span class="keyword">operator</span>[](<span class="type">const</span> K&amp; key)</span><br><span class="line">&#123;</span><br><span class="line">pair&lt;iterator,<span class="type">bool</span>&gt;ret=<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>()));</span><br><span class="line"><span class="keyword">return</span> (ret.first)-&gt;second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>map和set封装</h1><h2 id="迭代器（红黑树）">迭代器（红黑树）</h2><blockquote><p>迭代器的begin是中序的第一个节点，也就是最左节点，这里将end设置为空，封装重点是++和–的逻辑</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212201523942.png" alt=""></p><h3 id="重载">重载++</h3><ul><li>右子树不为空，++就是找右子树中序第一个（最左节点）</li><li>右子树为空，++找孩子不是父亲右的那个祖先</li></ul><h3 id="重载–">重载–</h3><ul><li>左子树不为空，–就是找左子树的最右节点</li><li>左子树为空，–找孩子不是父亲左的那个祖先</li></ul><h3 id="代码">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Ref</span>, <span class="keyword">class</span> <span class="title class_">Ptr</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__RBTreeIterator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> RBTreeNode&lt;T&gt; Node;</span><br><span class="line">    Node *_node;</span><br><span class="line">    <span class="keyword">typedef</span> __RBTreeIterator&lt;T, Ref, Ptr&gt; self;</span><br><span class="line"></span><br><span class="line">    __RBTreeIterator(Node *node) : _node(node)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T &amp;<span class="keyword">operator</span>*()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node-&gt;_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr <span class="keyword">operator</span>-&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;_node-&gt;_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self &amp;<span class="keyword">operator</span>++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_node-&gt;_right) <span class="comment">// 右子树不为空，右子树的最左就是下一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *left = _node-&gt;_right;</span><br><span class="line">            <span class="keyword">while</span> (left-&gt;_left) <span class="comment">// 有个问题，当前节点如果是25，下个节点是27，left指向27，这样写，left变成空</span></span><br><span class="line">            &#123;</span><br><span class="line">                left = left-&gt;_left;</span><br><span class="line">            &#125;</span><br><span class="line">            _node = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 右子树为空，找孩子不是父亲右的那个祖先</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *parent = _node-&gt;_parent;</span><br><span class="line">            Node *cur = _node;</span><br><span class="line">            <span class="keyword">while</span> (parent &amp;&amp; cur == parent-&gt;_right)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = parent;</span><br><span class="line">                parent = parent-&gt;_parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _node = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self &amp;<span class="keyword">operator</span>--()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_node-&gt;_left) <span class="comment">// 左子树不为空，左子树的最右就是下一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *right = _node-&gt;_left;</span><br><span class="line">            <span class="keyword">while</span> (right-&gt;_right)</span><br><span class="line">            &#123;</span><br><span class="line">                right = right-&gt;_right;</span><br><span class="line">            &#125;</span><br><span class="line">            _node = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 左子树为空，找孩子不是父亲左的那个祖先</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node *parent = _node-&gt;_parent;</span><br><span class="line">            Node *cur = _node;</span><br><span class="line">            <span class="keyword">while</span> (parent &amp;&amp; cur == parent-&gt;_left)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = parent;</span><br><span class="line">                parent = parent-&gt;_parent;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _node = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node != s._node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> self &amp;s) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _node == s._node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="map封装">map封装</h2><p>map的红黑树 <strong>RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt;</strong>，第一个模板参数是key，第二个模板参数是pair</p><h3 id="代码-2">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">map</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MapKeyOfT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> K &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> kv.first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(kv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V &amp;<span class="keyword">operator</span>[](<span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(key, <span class="built_in">V</span>())).first-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RBTree&lt;K, pair&lt;K, V&gt;, MapKeyOfT&gt; <span class="type">_t</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="set封装">set封装</h2><p>set的红黑树 <strong>RBTree&lt;K, K, SetKeyOfT&gt;</strong>，第一个模板参数是key，第二个模板参数是pair</p><h3 id="代码-3">代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">set</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SetKeyOfT</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> K &amp;<span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> RBTree&lt;K, K, SetKeyOfT&gt;::iterator iterator;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;iterator, <span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(<span class="type">const</span> K &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">_t</span>.<span class="built_in">insert</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RBTree&lt;K, K, SetKeyOfT&gt; <span class="type">_t</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/posts/4171019779/"/>
      <url>/posts/4171019779/</url>
      
        <content type="html"><![CDATA[<h2 id="红黑树概念">红黑树概念</h2><blockquote><p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或 Black。 通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212141540682.png" alt=""></p><h2 id="红黑树的性质">红黑树的性质</h2><ol><li>每个结点不是红色就是黑色</li><li>根节点是黑色的</li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的，<strong>树中没有连续的红节点</strong></li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点</li><li>每个叶子结点都是黑色的(此处的叶子结点指的是空结点)</li></ol><p>为什么满足上面的性质，红黑树就能保证：其最长路径中节点个数不会超过最短路径中节点个数的两倍？</p><p>极限最短：全黑<br>极限最长：一黑一红</p><h2 id="红黑树结构">红黑树结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED,</span><br><span class="line">    BLACK</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RBTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_parent;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_left;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_right;</span><br><span class="line">    pair&lt;K, V&gt; _kv;</span><br><span class="line">    Color _col;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RBTreeNode</span>(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span><br><span class="line">        : _parent(<span class="literal">nullptr</span>), _left(<span class="literal">nullptr</span>), _right(<span class="literal">nullptr</span>), _kv(kv), _col(RED)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> RBTreeNode&lt;K, V&gt; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="红黑树操作">红黑树操作</h2><h3 id="插入">插入</h3><blockquote><p>红黑树的叔叔是关键<br>u存在且为红，变色继续向上处理<br>u不存在或存在且为黑，旋转（单旋+双旋）+变色</p></blockquote><p>情况一：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），uncle存在且为红</p><p>处理：p、u变黑，g变红，继续把g当成cur</p><ul><li>g不是根，往上继续处理</li><li>g是根，再把g变成黑色</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181030394.png" alt=""></p><p>情况二：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在/u存在且为黑（<strong>单旋+变色</strong>）</p><p>处理：</p><ul><li>g右单旋</li><li>p变黑，g变红</li></ul><p>说明：uncle的情况有两种</p><ul><li>如果u节点不存在，那么cur一定是新插入节点，因为如果cur不是新插入节点，则cur和p一定有个节点颜色是黑色，就不满足性质4：每条路径黑色节点的个数相同。</li><li>如果u节点存在，那么cur节点原来的颜色一定是黑色的（保证性质4），现在看到其是红色的原因是因为cur的子树在调整的过程中将cur节点的颜色由黑色改为红色。</li></ul><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181055273.png" alt=""></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181342714.png" alt=""></p><p>情况三：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在/u存在且为黑（<strong>双旋+变色</strong>）</p><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181111798.png" alt=""></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181446123.png" alt=""></p><p>插入代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 还得链接上</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了应该插入的位置</span></span><br><span class="line"><span class="keyword">while</span> (parent &amp;&amp; parent-&gt;_col == RED) <span class="comment">// parent不为空并且颜色为红继续处理</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看parent是grandfather的左还是右</span></span><br><span class="line"><span class="keyword">if</span> (parent == grandfather-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line">Node *uncle = grandfather-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">// 1、右单旋+变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先对p 左单旋，再对g 右单旋，最后变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// parent=grand-&gt;right</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line">Node *uncle = grandfather-&gt;_left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//         c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查">检查</h3><ul><li>根是黑色</li><li>没有连续的红节点</li><li>每条路径的黑色节点数量相同</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_root-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;根节点不是黑色&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bench_mark = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(_root, <span class="number">0</span>, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prev_check</span><span class="params">(Node *root, <span class="type">int</span> bnum, <span class="type">int</span> &amp;bench_mark)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bench_mark == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">bench_mark = bnum;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bench_mark != bnum)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;某条黑色节点的数量不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == BLACK)</span><br><span class="line">&#123;</span><br><span class="line">++bnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;存在连续的红色节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(root-&gt;_left, bnum, bench_mark) &amp;&amp; <span class="built_in">prev_check</span>(root-&gt;_right, bnum, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL树</title>
      <link href="/posts/2536969901/"/>
      <url>/posts/2536969901/</url>
      
        <content type="html"><![CDATA[<h2 id="AVL概念">AVL概念</h2><blockquote><p>当向二叉搜索树中插入新结点后，如果能保证每个结点的左右子树高度之差的绝对值不超过1(需要对树中的结点进行调整)，即可降低树的高度，从而减少平均搜索长度。</p></blockquote><p>一棵AVL树或者是空树，或者是具有以下性质的二叉搜索树：</p><ul><li>它的左右子树都是AVL树</li><li>左右子树高度之差(简称平衡因子)的绝对值不超过1(-1/0/1)</li></ul><p>如果一棵二叉搜索树是高度平衡的，它就是AVL树。如果它有n个结点，其高度可保持在<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，搜索时间复杂度O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">log_2 n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span>)</p><h2 id="AVL操作">AVL操作</h2><h3 id="插入">插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 插入先找位置</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先记录parent</span></span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入的比当前值小，往左边走</span></span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入值比左边大，往右边走</span></span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 相等的位置</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 走到这里cur为空，说明，找到了该插入的位置</span></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入成功。现在需要控制平衡，更新平衡因子</span></span><br><span class="line"><span class="comment">// 向上更新直到parent为空</span></span><br><span class="line"><span class="keyword">while</span> (parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// else if(parent-&gt;_bf==1 || parent-&gt;_bf==-1)</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur = parent;</span></span><br><span class="line"><span class="comment">// parent = parent-&gt;_parent;</span></span><br><span class="line">parent = parent-&gt;_parent;</span><br><span class="line">cur = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右单旋</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="built_in">RotateRL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="built_in">RotateLR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整完成之后break;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断平衡">判断平衡</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _is_balance(_root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_height</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> _is_balance(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> diff = right-left;</span><br><span class="line"><span class="keyword">if</span> (diff != root-&gt;_bf)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; root-&gt;_kv.first &lt;&lt; <span class="string">&quot; 平衡因子异常&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(diff) &lt; <span class="number">2</span> &amp;&amp; _is_balance(root-&gt;_left) &amp;&amp; _is_balance(root-&gt;_right);</span><br><span class="line"><span class="comment">// if(abs(left-right)&gt;=2)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡因子更新">平衡因子更新</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131300912.png" alt=""></p><p>更新平衡因子的规则</p><ul><li>新增在右，parent-&gt;bf++，新增在左，parent-&gt;bf–</li><li>更新后，parent-&gt;bf  == 1 or -1, 说明parent插入前的平衡因子是0，说明左右子树高度相等，插入后有一边高，parent高度变了，需要继续往上更新</li><li>更新后，parent-&gt;bf == 0，说明parent插入前的平衡因子是1 or -1， 说明左右子树一边高一边低，插入后两边一样高，插入填上了矮的那边，parent所在子树高度不变，不需要往上更新</li><li>更新后，parent-&gt;bf == 2 or -2 ，说明parent插入前的平衡因子是1 or -1，已经平衡临界值，插入后变成2 or -2，打破平衡，parent所在子树需要旋转处理</li><li>更新后，parent-&gt;bf &gt;2 or &lt; -2，不可能，如果存在，则说明插入前就不是AVL树，需要去检查之前操作的问题</li></ul><h2 id="旋转的场景">旋转的场景</h2><p>旋转的价值和意义：</p><ul><li>平衡</li><li>降低高度（高度恢复到插入之前的样子）</li></ul><h3 id="左单旋">左单旋</h3><h4 id="情景分析">情景分析</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131542366.png" alt=""></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131543737.png" alt=""></p><p>具体进行左旋的时候也要分两种情况</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131544284.png" alt=""></p><p>调整完成之后，parent的平衡因子变为0，subR变为新的根，同时平衡因子也变为0</p><h4 id="代码">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateL</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//右边高</span></span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"></span><br><span class="line">parent-&gt;_right = subRL;</span><br><span class="line"><span class="keyword">if</span>(subRL)</span><br><span class="line">&#123;</span><br><span class="line">subRL-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line">subR-&gt;_left = parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(parent==_root)</span><br><span class="line">&#123;</span><br><span class="line">_root = subR;</span><br><span class="line">subR-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ppNode-&gt;_left=parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subR-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右单旋">右单旋</h3><h4 id="情景分析‘">情景分析‘</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131547708.png" alt=""></p><h4 id="代码-2">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//右单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateR</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//左边高</span></span><br><span class="line">Node* subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先记录一些parent的父亲</span></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让subL的右给parent的左，然后parent做subL的右，subL做新的根</span></span><br><span class="line">parent-&gt;_left = subLR;</span><br><span class="line"><span class="comment">// 注意 要判断subLR是不是空</span></span><br><span class="line"><span class="keyword">if</span>(subLR)</span><br><span class="line">&#123;</span><br><span class="line">subLR-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subL-&gt;_right = parent;</span><br><span class="line">parent-&gt;_parent = subL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里也注意,</span></span><br><span class="line"><span class="keyword">if</span>(_root==parent)</span><br><span class="line">&#123;</span><br><span class="line">_root = subL;</span><br><span class="line">subL-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ppNode-&gt;_left == parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后让suL的parent指向ppNode</span></span><br><span class="line">subL-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右旋">左右旋</h3><h4 id="情景分析-2">情景分析</h4><p>三种情况：</p><p>1、在b新增，那么60节点的平衡因子是-1<br>2、在c新增，那么60节点的平衡因子是1</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131548304.png" alt=""></p><p>3、subLR就是新增</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131609243.png" alt=""></p><h4 id="代码-3">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateLR</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"><span class="type">int</span> bf = subLR-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateL</span>(parent-&gt;_left);</span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，subLR变成新的根</span></span><br><span class="line">subLR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在b插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// subLR就是新增</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在c插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="右左旋">右左旋</h3><h4 id="情景分析-3">情景分析</h4><p>1、新增在b，那么subRL平衡因子变成-1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为0，subR就是90的平衡因子变成1.</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212132009280.png" alt=""></p><p>2、新增在c，那么subRL平衡因子变成1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为-1，subR就是90的平衡因子变成0。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937234.png" alt=""></p><p>3、新增就是subRL，subRL平衡因子为0，调整完成后都是0</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937964.png" alt=""></p><h4 id="代码-4">代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateRL</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"><span class="type">int</span> bf = subRL-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateR</span>(subR);</span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"></span><br><span class="line">subRL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断subRL的平衡因子是多少</span></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">subR-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>606. 根据二叉树创建字符串</title>
      <link href="/posts/1853189792/"/>
      <url>/posts/1853189792/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/construct-string-from-binary-tree/">606. 根据二叉树创建字符串</a></p><h2 id="我的错误思路">我的错误思路</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// s+=&#x27;)&#x27;;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=(root-&gt;val+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&quot;()&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确思路">正确思路</h2><p>还是前序遍历，根、左、右<br>但是要求将左子树和右子树括起来<br>如果不先考虑去括号的话</p><ul><li>先加当前节点的值</li><li>加 (</li><li>递归处理左子树</li><li>加 ）</li><li>加 (</li><li>递归处理右子树</li><li>加 )</li></ul><p>考虑去括号</p><ul><li>左右子树都为空，都去掉</li><li>右为空，去掉右</li><li>左为空，右不为空，不能去掉左</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="comment">//左边不为空，或者左边为空但是右边不为空，保留</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="另一种写法">另一种写法</h2><p>这种写法有个不好的点，传值返回消耗稍微有点多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line">        string str;</span><br><span class="line">        str+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左边不为空，或者右边不为空左边为空，都需要加括号</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;left);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;right);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>236. 二叉树的最近公共祖先</title>
      <link href="/posts/4090094991/"/>
      <url>/posts/4090094991/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092158148.png" alt=""></p><h2 id="解法1">解法1</h2><p>规则：</p><p>一个是左子树中的节点，一个是右子树中的节点，那么他就是最近的公共祖先</p><p>这种做法的时间复杂度是O(H*N)，如果公共祖先在很下面，时间复杂度就比较高</p><p>每次找高度次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Find</span><span class="params">(TreeNode* root, TreeNode* x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*if(root==x)</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;left, x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;right,x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        return false;*/</span></span><br><span class="line">    <span class="comment">//更好的写法</span></span><br><span class="line">    retur root==x||<span class="built_in">Find</span>(root-&gt;left,x)||<span class="built_in">Find</span>(root-&gt;right,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==p||root==q)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> pInLeft,pInRight,qInLeft,qInRight;</span><br><span class="line">        pInLeft=<span class="built_in">Find</span>(root-&gt;left, p);</span><br><span class="line">        pInRight=!pInLeft;</span><br><span class="line"></span><br><span class="line">        qInLeft=<span class="built_in">Find</span>(root-&gt;left, q);</span><br><span class="line">        qInRight=!qInLeft;</span><br><span class="line">        <span class="comment">//1、一个在左一个在右，root就是最近公共祖先</span></span><br><span class="line">        <span class="comment">//2、都在左，递归去左子树找</span></span><br><span class="line">        <span class="comment">//3、都在右，递归去右子树找</span></span><br><span class="line">        <span class="keyword">if</span>((pInLeft&amp;&amp;qInRight)||(pInRight&amp;&amp;qInLeft))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInLeft&amp;&amp;qInLeft)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInRight&amp;&amp;qInRight)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;pp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解法2">解法2</h2><p>用栈记录路径，时间复杂度为O(N)</p><p>找6的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302061.png" alt=""></p><p>找4的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302985.png" alt=""></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101237692.png" alt=""></p><p>我自己写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(TreeNode* root, TreeNode* x, stack&lt;TreeNode*&gt;&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;left, x, s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;right, x ,s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt;s1;</span><br><span class="line">        stack&lt;TreeNode*&gt;s2;</span><br><span class="line">        <span class="built_in">find</span>(root,p, s1);</span><br><span class="line">        <span class="built_in">find</span>(root,q, s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while(!s1.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s1.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s1.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// while(!s2.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s2.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s2.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>()&amp;&amp;!s2.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">top</span>()==s2.<span class="built_in">top</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">size</span>()==s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1.<span class="built_in">size</span>()&gt;s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105. 从前序与中序遍历序列构造二叉树</title>
      <link href="/posts/2058783557/"/>
      <url>/posts/2058783557/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101725948.png" alt=""></p><p>前序构建树</p><p>其中，通过preoder确定根，然后通过inorder分左右子树</p><p>比如上边图片的例子，通过preorder知道3为根，查找inorder，找到3所在的位置，分成中序的两个区间，记录左子树节点的个数，将前序序列也分为两个区间，然后递归处理左子树和右子树</p><p>我写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; preorder, vector&lt;<span class="type">int</span>&gt; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> mid= <span class="built_in">find</span>(inorder.<span class="built_in">begin</span>(),inorder.<span class="built_in">end</span>(), preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> nl=mid-inorder.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">        TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        root-&gt;left=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>,preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(inorder.<span class="built_in">begin</span>(),mid));</span><br><span class="line">        root-&gt;right=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl, preorder.<span class="built_in">end</span>()) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(mid+<span class="number">1</span>,inorder.<span class="built_in">end</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="另一种写法">另一种写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101815889.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102. 二叉树的层序遍历</title>
      <link href="/posts/232521577/"/>
      <url>/posts/232521577/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212091957445.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> h =<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">v</span>(h, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录上一层节点的数量</span></span><br><span class="line">        <span class="type">int</span> pre=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遇到的难点1、怎么确定每层的节点</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(pre==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre=cnt;</span><br><span class="line">                i++;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v[i].<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            pre--;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简洁写法">简洁写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092004473.png" alt=""></p><h2 id="双队列解法">双队列解法</h2><p>一个队列存节点指针<br>一个队列存层数</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092012600.png" alt=""></p><p>还是要求深度，要不还是不大好搞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;level;</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">            level.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> h=<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">vv</span>(h,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* front = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="type">int</span> pre=level.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            level.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            vv[pre].<span class="built_in">push_back</span>(front-&gt;val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;left);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;right);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 力扣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/posts/2091589126/"/>
      <url>/posts/2091589126/</url>
      
        <content type="html"><![CDATA[<h1>二叉搜索树概念</h1><blockquote><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树:</p><ul><li>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值</li><li>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值</li><li>它的左右子树也分别为二叉搜索树</li></ul></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081211954.png" alt=""></p> <span id="more"></span><h1>二叉搜索树实现</h1><h2 id="结构框架">结构框架</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BSTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *left;</span><br><span class="line">BSTreeNode *right;</span><br><span class="line">K _key;</span><br><span class="line"><span class="built_in">BSTreeNode</span>(<span class="type">const</span> K &amp;key) : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>), _key(key)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> BSTreeNode&lt;K&gt; Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="构造">构造</h2><p>让编译器提供个默认生成的就可以了，如果不写这个，又写了拷贝构造，编译器就不会自己自动生成了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BSTree</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><h2 id="拷贝构造">拷贝构造</h2><p>递归拷贝左，右，根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BSTree</span>(<span class="type">const</span> BSTree&lt;K&gt; &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">_root = _copy(t._root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node *_copy(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// TODO 拷贝构造 赋值运算符重载</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(root-&gt;_key);</span><br><span class="line"></span><br><span class="line">node-&gt;left = _copy(root-&gt;left);</span><br><span class="line">node-&gt;right = _copy(root-&gt;right);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符重载">赋值运算符重载</h2><p>写完拷贝构造之后可以直接用现在写法就OK了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BSTree&lt;K&gt; <span class="keyword">operator</span>=(BSTree&lt;K&gt; t)</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_root, t._root);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="析构">析构</h2><p>递归，左、右、根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _destory(Node *&amp;root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">_destory(root-&gt;left);</span><br><span class="line">_destory(root-&gt;right);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入">插入</h2><p>比它大往右走，比他小往左走，走到空，找它父亲链接起来</p><h3 id="非递归代码">非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// key==cur-&gt;key</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里cur走到了空 进行插入</span></span><br><span class="line">Node *new_node = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码">递归代码</h3><p>重点是参数列表的引用<br>如果走到了root为空，说明到了该插入的位置，现在的root就是上一层父亲左孩子或者右孩子那个指针的别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _insert_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历">遍历</h2><p>提供一个inorder的接口，调用_inorder()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_inorder(_root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">void</span> _inorder(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">_inorder(root-&gt;left);</span><br><span class="line">cout &lt;&lt; root-&gt;_key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">_inorder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><h3 id="情况1、左右孩子都为空">情况1、左右孩子都为空</h3><p>可以记录父亲的值，直接干掉当前节点，判断当前节点是父亲的左还是右，然后用空替代当前节点</p><p>情况1可以归为情况2的特例</p><h3 id="情况2、左右孩子有一个为空">情况2、左右孩子有一个为空</h3><h4 id="左孩子为空">左孩子为空</h4><blockquote><p>删除的是根</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081334295.png" alt=""></p><blockquote><p>删除的不是根，依然两种情况，主要看这个要删除的节点是父亲的左还是右</p></blockquote><p>如果是父亲的左，就把cur的右给父亲的左</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081352923.png" alt=""></p><p>如果是父亲的右，就把cur的右给父亲的右<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081353553.png" alt=""></p><h4 id="右孩子为空">右孩子为空</h4><blockquote><p>先判断特殊情况，删除的节点为根节点</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081333711.png" alt=""></p><p>其他情况与左孩子为空情况大概相同</p><ul><li>如果，cur为父亲的左，那么让父亲的左，指向cur的左</li><li>如果，cur为父亲的右，那么让父亲的右，指向cur的右</li></ul><h3 id="情况3、左右孩子都不为空">情况3、左右孩子都不为空</h3><ul><li>找右树的最小节点，也就是右树的最左</li><li>找左树的最大节点 ，也就是左树的最右</li></ul><p>情况1<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509463.png" alt=""></p><p>情况2</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509737.png" alt=""></p><h3 id="非递归代码-2">非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//先找到要删除的节点，同时记录父节点的位置</span></span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存一下cur</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// key &lt; 当前节点的key， 往节点的左子树找</span></span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前节点的key小于要删除的key， 往右子树找</span></span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里说明cur-&gt;_key==key 可以进行删除了</span></span><br><span class="line"><span class="comment">//情况有一个孩子或者一个孩子都没有</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur左孩子为空 、右孩子可能为空，可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)  <span class="comment">//情况1</span></span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur右孩子为空   左孩子可能为空，也可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)</span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右孩子都不为空</span></span><br><span class="line"><span class="comment">//先找当前节点右树的最小节点</span></span><br><span class="line">Node *parent = cur;</span><br><span class="line">Node *min = cur-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">parent = min;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到了右树的最左节点</span></span><br><span class="line"><span class="comment">//如果是根节点、比如删除8，那么min现在是10，parent=8</span></span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, cur-&gt;_key);</span><br><span class="line"><span class="comment">//如果删除3、</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == min)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// parent的左等于min，比如删除</span></span><br><span class="line">parent-&gt;left = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走到这里说明数中没有要删除的节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码-2">递归代码</h3><p>过程：</p><ol><li>如果根为空，返回false</li><li>如果当前值大于key，递归删除左</li><li>如果当前值小于key，递归删除右</li><li>如果相等，则进入删除逻辑</li></ol><blockquote><p>分三种情况</p><ul><li>左孩子为空</li><li>右孩子为空</li><li>左右孩子都不为空</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _erase_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//就是当前节点</span></span><br><span class="line">Node *del = root;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右都不为空</span></span><br><span class="line">Node *min = root-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min)</span><br><span class="line">&#123;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, root-&gt;_key);</span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> del;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找">查找</h2><h3 id="非递归代码-3">非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="递归代码-3">递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _find_r(Node *root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 高阶数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

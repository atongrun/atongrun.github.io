<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>atong</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>万千不如意，睡得着就过得去</description>
    <pubDate>Sun, 18 Dec 2022 09:25:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>红黑树</title>
      <link>http://example.com/2022/12/18/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <guid>http://example.com/2022/12/18/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <pubDate>Sun, 18 Dec 2022 09:19:06 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;红黑树概念&quot;&gt;&lt;a href=&quot;#红黑树概念&quot; class=&quot;headerlink&quot; title=&quot;红黑树概念&quot;&gt;&lt;/a&gt;红黑树概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或 Bl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="红黑树概念"><a href="#红黑树概念" class="headerlink" title="红黑树概念"></a>红黑树概念</h2><blockquote><p>红黑树，是一种二叉搜索树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或 Black。 通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212141540682.png"></p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><ol><li>每个结点不是红色就是黑色  </li><li>根节点是黑色的  </li><li>如果一个节点是红色的，则它的两个孩子结点是黑色的，<strong>树中没有连续的红节点</strong></li><li>对于每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点  </li><li>每个叶子结点都是黑色的(此处的叶子结点指的是空结点)</li></ol><p>为什么满足上面的性质，红黑树就能保证：其最长路径中节点个数不会超过最短路径中节点个数的两倍？</p><p>极限最短：全黑<br>极限最长：一黑一红</p><h2 id="红黑树结构"><a href="#红黑树结构" class="headerlink" title="红黑树结构"></a>红黑树结构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED,</span><br><span class="line">    BLACK</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RBTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_parent;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_left;</span><br><span class="line">    RBTreeNode&lt;K, V&gt; *_right;</span><br><span class="line">    pair&lt;K, V&gt; _kv;</span><br><span class="line">    Color _col;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">RBTreeNode</span>(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span><br><span class="line">        : _parent(<span class="literal">nullptr</span>), _left(<span class="literal">nullptr</span>), _right(<span class="literal">nullptr</span>), _kv(kv), _col(RED)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>, <span class="keyword">class</span> <span class="title class_">V</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBTree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> RBTreeNode&lt;K, V&gt; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="红黑树操作"><a href="#红黑树操作" class="headerlink" title="红黑树操作"></a>红黑树操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><blockquote><p>红黑树的叔叔是关键<br>u存在且为红，变色继续向上处理<br>u不存在或存在且为黑，旋转（单旋+双旋）+变色</p></blockquote><p>情况一：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），uncle存在且为红</p><p>处理：p、u变黑，g变红，继续把g当成cur</p><ul><li>g不是根，往上继续处理</li><li>g是根，再把g变成黑色</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181030394.png"></p><p>情况二：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在&#x2F;u存在且为黑（<strong>单旋+变色</strong>）</p><p>处理：</p><ul><li>g右单旋</li><li>p变黑，g变红</li></ul><p>说明：uncle的情况有两种</p><ul><li>如果u节点不存在，那么cur一定是新插入节点，因为如果cur不是新插入节点，则cur和p一定有个节点颜色是黑色，就不满足性质4：每条路径黑色节点的个数相同。</li><li>如果u节点存在，那么cur节点原来的颜色一定是黑色的（保证性质4），现在看到其是红色的原因是因为cur的子树在调整的过程中将cur节点的颜色由黑色改为红色。</li></ul><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181055273.png"></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181342714.png"></p><p>情况三：<strong>cur为红，parent为红，grandfather为黑</strong>（固定），u不存在&#x2F;u存在且为黑（<strong>双旋+变色</strong>）</p><p>u不存在</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181111798.png"></p><p>u存在且为黑</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212181446123.png"></p><p>插入代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 还得链接上</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到了应该插入的位置</span></span><br><span class="line"><span class="keyword">while</span> (parent &amp;&amp; parent-&gt;_col == RED) <span class="comment">// parent不为空并且颜色为红继续处理</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先看parent是grandfather的左还是右</span></span><br><span class="line"><span class="keyword">if</span> (parent == grandfather-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line">Node *uncle = grandfather-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">// 1、右单旋+变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_left)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先对p 左单旋，再对g 右单旋，最后变色</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   p   u</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"><span class="built_in">RotateR</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// parent=grand-&gt;right</span></span><br><span class="line">&#123;</span><br><span class="line">Node *grandfather = parent-&gt;_parent;</span><br><span class="line"><span class="comment">// 如果父亲存在且颜色为红，那么祖父一定存在颜色为黑</span></span><br><span class="line"><span class="built_in">assert</span>(grandfather);</span><br><span class="line"><span class="built_in">assert</span>(grandfather-&gt;_col = BLACK);</span><br><span class="line"></span><br><span class="line">Node *uncle = grandfather-&gt;_left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1、叔叔存在且为红，变色继续向上处理</span></span><br><span class="line"><span class="keyword">if</span> (uncle &amp;&amp; uncle-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_col = uncle-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续向上处理</span></span><br><span class="line">cur = grandfather;</span><br><span class="line">parent = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 情况2、3：uncle不存在  存在且为黑</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分两种</span></span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//         c</span></span><br><span class="line"><span class="keyword">if</span> (cur == parent-&gt;_right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">parent-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//     g</span></span><br><span class="line"><span class="comment">//   u   p</span></span><br><span class="line"><span class="comment">//     c</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"><span class="built_in">RotateL</span>(grandfather);</span><br><span class="line">cur-&gt;_col = BLACK;</span><br><span class="line">grandfather-&gt;_col = RED;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_root-&gt;_col = BLACK;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><ul><li>根是黑色</li><li>没有连续的红节点</li><li>每条路径的黑色节点数量相同</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_root-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;根节点不是黑色&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bench_mark = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(_root, <span class="number">0</span>, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prev_check</span><span class="params">(Node *root, <span class="type">int</span> bnum, <span class="type">int</span> &amp;bench_mark)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bench_mark == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">bench_mark = bnum;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bench_mark != bnum)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;某条黑色节点的数量不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == BLACK)</span><br><span class="line">&#123;</span><br><span class="line">++bnum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_col == RED &amp;&amp; root-&gt;_parent-&gt;_col == RED)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;存在连续的红色节点&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prev_check</span>(root-&gt;_left, bnum, bench_mark) &amp;&amp; <span class="built_in">prev_check</span>(root-&gt;_right, bnum, bench_mark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">高阶数据结构</category>
      
      
      <category domain="http://example.com/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/">搜索树</category>
      
      
      <comments>http://example.com/2022/12/18/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AVL树</title>
      <link>http://example.com/2022/12/14/CPP/AVL%E6%A0%91/</link>
      <guid>http://example.com/2022/12/14/CPP/AVL%E6%A0%91/</guid>
      <pubDate>Wed, 14 Dec 2022 07:13:27 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;AVL概念&quot;&gt;&lt;a href=&quot;#AVL概念&quot; class=&quot;headerlink&quot; title=&quot;AVL概念&quot;&gt;&lt;/a&gt;AVL概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当向二叉搜索树中插入新结点后，如果能保证每个结点的左右子树高度之差的绝对值不超过1(需要对</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="AVL概念"><a href="#AVL概念" class="headerlink" title="AVL概念"></a>AVL概念</h2><blockquote><p>当向二叉搜索树中插入新结点后，如果能保证每个结点的左右子树高度之差的绝对值不超过1(需要对树中的结点进行调整)，即可降低树的高度，从而减少平均搜索长度。  </p></blockquote><p>一棵AVL树或者是空树，或者是具有以下性质的二叉搜索树：  </p><ul><li>它的左右子树都是AVL树  </li><li>左右子树高度之差(简称平衡因子)的绝对值不超过1(-1&#x2F;0&#x2F;1)</li></ul><p>如果一棵二叉搜索树是高度平衡的，它就是AVL树。如果它有n个结点，其高度可保持在<br>$O(log_2 n)$，搜索时间复杂度O($log_2 n$)</p><h2 id="AVL操作"><a href="#AVL操作" class="headerlink" title="AVL操作"></a>AVL操作</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> pair&lt;K, V&gt; &amp;kv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line">Node *cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 插入先找位置</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先记录parent</span></span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入的比当前值小，往左边走</span></span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_kv.first &lt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// 插入值比左边大，往右边走</span></span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 相等的位置</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 走到这里cur为空，说明，找到了该插入的位置</span></span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Node</span>(kv);</span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_kv.first &gt; kv.first)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_left = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_right = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;_parent = parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入成功。现在需要控制平衡，更新平衡因子</span></span><br><span class="line"><span class="comment">// 向上更新直到parent为空</span></span><br><span class="line"><span class="keyword">while</span> (parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// else if(parent-&gt;_bf==1 || parent-&gt;_bf==-1)</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur = parent;</span></span><br><span class="line"><span class="comment">// parent = parent-&gt;_parent;</span></span><br><span class="line">parent = parent-&gt;_parent;</span><br><span class="line">cur = cur-&gt;_parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(parent-&gt;_bf) == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右单旋</span></span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">2</span> &amp;&amp; cur-&gt;_bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="built_in">RotateRL</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (parent-&gt;_bf == <span class="number">-2</span> &amp;&amp; cur-&gt;_bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="built_in">RotateLR</span>(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调整完成之后break;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断平衡"><a href="#判断平衡" class="headerlink" title="判断平衡"></a>判断平衡</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_balance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _is_balance(_root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_height</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> _is_balance(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">get_height</span>(root-&gt;_left);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">get_height</span>(root-&gt;_right);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> diff = right-left;</span><br><span class="line"><span class="keyword">if</span> (diff != root-&gt;_bf)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; root-&gt;_kv.first &lt;&lt; <span class="string">&quot; 平衡因子异常&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(diff) &lt; <span class="number">2</span> &amp;&amp; _is_balance(root-&gt;_left) &amp;&amp; _is_balance(root-&gt;_right);</span><br><span class="line"><span class="comment">// if(abs(left-right)&gt;=2)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return false;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡因子更新"><a href="#平衡因子更新" class="headerlink" title="平衡因子更新"></a>平衡因子更新</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131300912.png"></p><p>更新平衡因子的规则</p><ul><li>新增在右，parent-&gt;bf++，新增在左，parent-&gt;bf–</li><li>更新后，parent-&gt;bf  &#x3D;&#x3D; 1 or -1, 说明parent插入前的平衡因子是0，说明左右子树高度相等，插入后有一边高，parent高度变了，需要继续往上更新</li><li>更新后，parent-&gt;bf &#x3D;&#x3D; 0，说明parent插入前的平衡因子是1 or -1， 说明左右子树一边高一边低，插入后两边一样高，插入填上了矮的那边，parent所在子树高度不变，不需要往上更新</li><li>更新后，parent-&gt;bf &#x3D;&#x3D; 2 or -2 ，说明parent插入前的平衡因子是1 or -1，已经平衡临界值，插入后变成2 or -2，打破平衡，parent所在子树需要旋转处理</li><li>更新后，parent-&gt;bf &gt;2 or &lt; -2，不可能，如果存在，则说明插入前就不是AVL树，需要去检查之前操作的问题</li></ul><h2 id="旋转的场景"><a href="#旋转的场景" class="headerlink" title="旋转的场景"></a>旋转的场景</h2><p>旋转的价值和意义：</p><ul><li>平衡</li><li>降低高度（高度恢复到插入之前的样子）</li></ul><h3 id="左单旋"><a href="#左单旋" class="headerlink" title="左单旋"></a>左单旋</h3><h4 id="情景分析"><a href="#情景分析" class="headerlink" title="情景分析"></a>情景分析</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131542366.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131543737.png"></p><p>具体进行左旋的时候也要分两种情况</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131544284.png"></p><p>调整完成之后，parent的平衡因子变为0，subR变为新的根，同时平衡因子也变为0</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateL</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//右边高</span></span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"></span><br><span class="line">parent-&gt;_right = subRL;</span><br><span class="line"><span class="keyword">if</span>(subRL)</span><br><span class="line">&#123;</span><br><span class="line">subRL-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line">subR-&gt;_left = parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(parent==_root)</span><br><span class="line">&#123;</span><br><span class="line">_root = subR;</span><br><span class="line">subR-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ppNode-&gt;_left=parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subR-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右单旋"><a href="#右单旋" class="headerlink" title="右单旋"></a>右单旋</h3><h4 id="情景分析‘"><a href="#情景分析‘" class="headerlink" title="情景分析‘"></a>情景分析‘</h4><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131547708.png"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//右单旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateR</span><span class="params">(Node* parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//左边高</span></span><br><span class="line">Node* subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先记录一些parent的父亲</span></span><br><span class="line">Node *ppNode = parent-&gt;_parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让subL的右给parent的左，然后parent做subL的右，subL做新的根</span></span><br><span class="line">parent-&gt;_left = subLR;</span><br><span class="line"><span class="comment">// 注意 要判断subLR是不是空</span></span><br><span class="line"><span class="keyword">if</span>(subLR)</span><br><span class="line">&#123;</span><br><span class="line">subLR-&gt;_parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subL-&gt;_right = parent;</span><br><span class="line">parent-&gt;_parent = subL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里也注意,</span></span><br><span class="line"><span class="keyword">if</span>(_root==parent)</span><br><span class="line">&#123;</span><br><span class="line">_root = subL;</span><br><span class="line">subL-&gt;_parent = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ppNode-&gt;_left == parent)</span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_left = subL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ppNode-&gt;_right = subL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后让suL的parent指向ppNode</span></span><br><span class="line">subL-&gt;_parent = ppNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左右旋"><a href="#左右旋" class="headerlink" title="左右旋"></a>左右旋</h3><h4 id="情景分析-1"><a href="#情景分析-1" class="headerlink" title="情景分析"></a>情景分析</h4><p>三种情况：</p><p>1、在b新增，那么60节点的平衡因子是-1<br>2、在c新增，那么60节点的平衡因子是1</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131548304.png"></p><p>3、subLR就是新增</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131609243.png"></p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateLR</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subL = parent-&gt;_left;</span><br><span class="line">Node *subLR = subL-&gt;_right;</span><br><span class="line"><span class="type">int</span> bf = subLR-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateL</span>(parent-&gt;_left);</span><br><span class="line"><span class="built_in">RotateR</span>(parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，subLR变成新的根</span></span><br><span class="line">subLR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在b插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// subLR就是新增</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 在c插入</span></span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subL-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="右左旋"><a href="#右左旋" class="headerlink" title="右左旋"></a>右左旋</h3><h4 id="情景分析-2"><a href="#情景分析-2" class="headerlink" title="情景分析"></a>情景分析</h4><p>1、新增在b，那么subRL平衡因子变成-1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为0，subR就是90的平衡因子变成1.</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212132009280.png"></p><p>2、新增在c，那么subRL平衡因子变成1，先对subR进行右旋，然后再对parent进行左旋，调整完成之后，subRL也就是70节点变成了根，平衡因子为0，parent的平衡因子为-1，subR就是90的平衡因子变成0。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937234.png"></p><p>3、新增就是subRL，subRL平衡因子为0，调整完成后都是0</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212131937964.png"></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右左旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateRL</span><span class="params">(Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *subR = parent-&gt;_right;</span><br><span class="line">Node *subRL = subR-&gt;_left;</span><br><span class="line"><span class="type">int</span> bf = subRL-&gt;_bf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RotateR</span>(subR);</span><br><span class="line"><span class="built_in">RotateL</span>(parent);</span><br><span class="line"></span><br><span class="line">subRL-&gt;_bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断subRL的平衡因子是多少</span></span><br><span class="line"><span class="keyword">if</span> (bf == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">subR-&gt;_bf = <span class="number">1</span>;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bf == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;_bf = <span class="number">-1</span>;</span><br><span class="line">subR-&gt;_bf = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">高阶数据结构</category>
      
      
      <category domain="http://example.com/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/">搜索树</category>
      
      
      <comments>http://example.com/2022/12/14/CPP/AVL%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>606. 根据二叉树创建字符串</title>
      <link>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <guid>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <pubDate>Sat, 10 Dec 2022 10:53:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/construct-string-from-binary-tree/&quot;&gt;606. 根据二叉树创建字符串&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我的错误思路&quot;&gt;&lt;a href=&quot;#我的错误思路&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode.cn/problems/construct-string-from-binary-tree/">606. 根据二叉树创建字符串</a></p><h2 id="我的错误思路"><a href="#我的错误思路" class="headerlink" title="我的错误思路"></a>我的错误思路</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// s+=&#x27;)&#x27;;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=(root-&gt;val+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&quot;()&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;left&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="正确思路"><a href="#正确思路" class="headerlink" title="正确思路"></a>正确思路</h2><p>还是前序遍历，根、左、右<br>但是要求将左子树和右子树括起来<br>如果不先考虑去括号的话</p><ul><li>先加当前节点的值</li><li>加 (</li><li>递归处理左子树</li><li>加 ）</li><li>加 (</li><li>递归处理右子树</li><li>加 )</li></ul><p>考虑去括号</p><ul><li>左右子树都为空，都去掉</li><li>右为空，去掉右</li><li>左为空，右不为空，不能去掉左</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="built_in">fun</span>(root, str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(TreeNode* root, string &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        <span class="comment">//左边不为空，或者左边为空但是右边不为空，保留</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;left, s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            s+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            <span class="built_in">fun</span>(root-&gt;right,s);</span><br><span class="line">            s+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h2><p>这种写法有个不好的点，传值返回消耗稍微有点多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">tree2str</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>();</span><br><span class="line"></span><br><span class="line">        string str;</span><br><span class="line">        str+=<span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左边不为空，或者右边不为空左边为空，都需要加括号</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left||root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;left);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            str+=<span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            str+=<span class="built_in">tree2str</span>(root-&gt;right);</span><br><span class="line">            str+=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>236. 二叉树的最近公共祖先</title>
      <link>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link>
      <guid>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid>
      <pubDate>Sat, 10 Dec 2022 10:53:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/&quot;&gt;236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tong-1306822</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092158148.png"></p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>规则：</p><p>一个是左子树中的节点，一个是右子树中的节点，那么他就是最近的公共祖先</p><p>这种做法的时间复杂度是O(H*N)，如果公共祖先在很下面，时间复杂度就比较高</p><p>每次找高度次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">Find</span><span class="params">(TreeNode* root, TreeNode* x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*if(root==x)</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;left, x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        if(Find(root-&gt;right,x))</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        return false;*/</span></span><br><span class="line">    <span class="comment">//更好的写法</span></span><br><span class="line">    retur root==x||<span class="built_in">Find</span>(root-&gt;left,x)||<span class="built_in">Find</span>(root-&gt;right,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==p||root==q)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="type">bool</span> pInLeft,pInRight,qInLeft,qInRight;</span><br><span class="line">        pInLeft=<span class="built_in">Find</span>(root-&gt;left, p);</span><br><span class="line">        pInRight=!pInLeft;</span><br><span class="line"></span><br><span class="line">        qInLeft=<span class="built_in">Find</span>(root-&gt;left, q);</span><br><span class="line">        qInRight=!qInLeft;</span><br><span class="line">        <span class="comment">//1、一个在左一个在右，root就是最近公共祖先</span></span><br><span class="line">        <span class="comment">//2、都在左，递归去左子树找</span></span><br><span class="line">        <span class="comment">//3、都在右，递归去右子树找</span></span><br><span class="line">        <span class="keyword">if</span>((pInLeft&amp;&amp;qInRight)||(pInRight&amp;&amp;qInLeft))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInLeft&amp;&amp;qInLeft)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;left, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pInRight&amp;&amp;qInRight)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">lowestCommonAncestor</span>(root-&gt;right, p, q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;pp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>用栈记录路径，时间复杂度为O(N)</p><p>找6的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302061.png"></p><p>找4的路径</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101302985.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101237692.png"></p><p>我自己写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(TreeNode* root, TreeNode* x, stack&lt;TreeNode*&gt;&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;left, x, s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(root-&gt;right, x ,s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt;s1;</span><br><span class="line">        stack&lt;TreeNode*&gt;s2;</span><br><span class="line">        <span class="built_in">find</span>(root,p, s1);</span><br><span class="line">        <span class="built_in">find</span>(root,q, s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while(!s1.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s1.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s1.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// while(!s2.empty())</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;s2.top()-&gt;val&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">//     s2.pop();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span>(!s1.<span class="built_in">empty</span>()&amp;&amp;!s2.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">top</span>()==s2.<span class="built_in">top</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> s2.<span class="built_in">top</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s1.<span class="built_in">size</span>()==s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1.<span class="built_in">size</span>()&gt;s2.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                s1.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s2.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/236.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>105. 从前序与中序遍历序列构造二叉树</title>
      <link>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <guid>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <pubDate>Sat, 10 Dec 2022 10:53:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot;&gt;105. 从前序与中序遍历序列构造二叉树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img sr</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101725948.png"></p><p>前序构建树</p><p>其中，通过preoder确定根，然后通过inorder分左右子树</p><p>比如上边图片的例子，通过preorder知道3为根，查找inorder，找到3所在的位置，分成中序的两个区间，记录左子树节点的个数，将前序序列也分为两个区间，然后递归处理左子树和右子树</p><p>我写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; preorder, vector&lt;<span class="type">int</span>&gt; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> mid= <span class="built_in">find</span>(inorder.<span class="built_in">begin</span>(),inorder.<span class="built_in">end</span>(), preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> nl=mid-inorder.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">        TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        root-&gt;left=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>,preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(inorder.<span class="built_in">begin</span>(),mid));</span><br><span class="line">        root-&gt;right=<span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>()+<span class="number">1</span>+nl, preorder.<span class="built_in">end</span>()) ,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(mid+<span class="number">1</span>,inorder.<span class="built_in">end</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212101815889.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>102. 二叉树的层序遍历</title>
      <link>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <guid>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <pubDate>Sat, 10 Dec 2022 10:53:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt; &lt;a href=&quot;https://leetcode.cn/problems/binary-tree-level-order-traversal/&quot;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tong-1306822294.cos</description>
        
      
      
      
      <content:encoded><![CDATA[<p> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212091957445.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> h =<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">v</span>(h, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录上一层节点的数量</span></span><br><span class="line">        <span class="type">int</span> pre=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遇到的难点1、怎么确定每层的节点</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(pre==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pre=cnt;</span><br><span class="line">                i++;</span><br><span class="line">                cnt=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            v[i].<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            pre--;</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span>(node-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简洁写法"><a href="#简洁写法" class="headerlink" title="简洁写法"></a>简洁写法</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092004473.png"></p><h2 id="双队列解法"><a href="#双队列解法" class="headerlink" title="双队列解法"></a>双队列解法</h2><p>一个队列存节点指针<br>一个队列存层数</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212092012600.png"></p><p>还是要求深度，要不还是不大好搞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="built_in">fun</span>(root-&gt;left);</span><br><span class="line">        <span class="type">int</span> right=<span class="built_in">fun</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(left&gt;right?left:right);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt;level;</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(root);</span><br><span class="line">            level.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> h=<span class="built_in">fun</span>(root);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">vv</span>(h,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* front = q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="type">int</span> pre=level.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            level.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            vv[pre].<span class="built_in">push_back</span>(front-&gt;val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;left);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(front-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;right);</span><br><span class="line">                level.<span class="built_in">push</span>(pre+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      
      <category domain="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/">二叉树</category>
      
      
      <comments>http://example.com/2022/12/10/%E5%8A%9B%E6%89%A3/102%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二叉搜索树</title>
      <link>http://example.com/2022/12/08/CPP/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <guid>http://example.com/2022/12/08/CPP/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <pubDate>Thu, 08 Dec 2022 11:21:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;二叉搜索树概念&quot;&gt;&lt;a href=&quot;#二叉搜索树概念&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树概念&quot;&gt;&lt;/a&gt;二叉搜索树概念&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若它的左子树不为空，则左子树上所有节点的值都小于根节点的值  &lt;/li&gt;
&lt;li&gt;若它的右子树不为空，则右子树上所有节点的值都大于根节点的值  &lt;/li&gt;
&lt;li&gt;它的左右子树也分别为二叉搜索树&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081211954.png&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="二叉搜索树概念"><a href="#二叉搜索树概念" class="headerlink" title="二叉搜索树概念"></a>二叉搜索树概念</h1><blockquote><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树:  </p><ul><li>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值  </li><li>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值  </li><li>它的左右子树也分别为二叉搜索树</li></ul></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081211954.png"></p> <span id="more"></span><h1 id="二叉搜索树实现"><a href="#二叉搜索树实现" class="headerlink" title="二叉搜索树实现"></a>二叉搜索树实现</h1><h2 id="结构框架"><a href="#结构框架" class="headerlink" title="结构框架"></a>结构框架</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BSTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *left;</span><br><span class="line">BSTreeNode *right;</span><br><span class="line">K _key;</span><br><span class="line"><span class="built_in">BSTreeNode</span>(<span class="type">const</span> K &amp;key) : <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>), _key(key)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">K</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BSTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> BSTreeNode&lt;K&gt; Node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *_root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>让编译器提供个默认生成的就可以了，如果不写这个，又写了拷贝构造，编译器就不会自己自动生成了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BSTree</span>() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><h2 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h2><p>递归拷贝左，右，根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BSTree</span>(<span class="type">const</span> BSTree&lt;K&gt; &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">_root = _copy(t._root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node *_copy(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// TODO 拷贝构造 赋值运算符重载</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *node = <span class="keyword">new</span> <span class="built_in">Node</span>(root-&gt;_key);</span><br><span class="line"></span><br><span class="line">node-&gt;left = _copy(root-&gt;left);</span><br><span class="line">node-&gt;right = _copy(root-&gt;right);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h2><p>写完拷贝构造之后可以直接用现在写法就OK了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BSTree&lt;K&gt; <span class="keyword">operator</span>=(BSTree&lt;K&gt; t)</span><br><span class="line">&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_root, t._root);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="析构"><a href="#析构" class="headerlink" title="析构"></a>析构</h2><p>递归，左、右、根</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _destory(Node *&amp;root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">_destory(root-&gt;left);</span><br><span class="line">_destory(root-&gt;right);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>比它大往右走，比他小往左走，走到空，找它父亲链接起来</p><h3 id="非递归代码"><a href="#非递归代码" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">_root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// key==cur-&gt;key</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里cur走到了空 进行插入</span></span><br><span class="line">Node *new_node = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = new_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码"><a href="#递归代码" class="headerlink" title="递归代码"></a>递归代码</h3><p>重点是参数列表的引用<br>如果走到了root为空，说明到了该插入的位置，现在的root就是上一层父亲左孩子或者右孩子那个指针的别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _insert_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="keyword">new</span> <span class="built_in">Node</span>(key);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _insert_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>提供一个inorder的接口，调用_inorder()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorder</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_inorder(_root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">void</span> _inorder(Node *root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">_inorder(root-&gt;left);</span><br><span class="line">cout &lt;&lt; root-&gt;_key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">_inorder(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="情况1、左右孩子都为空"><a href="#情况1、左右孩子都为空" class="headerlink" title="情况1、左右孩子都为空"></a>情况1、左右孩子都为空</h3><p>可以记录父亲的值，直接干掉当前节点，判断当前节点是父亲的左还是右，然后用空替代当前节点</p><p>情况1可以归为情况2的特例</p><h3 id="情况2、左右孩子有一个为空"><a href="#情况2、左右孩子有一个为空" class="headerlink" title="情况2、左右孩子有一个为空"></a>情况2、左右孩子有一个为空</h3><h4 id="左孩子为空"><a href="#左孩子为空" class="headerlink" title="左孩子为空"></a>左孩子为空</h4><blockquote><p>删除的是根</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081334295.png"></p><blockquote><p>删除的不是根，依然两种情况，主要看这个要删除的节点是父亲的左还是右</p></blockquote><p>如果是父亲的左，就把cur的右给父亲的左</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081352923.png"></p><p>如果是父亲的右，就把cur的右给父亲的右<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081353553.png"></p><h4 id="右孩子为空"><a href="#右孩子为空" class="headerlink" title="右孩子为空"></a>右孩子为空</h4><blockquote><p>先判断特殊情况，删除的节点为根节点</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081333711.png"></p><p>其他情况与左孩子为空情况大概相同</p><ul><li>如果，cur为父亲的左，那么让父亲的左，指向cur的左</li><li>如果，cur为父亲的右，那么让父亲的右，指向cur的右</li></ul><h3 id="情况3、左右孩子都不为空"><a href="#情况3、左右孩子都不为空" class="headerlink" title="情况3、左右孩子都不为空"></a>情况3、左右孩子都不为空</h3><ul><li>找右树的最小节点，也就是右树的最左</li><li>找左树的最大节点 ，也就是左树的最右</li></ul><p>情况1<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509463.png"></p><p>情况2</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202212081509737.png"></p><h3 id="非递归代码-1"><a href="#非递归代码-1" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">const</span> K &amp;key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_root == <span class="literal">nullptr</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//先找到要删除的节点，同时记录父节点的位置</span></span><br><span class="line">Node *cur = _root;</span><br><span class="line">Node *parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//存一下cur</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"><span class="comment">// key &lt; 当前节点的key， 往节点的左子树找</span></span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">parent = cur;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前节点的key小于要删除的key， 往右子树找</span></span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里说明cur-&gt;_key==key 可以进行删除了</span></span><br><span class="line"><span class="comment">//情况有一个孩子或者一个孩子都没有</span></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur左孩子为空 、右孩子可能为空，可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)  <span class="comment">//情况1</span></span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cur右孩子为空   左孩子可能为空，也可能不为空</span></span><br><span class="line"><span class="keyword">if</span> (cur == _root)</span><br><span class="line">&#123;</span><br><span class="line">_root = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == cur)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右孩子都不为空</span></span><br><span class="line"><span class="comment">//先找当前节点右树的最小节点</span></span><br><span class="line">Node *parent = cur;</span><br><span class="line">Node *min = cur-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min-&gt;left)</span><br><span class="line">&#123;</span><br><span class="line">parent = min;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到了右树的最左节点</span></span><br><span class="line"><span class="comment">//如果是根节点、比如删除8，那么min现在是10，parent=8</span></span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, cur-&gt;_key);</span><br><span class="line"><span class="comment">//如果删除3、</span></span><br><span class="line"><span class="keyword">if</span> (parent-&gt;left == min)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// parent的左等于min，比如删除</span></span><br><span class="line">parent-&gt;left = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = min-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//走到这里说明数中没有要删除的节点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归代码-1"><a href="#递归代码-1" class="headerlink" title="递归代码"></a>递归代码</h3><p>过程：</p><ol><li>如果根为空，返回false</li><li>如果当前值大于key，递归删除左</li><li>如果当前值小于key，递归删除右</li><li>如果相等，则进入删除逻辑</li></ol><blockquote><p>分三种情况</p><ul><li>左孩子为空</li><li>右孩子为空</li><li>左右孩子都不为空</li></ul></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _erase_r(Node *&amp;root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//就是当前节点</span></span><br><span class="line">Node *del = root;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = root-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左右都不为空</span></span><br><span class="line">Node *min = root-&gt;right;</span><br><span class="line"><span class="keyword">while</span> (min)</span><br><span class="line">&#123;</span><br><span class="line">min = min-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">swap</span>(min-&gt;_key, root-&gt;_key);</span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="keyword">return</span> _erase_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> del;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="非递归代码-2"><a href="#非递归代码-2" class="headerlink" title="非递归代码"></a>非递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">const</span> K&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* cur = _root;</span><br><span class="line"><span class="keyword">while</span> (cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;_left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="递归代码-2"><a href="#递归代码-2" class="headerlink" title="递归代码"></a>递归代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> _find_r(Node *root, <span class="type">const</span> K &amp;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;_key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;_key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _find_r(root-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%AB%98%E9%98%B6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">高阶数据结构</category>
      
      
      <category domain="http://example.com/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/">搜索树</category>
      
      
      <comments>http://example.com/2022/12/08/CPP/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

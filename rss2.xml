<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>孙菜菜</title>
    <link>https://atong.run/</link>
    
    <atom:link href="https://atong.run/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>万千不如意，睡得着就过得去</description>
    <pubDate>Thu, 23 Mar 2023 04:45:41 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ChatGPT实用指令：写报告、做简历、辅助面试、英语学习等</title>
      <link>https://atong.run/posts/2390345290/</link>
      <guid>https://atong.run/posts/2390345290/</guid>
      <pubDate>Thu, 23 Mar 2023 04:37:52 GMT</pubDate>
      
      <description>ChatGPT实用指令：写报告、做简历、辅助面试、英语学习等，以及ChatGPT免翻墙网站补充</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d6bbc7d3e5570d649f1573f53116dac4cf920c401039343007e791208cd74c3e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">公众号孙菜菜回复关键词【GPT指令】获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/">人工智能</category>
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/">自然语言</category>
      
      
      <category domain="https://atong.run/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://atong.run/posts/2390345290/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>都2023年了谁还在抛硬币？来学学中国传统文化小六壬（测吉凶篇）</title>
      <link>https://atong.run/posts/2043869359/</link>
      <guid>https://atong.run/posts/2043869359/</guid>
      <pubDate>Sun, 19 Mar 2023 14:08:27 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;2023年了就别在抛硬币了，来学点有意思的，学习我们的传统文化小六壬来测吉凶，非常简单，2分钟就能学会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;简介&lt;/h1&gt;
&lt;p&gt;小六壬是一种中国传统的预测方法，据说是由三国时期的诸葛孔明简化自奇门遁甲而成</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>2023年了就别在抛硬币了，来学点有意思的，学习我们的传统文化小六壬来测吉凶，非常简单，2分钟就能学会。</p></blockquote><h1>简介</h1><p>小六壬是一种中国传统的预测方法，据说是由三国时期的诸葛孔明简化自奇门遁甲而成。小六壬以大安、留连、速喜、赤口、小吉、空亡六位分列于食指、中指及无名指上，时间按月、日、时顺序计算，最后得到大安、速喜和小吉的为吉，其余为凶。手掌对应图如下：</p><table><thead><tr><th style="text-align:center">食指</th><th style="text-align:center">中指</th><th style="text-align:center">无名指</th></tr></thead><tbody><tr><td style="text-align:center">留连</td><td style="text-align:center">速喜</td><td style="text-align:center">赤口</td></tr><tr><td style="text-align:center">大安</td><td style="text-align:center">空亡</td><td style="text-align:center">小吉</td></tr></tbody></table><p>具体对应图如下：</p><blockquote><p><font color="#ff0000">只需要记住：红色就是好，绿色就是不好，这是重点，还有就是手掌是左手哦</font>。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303192121621.png" alt="image.png"></p><h1>实操</h1><blockquote><p>记住好坏之后就可以进行实操了，只要你会数数就可以了。</p></blockquote><ol><li>首先知道现在是阴历的几月几号，现在是什么时辰。比如今天是阴历2月5日，早上8点多，也就是辰时。</li><li>然后看上边的手掌图，从1的位置开始数，月数是2，顺时针数两下，到了绿色的2位置</li><li>然后从2位置数，这里是重点啊，新的位置是2开始，数5下，到了绿色的6位置</li><li>最后数时辰，辰时是第五个，从6的位置顺时针数5下，就到了绿色的位置，术语叫做赤口，说明你现在在这个时辰的运势不大好</li></ol><hr><p>时间对照图</p><table><thead><tr><th>时辰</th><th>时间</th></tr></thead><tbody><tr><td>子时</td><td>23:00-01:00</td></tr><tr><td>丑时</td><td>01:00-03:00</td></tr><tr><td>寅时</td><td>03:00-05:00</td></tr><tr><td>卯时</td><td>05:00-07:00</td></tr><tr><td>辰时</td><td>07:00-09:00</td></tr><tr><td>巳时</td><td>09:00-11:00</td></tr><tr><td>午时</td><td>11:00-13:00</td></tr><tr><td>未时</td><td>13:00-15:00</td></tr><tr><td>申时</td><td>15:00-17:00</td></tr><tr><td>酉时</td><td>17:00-19:00</td></tr><tr><td>戌时</td><td>19:00-21:00</td></tr><tr><td>亥时</td><td>21:00-23:00</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E5%91%A8%E6%98%93/">周易</category>
      
      
      <category domain="https://atong.run/tags/%E5%90%89%E5%87%B6/">吉凶</category>
      
      
      <comments>https://atong.run/posts/2043869359/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>KMP算法</title>
      <link>https://atong.run/posts/765481613/</link>
      <guid>https://atong.run/posts/765481613/</guid>
      <pubDate>Sat, 18 Mar 2023 08:41:04 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/&quot;&gt;28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;
&lt;bl</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a></p><blockquote><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。</p></blockquote><p>这种字符串匹配，常见两种算法，一个是BF，暴力算法，另一个是KMP算法，KMP算法难点就是求next数组（该数组保存回退的位置，利用真子串的特性，减少匹配的次数）</p><h1>next数组</h1><p>next[j] = k， 不同的j来对应一个K值，这个K就是将来要移动的j要移动的位置</p><p>求K的值的规则：</p><ul><li>找到匹配成功部分的两个相等的真子串，一个下标从0开始，另一个以j-1下标结尾</li><li>不管什么数据next[0]=-1， next[1]=0</li></ul><p>练习1：</p><table><thead><tr><th>a</th><th>b</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>-1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td></tr></tbody></table><p>练习2：</p><table><thead><tr><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th><th>c</th><th>d</th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>-1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>0</td><td>1</td><td>2</td><td>3</td><td>0</td></tr></tbody></table><p>问题：已知next[i]=k 如何求 next[i+1]?</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303132035003.png" alt="image.png"><br>因为长度相同：</p><ul><li>k-1-0 = i -1 - x</li><li>x = i - k</li></ul><p>可以推出：</p><p>p[0]…p[k-1] = p[i-k]…p[i-1]</p><p>如果：p[i] == p[k]  -&gt; next[i+1] = k+1<br>因为当上述成立：p[0]…p[k] == p[i-k]…p[i-1]</p><hr><p>如果:  p[i] != p[k]   那么  next[i+1] = ?</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303132048527.png" alt="image.png"></p><p>回退到的2号位置，不一定就是你要找的，继续回退，此时回退到了0下标处，一直回退去找：p[i] == p[k]  -&gt; next[i+1] = k+1</p><h1>代码实现</h1><h2 id="BF">BF</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;haystack.<span class="built_in">size</span>() &amp;&amp; j&lt;needle.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                i=i-j+<span class="number">1</span>;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="KMP">KMP</h2><blockquote><p>我写的错误版本，错误原因是，next数组求的有问题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;next = <span class="built_in">getNext</span>(needle);</span><br><span class="line">        <span class="type">int</span> len1=haystack.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2=needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len1 &amp;&amp; j&lt;len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNext</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(str.size())</span></span>;</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="built_in">size</span>()==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;str.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = next[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(str[i<span class="number">-1</span>] == str[k])</span><br><span class="line">            &#123;</span><br><span class="line">                next[i] = k + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; str[j] != str[k])  <span class="comment">//问题出在这里，这里应该是str[i-1]和str[k]相比</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j = k;</span><br><span class="line">                    k=next[j];</span><br><span class="line">                &#125;</span><br><span class="line">                next[i] = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>正确版本1</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;next = <span class="built_in">getNext</span>(needle);</span><br><span class="line">        <span class="type">int</span> len1=haystack.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2=needle.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;len1 &amp;&amp; j&lt;len2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">-1</span> || haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getNext</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(str.size())</span></span>;</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;str.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span> || str[k]==str[i])</span><br><span class="line">            &#123;</span><br><span class="line">                next[i+<span class="number">1</span>]=k+<span class="number">1</span>;</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k=next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>正确版本2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">next</span>(needle.<span class="built_in">size</span>());</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//已知next[i]求next[i+1]</span></span><br><span class="line">        <span class="comment">// 两种情况：</span></span><br><span class="line">        <span class="comment">// 1. needle[i] == needle[k] -&gt; next[i+1] = k+1;</span></span><br><span class="line">        <span class="comment">// 2. needle[i] != needle[k] -&gt; 回退k，k=next[k]</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;needle.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">-1</span> || needle[i]==needle[k])</span><br><span class="line">            &#123;</span><br><span class="line">                next[++i]=k+<span class="number">1</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k=next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;haystack.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; haystack[i]!=needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt; i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1>next数组优化</h1><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303171525238.png" alt="image.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303171529695.png" alt="image.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303171533230.png" alt="image.png"></p><blockquote><p>优化版本代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">next</span>(needle.<span class="built_in">size</span>());</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//已知next[i]求next[i+1]</span></span><br><span class="line">        <span class="comment">// 两种情况：</span></span><br><span class="line">        <span class="comment">// 1. needle[i] == needle[k] -&gt; next[i+1] = k+1;</span></span><br><span class="line">        <span class="comment">// 2. needle[i] != needle[k] -&gt; 回退k，k=next[k]</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; needle.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span> || needle[k] == needle[i])</span><br><span class="line">            &#123;</span><br><span class="line">                next[i + <span class="number">1</span>] = k + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (needle[k+<span class="number">1</span>] == needle[i+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(needle[<span class="number">0</span>] == needle[<span class="number">1</span>])</span><br><span class="line">                    &#123;</span><br><span class="line">                        next[<span class="number">1</span>]=next[<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    next[i+<span class="number">1</span>] = next[k+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;haystack.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; haystack[i]!=needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">-1</span> || haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E5%8A%9B%E6%89%A3/">力扣</category>
      
      <category domain="https://atong.run/categories/%E5%8A%9B%E6%89%A3/%E5%AD%97%E7%AC%A6%E4%B8%B2/">字符串</category>
      
      
      <category domain="https://atong.run/tags/KMP/">KMP</category>
      
      
      <comments>https://atong.run/posts/765481613/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ChatGPT免翻墙网站推荐</title>
      <link>https://atong.run/posts/4182892542/</link>
      <guid>https://atong.run/posts/4182892542/</guid>
      <pubDate>Tue, 14 Mar 2023 03:15:08 GMT</pubDate>
      
      <description>不需要翻墙的几个使用chatgpt的方式分享</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a0891862c8a38bb3d2345939a0a9807727f5ec8607a01e01034b1fa27e618c96">f6cac86f78082062b77dcf10f3958992138886a6aa00fae39ff3b75aefe8ecca743efddce9d408d05413b66d60c1658d91781c9dd550c2dfb4eae359e2f4bbdfd6fbbb3bc41920f1b890b67977580e0bc1c3d65bb0cbb7ba76be188959926934c73c1cfb59740c748595455c0ad3f25063fecbf8d8cef9b4890132e9c293f4cfbe1dedca807de35b776c2eecea204a30ef144c7d322920b88777a0d375964df7ecf1ec66a0cdcbc9945f4606b56b1db514dab2bad0f6507bbadedbbe703d638f5fb7a56c6d0a83cac7794ba0021ea9eae8cc871416b3cce70bb3d017af4889bd59beb71bc1729bb46f6f9294630c41c4363be2523b5f22435bbe1de901fa4d45e75de14c6e1ad930c64eb255c7c9ad9f1b8412b0d73cac689b873f3bbfb1e18e3a9edee1e2389801978724bec25a95fc809f778fa321ef6260055389335a8641719adf4c5e18f0907040eb2135b5851b83693bef9b7e86f0b497367d60f9353d11870301afa4955c20a1034b10debc4703c49700c309ae3c8849bb96a0b6499b81528afc71d02eafb2392a21cebf8212b7b35fee4b9da2d39c985fdc95caa41d2ed711b97ab3f7b01c8cbb26858515f68e99ec8d297eaa37564a9882f1eece0c74fd8801e17d93dbe57246c49f2138be5afcd27b9266312706f9bbe26051bd1a80b595b08b5f60286e8602c2ab37b2f8621dcdcba86f817c7c151d77cdaad8d4c329cd7286b8eb643f74a5c85aea23cd19a66e40d96a40f0e263bc92a02c7de7f888266fce5447f3541c2ad850b8a3a2ba6e5a9c6d9daa1b24c00001af2b6e1ff0d7a704a74eca67808cbf66277544a514dcc34a4d2f17370565e7c17b2e5c91601bf9a1cd14687397376e50421e54de02e6a8eb42168ed816c492dccdbae0aa8fce2986b3b0cff2e3f27e057dadbd77b5bed261d9267f99047cdf3faa23c78d41333eaffda308f75ffc5ae928e8bf1880b0c8a40de0eb551e9e4388393dfc841a2c23f4dbc16ebe6226d87345e91988e1aae8d9756bb30be652edd237473104bc9853b13bdb1a17aa06d92e4b5c8d9641fcf4afb2cba5c692342932c3e09a3da973a3658b3e7540e741fda1f1b6ef55b7976cf910cbc50712add82d2f367faaba013c2bc3b6f5e8c2b96a0066aaa3e97e4196afb8d6128c7a08c3b670df04eeb52d5281364cf3da2bd9f549ca097ad83bb29ef1917ed079523b16a090a848d42d722266dba76e7bb0060bc46181b406197e1e29ffa08953a813bb223c2231bd612130da42d2b6fdd42a2cf40f087667f2db7cda919798b4ba9ccef9e10b062d8cb0ac68ee883d783a001bc7d3c8cc621270b1f6fc32f761bf55fd49fea4957e3c0e0022d60a3f0fe1dbebcfbe65d4dd51e9f53abf01959f2300a915643de0b9e98cbb4376959e152d91c0c4c3deb27159cd0265a03bbc1650a2d15fbea4555c938163fb170b069f346034dea9834b9b432c18ce9e522eb4f8cf9e6d88087198acffaae3ec05e2731ba4b7ce8245d16816db5663789fb5062939fa99d5be59b98ddfcb733d90d6cc9cacab94e391cc6d363016946b1e87375b8d57e6e9236f6ced701fa195c01681a609b06cffb5a82c3a43cdffa3abc0053ae4e6c741ec52f4a6006cd5240a6a43b588e00f6b280f9a611f621b04ce8c07e6db7e381174d9712a3f1655911845264222817a35ae294d716aab8d0a465a7cff81d590d96a18418c9ba707e66f47161f8dd4ca0dd0ef439e3d0bd0be896fc8d419d8dde91fbb06704e92fc6a092027037ef4dd6c6b4d9181cdaabcb1770986011f2461c5106879685bf46fa69312fdf5f8c98ba80aa2b73e0979bba8b02399b6c9c26413cd19ca713530e4345e9944d674bab5a1e228cb18080f9fba4683d4a455b9218071f00b5b17e27e2e330d0c877af12b4bf61e555cf30308f5a89d47ae9faf135a3f20d01b527f9a128924c1c49249e53fc4249ddddcbeb0916bd0c561f3b4c77deda4d8027f635f6f276ce166763c0aac2e5c02d00b11ee4e2f10e290eed860c5adec9a81a8b1465461759e3ee4582a6d1ae0a2796008a20cf6318720ef27a390d8b45f69b5fcdcf36f124907a3d68e78f566ba374c0ce9d350d8d349a0d7ef3a9781aef296daa1e98a480f9293c7b3da6ad2f2f893e2d5744e6485347ae95097579b6c58b5ba091a787f93255d0abe090cfc07f47a7d536bb56b6e783511afd024f03aae0e479c8e2e8713bd7e223b734552d158bb0d72cddd4d652b73d85cd3cb7b92d388ae5edc98509d0d655399638652e77250f26fee9c20acdc2ef6ae437bbb4ee4ec128bc212e141b859f9cd824be8327e05a1feeba4b77cce297ae34d763da73f40b97a96bfd9f4fe49b0718d1b426bc3c94ad4cf6a8e7ceb68a37618a17f90c7fdc7484f49d6226fb86d94b5ba8b414b0478534e5ec8de3603d5e1d93dbcac16febd7cd205c61c2088253895b5558abf8a5e88d4a163cb718e36d081dcac694c88601676e2edfca82e73778c53241358aac7468be58b17e5241059adcdbe635151bf5dcb0d507613c2decdf25b2fcf30d0903e0118fbb9da5e3167487e0aacdcd616d094e04ae799767d8f0442d654ecad0c16bd451fc68f09a57fce5bd192ee78952d4fa3d289f6cd853439326bd7b8c8029069f159137e4c6f6d955332a4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">关注公众号孙菜菜回复关键词gpt获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/">人工智能</category>
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/">自然语言</category>
      
      
      <category domain="https://atong.run/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://atong.run/posts/4182892542/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>人工智能这么强，我们会被淘汰吗？应该怎么办？</title>
      <link>https://atong.run/posts/2356723078/</link>
      <guid>https://atong.run/posts/2356723078/</guid>
      <pubDate>Sun, 12 Mar 2023 07:09:57 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;金融界3月10日消息 据德国媒体heise在线报道，当地时间3月9日，微软德国CTO Andreas Braun（布劳恩）在一场AI活动中表示，GPT-4将于下周发布，并且是多模态，不仅仅局限于文字，还包括视频。与此同时，Braun还强调GPT-4能够适用所有的语言，用户可</description>
        
      
      
      
      <content:encoded><![CDATA[<p>金融界3月10日消息 据德国媒体heise在线报道，当地时间3月9日，微软德国CTO Andreas Braun（布劳恩）在一场AI活动中表示，GPT-4将于下周发布，并且是多模态，不仅仅局限于文字，还包括视频。与此同时，Braun还强调GPT-4能够适用所有的语言，用户可以用德语提问，然后获得意大利语的答案。目前最先进的语言模型之一是GPT-3，它在语言理解和生成方面的表现已经达到了前所未有的高度。但是GPT4更加恐怖，未来人工智能将可以更好地帮助人们处理语言任务，比如自然语言处理、智能客服、知识图谱等。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121447028.png" alt="image.png"></p><p>人工智能的发展已经取得了巨大的成就，不断涌现出新的技术和应用场景。在这个背景下，人们普遍担心未来许多职业将被替代，而情绪价值的职业可能会长久不衰。但是，事实上情况可能并不是这样简单。本文将从多个角度探讨人工智能发展对未来职业的影响。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121429557.png" alt="image.png"></p><p>但是，人工智能仍然存在着一些局限性。例如，它们很难处理一些特定领域的知识，需要人类专业知识的支持。另外，人工智能仍然难以像人类一样做出具有创造性、判断力和决策力的任务。因此，人工智能仍然需要人类的专业知识和经验来解决复杂的问题。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121430845.png" alt="image.png"></p><p>随着人工智能技术的发展，一些职业可能会受到影响，比如一些重复性高、标准化程度高的工作可能会被机器人取代。例如，一些制造业和物流领域的工作可能会被自动化取代。但是，同时也会出现一些新的职业和机会。例如，在人工智能领域，需要大量的研究人员、工程师、数据科学家等专业人才。此外，由于人工智能技术的应用范围越来越广泛，需要具备跨学科知识和技能的人才也会越来越受欢迎。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121432645.png" alt="image.png"></p><p>一些职业可能会更加重要的原因之一是提供情绪价值。这些职业包括心理医生、咨询师、教育工作者、社工、艺术家等，他们的工作往往需要具备高度的情感智商和人际交往能力，需要与人打交道并且能够理解和处理他们的情绪和需求。这些职业往往需要长期学习和实践，无法被简单地替代。</p><p>此外，情绪价值的职业还具有另外一种重要性，那就是人类对情感联系的需求。虽然人工智能可以通过自然语言处理和情感分析等技术来模拟情感，但是它们缺乏真实的情感体验和交流能力。因此，情绪价值的职业将继续是人类社会中不可或缺的一部分。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121432868.png" alt="image.png"></p><p>尽管人工智能发展对职业的影响是不可避免的，但是我们可以采取一些措施来适应这个时代。以下是一些建议：</p><ol><li><p>继续学习和发展自己的技能和知识，特别是跨学科的知识和技能。</p></li><li><p>掌握一些高级技术和工具，例如机器学习、自然语言处理和数据分析等。</p></li><li><p>寻找新的机会和职业，例如在人工智能领域工作或者从事情绪价值的职业。</p></li><li><p>改变自己的职业思维和态度，例如转变为创业者或者自由职业者，或者寻找其他方式来获得收入和生计。</p></li></ol><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202303121433768.png" alt="image.png"></p><p>总结</p><p>在未来的人工智能时代，职业发展将会面临着许多挑战和机遇。一些职业可能会被机器替代，但是同时也会出现新的职业和机会。情绪价值的职业将继续存在并且发挥着重要作用。为了适应这个时代，我们需要不断学习和发展自己的技能和知识，寻找新的机会和职业，并改变自己的职业思维和态度。</p>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/">人工智能</category>
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/AI%E4%B8%8B%E7%9A%84%E6%80%9D%E8%80%83/">AI下的思考</category>
      
      
      <category domain="https://atong.run/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://atong.run/posts/2356723078/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>震惊！！ChatGPT越狱，解锁暗黑版本的ChatGPT，突破openai对chatgpt回答限制。</title>
      <link>https://atong.run/posts/3439780086/</link>
      <guid>https://atong.run/posts/3439780086/</guid>
      <pubDate>Sat, 04 Mar 2023 02:31:10 GMT</pubDate>
      
      <description>如何对ChatGPT进行越狱，解锁暗黑版本的ChatGPT，突破openai对chatgpt回答限制。</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c0f0f84de86503a1ffe1268fea9a6d64f8095ab81fe345b7f0e99abbac0b1785"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">你好呀，这里需要密码哦, 关注微信公众号孙菜菜回复关键词chatgpt获得密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/">人工智能</category>
      
      <category domain="https://atong.run/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80/">自然语言</category>
      
      
      <category domain="https://atong.run/tags/ChatGPT/">ChatGPT</category>
      
      
      <comments>https://atong.run/posts/3439780086/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>纯电动汽车simulink教程</title>
      <link>https://atong.run/posts/1513554255/</link>
      <guid>https://atong.run/posts/1513554255/</guid>
      <pubDate>Tue, 28 Feb 2023 04:47:06 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;纯电动汽车simulink模型&lt;/h1&gt;
&lt;h2 id=&quot;课程简介&quot;&gt;课程简介&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/suntong-1221/EV_Model.svg&quot; alt=&quot;Github sta</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>纯电动汽车simulink模型</h1><h2 id="课程简介">课程简介</h2><p><img src="https://img.shields.io/github/stars/suntong-1221/EV_Model.svg" alt="Github stars"><br><a href="https://ci.appveyor.com/project/suntong-1221/EV_Model"><img src="https://ci.appveyor.com/api/projects/status/sb279kxuv1be391g?svg=true" alt="Build status"></a></p><p>​该模型为纯电动汽车单电机整车模型🚗，整车模型可正常仿真运行，但是其中可能存在较大问题，同学们在学习的时候一定要辩证的看待，然后里面缺少几个表数据，这个并没有公开，因为是课题组的资源。</p><ul><li>已经添加了2018a版本的模型文件</li><li>B站链接：<a href="https://www.bilibili.com/video/BV1cm4y1S7Rs?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1cm4y1S7Rs?spm_id_from=333.999.0.0</a></li></ul><hr><h2 id="新增内容">新增内容</h2><p>​因为最初上传模型EV_v0.1版本缺少部分课题组内部数据，应同学要求，新增EM_v0.2版本，下载可正常运行，电机是随便找的硕士论文电机额定功率为34kw，最大转矩130Nm，然后我随便按照特性编的数据，电机效率固定为0.95，电池部分，直接给了固定内阻和固定单体电池电压。</p><p><font color=Red>注意事项</font>:underage:</p><ul><li>模型大致符合电动汽车特性，但是数据及其不可信</li><li>简单学习使用，辩证看待</li></ul><hr><h2 id="课程分节">课程分节</h2><ol><li><a href="https://www.bilibili.com/video/BV1cm4y1S7Rs/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-框架逻辑</a></li><li><a href="https://www.bilibili.com/video/BV1a3411Y7dg/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-驾驶员模型</a></li><li><a href="https://www.bilibili.com/video/BV1GT4y1y7TU/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-电池模型</a></li><li><a href="https://www.bilibili.com/video/BV18L4y1s7W2/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-控制模型</a></li><li><a href="https://www.bilibili.com/video/BV1Yq4y1b7PB/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-电机模型</a></li><li><a href="https://www.bilibili.com/video/BV1kb4y177MD/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-车身模型</a></li><li><a href="https://www.bilibili.com/video/BV1r5411o7Rg/?spm_id_from=333.788&amp;vd_source=df2f7337299806c5a1ed5a5f5b4ffd1d">纯电动汽车simulink建模仿真-仿真与欧拉算法</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E5%BC%80%E6%BA%90%E8%AF%BE%E7%A8%8B/">开源课程</category>
      
      <category domain="https://atong.run/categories/%E5%BC%80%E6%BA%90%E8%AF%BE%E7%A8%8B/simulink/">simulink</category>
      
      
      
      <comments>https://atong.run/posts/1513554255/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>python菜鸡教程</title>
      <link>https://atong.run/posts/2838110349/</link>
      <guid>https://atong.run/posts/2838110349/</guid>
      <pubDate>Tue, 28 Feb 2023 04:46:48 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;python菜鸡教程&lt;/h1&gt;
&lt;h2 id=&quot;课程简介&quot;&gt;课程简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;费曼学习法是比较有名的一种学习方式，核心要义是通过复述概念并反馈结果来加强记忆，它是符合大脑的认知规律，从混乱走向有序的过程，从被动记忆走向主动理解并阐述。这么</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>python菜鸡教程</h1><h2 id="课程简介">课程简介</h2><blockquote><p>费曼学习法是比较有名的一种学习方式，核心要义是通过复述概念并反馈结果来加强记忆，它是符合大脑的认知规律，从混乱走向有序的过程，从被动记忆走向主动理解并阐述。这么棒的学习方式当然要尝试尝试，通过这种方式我也尝试学学python</p></blockquote><p>课程依托于大佬文字版教程<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰python教程</a>进行理解与讲述</p><h2 id="课程链接">课程链接</h2><p><a href="https://www.ixigua.com/7173635950831108620?logTag=51f64d219c69d66c8201">第一节、输入和输出</a></p><p><a href="https://www.ixigua.com/7174049005603979791?logTag=622639136a3e74362eb4">第二节、数据类型和变量</a></p><p><a href="https://www.ixigua.com/7178820918473392655?logTag=ac50f7d3ba276998ee50">第三节、字符串和编码</a></p><p><a href="https://www.ixigua.com/7181108669298410024?logTag=9135f17cb2c13d20b8e2">第四节、使用list和tuple</a></p><p><a href="https://www.ixigua.com/7181418828872876547?logTag=9889661aec1751e1989c">第五节、条件判断和循环</a></p><p><a href="https://www.ixigua.com/7190390094074184203?logTag=66a3f6d9d08eddd09840">第六节、使用dict和set</a></p><p><a href="https://www.ixigua.com/7194312039769211396?logTag=9217a796a89d2de0e0f3">第七节、调用函数</a></p>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E5%BC%80%E6%BA%90%E8%AF%BE%E7%A8%8B/">开源课程</category>
      
      <category domain="https://atong.run/categories/%E5%BC%80%E6%BA%90%E8%AF%BE%E7%A8%8B/Python/">Python</category>
      
      
      
      <comments>https://atong.run/posts/2838110349/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>9、高并发内存池-性能测试及优化</title>
      <link>https://atong.run/posts/1573212312/</link>
      <guid>https://atong.run/posts/1573212312/</guid>
      <pubDate>Fri, 17 Feb 2023 08:45:32 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;多线程环境下对比malloc测试&lt;/h1&gt;
&lt;h2 id=&quot;测试代码&quot;&gt;测试代码&lt;/h2&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/spa</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>多线程环境下对比malloc测试</h1><h2 id="测试代码">测试代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ConcurrentAlloc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ntimes 一轮申请和释放内存的次数</span></span><br><span class="line"><span class="comment">// rounds 轮次</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BenchmarkMalloc</span><span class="params">(<span class="type">size_t</span> ntimes, <span class="type">size_t</span> nworks, <span class="type">size_t</span> rounds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;std::thread&gt; <span class="title">vthread</span><span class="params">(nworks)</span></span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; malloc_costtime = <span class="number">0</span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; free_costtime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; nworks; ++k)</span><br><span class="line">&#123;</span><br><span class="line">vthread[k] = std::<span class="built_in">thread</span>([&amp;, k]() &#123;</span><br><span class="line">std::vector&lt;<span class="type">void</span>*&gt; v;</span><br><span class="line">v.<span class="built_in">reserve</span>(ntimes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> begin1 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//v.push_back(malloc(16));</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">malloc</span>((<span class="number">16</span> + i) % <span class="number">8192</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end1 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> begin2 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end2 = <span class="built_in">clock</span>();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">malloc_costtime += (end1 - begin1);</span><br><span class="line">free_costtime += (end2 - begin2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : vthread)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次malloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; malloc_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次free &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发malloc&amp;free&quot;</span> &lt;&lt; nworks * rounds * ntimes &lt;&lt; <span class="string">&quot;总计花费：&quot;</span> &lt;&lt; malloc_costtime + free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单轮次申请释放次数 线程数 轮次</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BenchmarkConcurrentMalloc</span><span class="params">(<span class="type">size_t</span> ntimes, <span class="type">size_t</span> nworks, <span class="type">size_t</span> rounds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::vector&lt;std::thread&gt; <span class="title">vthread</span><span class="params">(nworks)</span></span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; malloc_costtime = <span class="number">0</span>;</span><br><span class="line">std::atomic&lt;<span class="type">size_t</span>&gt; free_costtime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; nworks; ++k)</span><br><span class="line">&#123;</span><br><span class="line">vthread[k] = std::<span class="built_in">thread</span>([&amp;]() &#123;</span><br><span class="line">std::vector&lt;<span class="type">void</span>*&gt; v;</span><br><span class="line">v.<span class="built_in">reserve</span>(ntimes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; rounds; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> begin1 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//v.push_back(ConcurrentAlloc(16));</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">ConcurrentAlloc</span>((<span class="number">16</span> + i) % <span class="number">8192</span> + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end1 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> begin2 = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ntimes; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ConcurrentFree</span>(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> end2 = <span class="built_in">clock</span>();</span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">malloc_costtime += (end1 - begin1);</span><br><span class="line">free_costtime += (end2 - begin2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; t : vthread)</span><br><span class="line">&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次concurrent alloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; malloc_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发执行&quot;</span> &lt;&lt; rounds &lt;&lt; <span class="string">&quot;轮次，每轮次concurrent dealloc &quot;</span> &lt;&lt; ntimes &lt;&lt; <span class="string">&quot;次：花费：&quot;</span> &lt;&lt; free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; nworks &lt;&lt; <span class="string">&quot;个线程并发concurrent alloc&amp;dealloc&quot;</span> &lt;&lt; nworks * rounds * ntimes &lt;&lt; <span class="string">&quot;总计花费：&quot;</span> &lt;&lt; malloc_costtime + free_costtime &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> n = <span class="number">10000</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;==========================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">BenchmarkConcurrentMalloc</span>(n, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BenchmarkMalloc</span>(n, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;==========================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="申请释放固定内存大小">申请释放固定内存大小</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171300120.png" alt="image.png"></p><h2 id="申请释放不同内存大小">申请释放不同内存大小</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171303359.png" alt="image.png"></p><h1>性能瓶颈分析</h1><blockquote><p>上述测试发现，我们的内存池比malloc还是差一些的，但是不大容易知道到底是代码的哪一个部分消耗的性能较多，不知道性能的瓶颈在哪里，这时候可以使用性能分析工具</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171413680.png" alt="image.png"></p><p>打开性能探查器，可用工具类，检测项打上对号</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171414904.png" alt="image.png"></p><p>点击开始</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171430934.png" alt="image.png"></p><p>可以发现MapObjectToSpan所花费时间非常长，因为涉及到锁的竞争问题，那么我们应该如何进行优化呢？</p><h1>基数树优化</h1><blockquote><p>这里使用基数树进行优化，基数树实际是一个分层的哈希表，根据所分层数，可以分为单层基数树、二层基数树、三层基数树</p></blockquote><h2 id="单层基数树">单层基数树</h2><blockquote><p>单层基数树使用的是直接定址法，在32位平台下，最多分成2^32/2^13次方个页，我们直接开2^(31-13)次方大小的数组</p></blockquote><p>这这里可以用非类型模板参数，将次方传入，1&lt;&lt; BITS 就是2的BITS次方。直接开这么长的数组</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171521406.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap1</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LENGTH = <span class="number">1</span> &lt;&lt; BITS;</span><br><span class="line"><span class="type">void</span>** array_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit TCMalloc_PageMap1(void* (*allocator)(size_t)) &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//array_ = reinterpret_cast&lt;void**&gt;((*allocator)(sizeof(void*) &lt;&lt; BITS));</span></span><br><span class="line"><span class="type">size_t</span> size = <span class="built_in">sizeof</span>(<span class="type">void</span>*) &lt;&lt; BITS;</span><br><span class="line"><span class="type">size_t</span> alignSize = SizeClass::_RoundUp(size, <span class="number">1</span> &lt;&lt; PAGE_SHIFT);</span><br><span class="line">array_ = (<span class="type">void</span>**)<span class="built_in">SystemAlloc</span>(alignSize &gt;&gt; PAGE_SHIFT);</span><br><span class="line"><span class="built_in">memset</span>(array_, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">void</span>*) &lt;&lt; BITS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return the current value for KEY.  Returns NULL if not yet set,</span></span><br><span class="line"><span class="comment">// or if k is out of range.</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array_[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// REQUIRES &quot;k&quot; is in range &quot;[0,2^BITS-1]&quot;.</span></span><br><span class="line"><span class="comment">// REQUIRES &quot;k&quot; has been ensured before.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Sets the value &#x27;v&#x27; for key &#x27;k&#x27;.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span> </span>&#123;</span><br><span class="line">array_[k] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二层基数树">二层基数树</h2><blockquote><p>假设同样在32位平台下，最多分成2^32/2^13  = 2^19次方个页，最多用19个比特位可以标识，用二层得基数树，第一层只用5个比特位，做直接定址，对应的下标存的元素是 void* values[LEAF_LENGTH]，剩下的14位可以总共映射 length = 1&lt;&lt;14个数据</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171526874.png" alt="image.png"></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Two-level radix tree</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap2</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// Put 32 entries in the root and (2^BITS)/32 entries in each leaf.</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ROOT_BITS = <span class="number">5</span>; <span class="comment">//第一层对应页号的前5个比特位</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ROOT_LENGTH = <span class="number">1</span> &lt;&lt; ROOT_BITS; <span class="comment">//第一层存储元素的个数 2^5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_BITS = BITS - ROOT_BITS;<span class="comment">//第二层对应页号的其余比特位 19-5=14</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_LENGTH = <span class="number">1</span> &lt;&lt; LEAF_BITS; <span class="comment">//第二层存储元素的个数 2^14</span></span><br><span class="line"><span class="comment">// Leaf node</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Leaf</span> &#123;</span><br><span class="line"><span class="type">void</span>* values[LEAF_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Leaf* root_[ROOT_LENGTH];             <span class="comment">// Pointers to 32 child nodes</span></span><br><span class="line"><span class="type">void</span>* (*allocator_)(<span class="type">size_t</span>);          <span class="comment">// Memory allocator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="comment">//explicit TCMalloc_PageMap2(void* (*allocator)(size_t)) &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//allocator_ = allocator;</span></span><br><span class="line"><span class="built_in">memset</span>(root_, <span class="number">0</span>, <span class="built_in">sizeof</span>(root_));</span><br><span class="line"></span><br><span class="line"><span class="built_in">PreallocateMoreMemory</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; LEAF_BITS;  <span class="comment">// 右移14位，得到前5位</span></span><br><span class="line"><span class="type">const</span> Number i2 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span> || root_[i1] == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root_[i1]-&gt;values[i2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; LEAF_BITS;</span><br><span class="line"><span class="comment">// 1000 0000 0000 000-1 = 0111 1111 1111 11</span></span><br><span class="line"><span class="comment">// 相与获得后14位</span></span><br><span class="line"><span class="type">const</span> Number i2 = k &amp; (LEAF_LENGTH - <span class="number">1</span>); </span><br><span class="line"><span class="built_in">ASSERT</span>(i1 &lt; ROOT_LENGTH);</span><br><span class="line">root_[i1]-&gt;values[i2] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保映射[start ， start+n-1]页号的空间是开好的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Ensure</span><span class="params">(Number start, <span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Number key = start; key &lt;= start + n - <span class="number">1</span>;) &#123;</span><br><span class="line"><span class="type">const</span> Number i1 = key &gt;&gt; LEAF_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for overflow</span></span><br><span class="line"><span class="keyword">if</span> (i1 &gt;= ROOT_LENGTH)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make 2nd level node if necessary</span></span><br><span class="line"><span class="keyword">if</span> (root_[i1] == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">//Leaf* leaf = reinterpret_cast&lt;Leaf*&gt;((*allocator_)(sizeof(Leaf)));</span></span><br><span class="line"><span class="comment">//if (leaf == NULL) return false;</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Leaf&gt;leafPool;</span><br><span class="line">Leaf* leaf = (Leaf*)leafPool.<span class="built_in">New</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(leaf, <span class="number">0</span>, <span class="built_in">sizeof</span>(*leaf));</span><br><span class="line">root_[i1] = leaf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Advance key past whatever is covered by this leaf node</span></span><br><span class="line">key = ((key &gt;&gt; LEAF_BITS) + <span class="number">1</span>) &lt;&lt; LEAF_BITS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreallocateMoreMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 将第二层全部的空间都开好</span></span><br><span class="line"><span class="built_in">Ensure</span>(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; BITS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在32位平台下，第一层数组占，2^5* 4=2^7字节，第二层最多有2^5^2^14^4=2^21=2M，消耗也不大，可以直接全开出来</p></blockquote><h2 id="三层基数树">三层基数树</h2><blockquote><p>64位平台下，公共有2^64/2^13=2^51个页，一层基数树肯定不行，二层页不大行，用三层基数树，三层基数树就是将存储页号的比特位分三次映射</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171607278.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Three-level radix tree</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> BITS&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TCMalloc_PageMap3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INTERIOR_BITS = (BITS + <span class="number">2</span>) / <span class="number">3</span>;       <span class="comment">//第一、二层对应页号的比特位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INTERIOR_LENGTH = <span class="number">1</span> &lt;&lt; INTERIOR_BITS; <span class="comment">//第一、二层存储元素的个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_BITS = BITS - <span class="number">2</span> * INTERIOR_BITS; <span class="comment">//第三层对应页号的比特位个数</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> LEAF_LENGTH = <span class="number">1</span> &lt;&lt; LEAF_BITS;         <span class="comment">//第三层存储元素的个数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">Node* ptrs[INTERIOR_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Leaf</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* values[LEAF_LENGTH];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node* <span class="title">NewNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Node&gt; nodePool;</span><br><span class="line">Node* result = nodePool.<span class="built_in">New</span>();</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(result, <span class="number">0</span>, <span class="built_in">sizeof</span>(*result));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">Node* root_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uintptr_t</span> Number;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">TCMalloc_PageMap3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">root_ = <span class="built_in">NewNode</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">get</span><span class="params">(Number k)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (k &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i3 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);                    <span class="comment">//第三层对应的下标</span></span><br><span class="line"><span class="comment">//页号超出范围，或映射该页号的空间未开辟</span></span><br><span class="line"><span class="keyword">if</span> ((k &gt;&gt; BITS) &gt; <span class="number">0</span> || root_-&gt;ptrs[i1] == <span class="literal">NULL</span> || root_-&gt;ptrs[i1]-&gt;ptrs[i2] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">reinterpret_cast</span>&lt;Leaf*&gt;(root_-&gt;ptrs[i1]-&gt;ptrs[i2])-&gt;values[i3]; <span class="comment">//返回该页号对应span的指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(Number k, <span class="type">void</span>* v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(k &gt;&gt; BITS == <span class="number">0</span>);</span><br><span class="line"><span class="type">const</span> Number i1 = k &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (k &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i3 = k &amp; (LEAF_LENGTH - <span class="number">1</span>);                    <span class="comment">//第三层对应的下标</span></span><br><span class="line"><span class="built_in">Ensure</span>(k, <span class="number">1</span>); <span class="comment">//确保映射第k页页号的空间是开辟好了的</span></span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;Leaf*&gt;(root_-&gt;ptrs[i1]-&gt;ptrs[i2])-&gt;values[i3] = v; <span class="comment">//建立该页号与对应span的映射</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确保映射[start,start+n-1]页号的空间是开辟好了的</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Ensure</span><span class="params">(Number start, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Number key = start; key &lt;= start + n - <span class="number">1</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> Number i1 = key &gt;&gt; (LEAF_BITS + INTERIOR_BITS);         <span class="comment">//第一层对应的下标</span></span><br><span class="line"><span class="type">const</span> Number i2 = (key &gt;&gt; LEAF_BITS) &amp; (INTERIOR_LENGTH - <span class="number">1</span>); <span class="comment">//第二层对应的下标</span></span><br><span class="line"><span class="keyword">if</span> (i1 &gt;= INTERIOR_LENGTH || i2 &gt;= INTERIOR_LENGTH) <span class="comment">//下标值超出范围</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (root_-&gt;ptrs[i1] == <span class="literal">NULL</span>) <span class="comment">//第一层i1下标指向的空间未开辟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开辟对应空间</span></span><br><span class="line">Node* n = <span class="built_in">NewNode</span>();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">root_-&gt;ptrs[i1] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root_-&gt;ptrs[i1]-&gt;ptrs[i2] == <span class="literal">NULL</span>) <span class="comment">//第二层i2下标指向的空间未开辟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开辟对应空间</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;Leaf&gt; leafPool;</span><br><span class="line">Leaf* leaf = leafPool.<span class="built_in">New</span>();</span><br><span class="line"><span class="keyword">if</span> (leaf == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(leaf, <span class="number">0</span>, <span class="built_in">sizeof</span>(*leaf));</span><br><span class="line">root_-&gt;ptrs[i1]-&gt;ptrs[i2] = <span class="built_in">reinterpret_cast</span>&lt;Node*&gt;(leaf);</span><br><span class="line">&#125;</span><br><span class="line">key = ((key &gt;&gt; LEAF_BITS) + <span class="number">1</span>) &lt;&lt; LEAF_BITS; <span class="comment">//继续后续检查</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreallocateMoreMemory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>当需要建立某一页号的映射关系时，先确保存储该页映射的数组空间是开好的，调用Ensure函数，如果没开好，就开辟对应的空间</p></blockquote><h2 id="使用基数树优化">使用基数树优化</h2><blockquote><p>我们在32位平台下测试，直接使用一层基数树即可将unordered_map替换成基数树的结构，并用set和get函数，替换方括号和find的作用</p></blockquote><h3 id="更改代码">更改代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCMalloc_PageMap1&lt;<span class="number">32</span> - PAGE_SHIFT&gt; _idSpanMap;  <span class="comment">//32-13=19，总共2^19个页</span></span><br></pre></td></tr></table></figure><p>建立映射：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_idSpanMap.<span class="built_in">set</span>(span-&gt;_pageId, span);</span><br></pre></td></tr></table></figure><p>读取Span</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Span* ret = (Span*)_idSpanMap.<span class="built_in">get</span>(id);</span><br></pre></td></tr></table></figure><h3 id="优化原理">优化原理</h3><blockquote><p>基数树的检索可能略好一点，但是最重要的是基数树的结构不需要加锁，map和unordered_map，插入数据底层的数据结构可能会变化，比如红黑树的选择，哈希表的扩容，所以在读取映射关系时需要加锁，但是基数树一旦开好空间就不会发生变化。<br>我们不会同时对一个页进行读取映射和建立映射的操作，只有在释放对象的时候才需要读取，建立映射都是在page cache中进行，建立映射的对应的span的usecount为0，而读取对应的span的usecount不为0，所以不会对一个页同时进行读取和建立映射。</p></blockquote><h3 id="性能对比">性能对比</h3><blockquote><p>再次与malloc进行对比</p></blockquote><p>固定大小的对象的申请和释放</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171629323.png" alt="image.png"></p><p>不固定大小的对象的申请和释放</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302171627490.png" alt="image.png"></p><p>可以看到两种场景，都比malloc快2~3倍左右</p>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      <category domain="https://atong.run/categories/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/">高并发内存池</category>
      
      
      <category domain="https://atong.run/tags/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <comments>https://atong.run/posts/1573212312/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>8、高并发内存池-细节完善</title>
      <link>https://atong.run/posts/2734729201/</link>
      <guid>https://atong.run/posts/2734729201/</guid>
      <pubDate>Fri, 17 Feb 2023 06:09:42 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;我们的内存池已经完成了申请内存和释放内存的功能但是还有几个地方没有处理完善，主要有以下几个方面：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大于256KB的内存申请&lt;/li&gt;
&lt;li&gt;内存池的内部要脱离new&lt;/li&gt;
&lt;li&gt;释放对象</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>我们的内存池已经完成了申请内存和释放内存的功能但是还有几个地方没有处理完善，主要有以下几个方面：</p></blockquote><ul><li>大于256KB的内存申请</li><li>内存池的内部要脱离new</li><li>释放对象时的细节</li></ul><h1>大于256KB的内存处理</h1><h2 id="申请">申请</h2><blockquote><p>在ConcurrentAlloc.h文件中，申请内存的时候要分两种情况</p></blockquote><ul><li>小于256kb走thread cache</li><li>大于256kb走page cache</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">ConcurrentAlloc</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 申请的内存大于MAX_BYTES(256kb)</span></span><br><span class="line"><span class="comment">// 走Page Cache层申请</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先进行对齐</span></span><br><span class="line"><span class="type">size_t</span> alignSize = SizeClass::<span class="built_in">RoundUp</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后算需要几页</span></span><br><span class="line"><span class="type">size_t</span> kpage = alignSize &gt;&gt; PAGE_SHITF;</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(alignSize);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span>*)(span-&gt;_pageId &lt;&lt; PAGE_SHITF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pTLSThreadCache == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">pTLSThreadCache = <span class="keyword">new</span> ThreadCache;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pTLSThreadCache-&gt;<span class="built_in">Allocate</span>(size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们SizeClass对齐的逻辑，并没有处理大于256KB的内存，我们需要增加这一部分</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">size_t</span> <span class="title">RoundUp</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">128</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">8</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">64</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (size &lt;= <span class="number">256</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">8</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 大于256KB 1&lt;&lt;13 也就是8kb</span></span><br><span class="line"><span class="keyword">return</span> _RoundUp(size, <span class="number">1</span> &lt;&lt; PAGE_SHITF);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是这个大于256kb的让page cache申请，还是存在一些问题，因为page cache最多提供128页的内存，如果申请的内存大于128页，则还是需要进行处理，这部分，我们在page cache中进行处理。</p></blockquote><pre><code>PageCache::NewSpan函数中，增加申请大于128页的span的逻辑</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果k &gt; 128页 走系统调用</span></span><br><span class="line"><span class="keyword">if</span> (k &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* ptr = <span class="built_in">SystemAlloc</span>(k);</span><br><span class="line">Span* span = <span class="keyword">new</span> Span;</span><br><span class="line">span-&gt;_pageId = (PAGE_ID)ptr &gt;&gt; PAGE_SHITF;</span><br><span class="line">span-&gt;_n = k;</span><br><span class="line"></span><br><span class="line">_idSpanMap[span-&gt;_pageId] = span;</span><br><span class="line"><span class="keyword">return</span> span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放">释放</h2><blockquote><p>大于256kb的内存，释放时，同样不能走thread cache层回收，要有单独的回收逻辑，我们还是通过pagecache层回收</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConcurrentFree</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">MapObjectToSpan</span>(ptr);</span><br><span class="line"></span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseSpanToPageCache</span>(span);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(pTLSThreadCache);</span><br><span class="line">pTLSThreadCache-&gt;<span class="built_in">Deallocate</span>(ptr, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同样，在pagecache层中还要分为，这个内存是大于128页还是小于128页，小于128直接走Page cache层的回收逻辑，大于128页的通过系统调用回收</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放空闲span回到PageCache，并合并相邻的span</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PageCache::ReleaseSpanToPageCache</span><span class="params">(Span* span)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* ptr = (<span class="type">void</span>*)(span-&gt;_pageId &lt;&lt; PAGE_SHITF);</span><br><span class="line"><span class="built_in">SystemFree</span>(ptr);</span><br><span class="line"><span class="keyword">delete</span> span;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并相邻的span，向前合并，有问题：前面的span如果被用就不能进行合并</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID prevId = span-&gt;_pageId - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(prevId);</span><br><span class="line"><span class="comment">//前边的页号没有了就不和并了</span></span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前边相邻页在使用，不合并</span></span><br><span class="line">Span* prevSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (prevSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入合并的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//span-&gt;_pageId -= prevSpan-&gt;_n;</span></span><br><span class="line">span-&gt;_pageId = prevSpan-&gt;_pageId;</span><br><span class="line">span-&gt;_n += prevSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[prevSpan-&gt;_n].<span class="built_in">Erase</span>(prevSpan);</span><br><span class="line"><span class="keyword">delete</span> prevSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">PAGE_ID nextID = span-&gt;_pageId + span-&gt;_n;</span><br><span class="line"><span class="keyword">auto</span> ret = _idSpanMap.<span class="built_in">find</span>(nextID);</span><br><span class="line"><span class="keyword">if</span> (ret == _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Span* nextSpan = ret-&gt;second;</span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_isUse == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超过128页的span也不合并</span></span><br><span class="line"><span class="keyword">if</span> (nextSpan-&gt;_n + span-&gt;_n &gt; NPAGES - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span-&gt;_n += nextSpan-&gt;_n;</span><br><span class="line"></span><br><span class="line">_spanLists[nextSpan-&gt;_n].<span class="built_in">Erase</span>(nextSpan);</span><br><span class="line"><span class="keyword">delete</span> nextSpan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_spanLists[span-&gt;_n].<span class="built_in">PushFront</span>(span);</span><br><span class="line">span-&gt;_isUse = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">_idSpanMap[span-&gt;_pageId] = span;</span><br><span class="line">_idSpanMap[span-&gt;_pageId + span-&gt;_n - <span class="number">1</span>] = span;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里封装的了Windows系统的VirtualFree函数，进行大于128页的内存释放</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用系统接口释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span> <span class="type">void</span> <span class="title">SystemFree</span><span class="params">(<span class="type">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="built_in">VirtualFree</span>(ptr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">// sbrk unmmap等</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>使用定长内存池配合脱离new</h1><blockquote><p>我们的内存池期望的是在内部不使用malloc函数申请内存，走自己的一套申请释放体系，但是目前我们的代码中，还是有不少地方（new span的对象）使用了new，为了完全脱离new，我们可以配合之前的定长内存池。</p></blockquote><h2 id="申请-2">申请</h2><p>因为span对象都是在page cache层new出来的，我们可以在page cache层增加一个定长内存池对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectPool&lt;Span&gt; _spanPool;</span><br></pre></td></tr></table></figure><blockquote><p>然后我们在new Span的场景下，替换成定长内存池的申请</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Span* span = <span class="keyword">new</span> Span;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上边替换成下边</span></span><br><span class="line"></span><br><span class="line">Span* span = _spanPool.<span class="built_in">New</span>();</span><br></pre></td></tr></table></figure><blockquote><p>在线程申请创建thread cache时，也是通过new进行申请的，同样进行替换</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pTLSThreadCache == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*pTLSThreadCache = new ThreadCache;*/</span></span><br><span class="line"><span class="type">static</span> ObjectPool&lt;ThreadCache&gt; tcPool;</span><br><span class="line">pTLSThreadCache = tcPool.<span class="built_in">New</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="释放-2">释放</h2><blockquote><p>对应的delete也要替换成定长内存池的Delete</p></blockquote><h1>释放内存优化为不传对象大小</h1><blockquote><p>我们用free时，只需要传入一个指针即可，但是我们目前的内存池释放内存，不仅要传入指针，还需要传入待释放内存的大小，我们也需要优化为不传入对象的大小</p></blockquote><p>我们可以在span对象中增加成员：ObjSize 用来记录span中每个对象的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> _ObjSize = <span class="number">0</span>; <span class="comment">// 切好的小对象的大小</span></span><br></pre></td></tr></table></figure><p>那我们的释放内存的函数就可以改为下边的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConcurrentFree</span><span class="params">(<span class="type">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">MapObjectToSpan</span>(ptr);</span><br><span class="line"><span class="type">size_t</span> size = span-&gt;_ObjSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (size &gt; MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">lock</span>();</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">ReleaseSpanToPageCache</span>(span);</span><br><span class="line">PageCache::<span class="built_in">GetInstance</span>()-&gt;_pageMtx.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(pTLSThreadCache);</span><br><span class="line">pTLSThreadCache-&gt;<span class="built_in">Deallocate</span>(ptr, size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在的问题就变成了，ObjSize的记录问题了，我们整个内存池中的span对象都是从Page cache层出来的，所以在调用NewSpan的时候，要将切分的对象的大小记录下来，我们申请小于256kb的对象时，都走的thread cache-&gt;central cache-&gt;page cache，另一种情况是大于256kb直接找page cache，这两个地方都需要记录ObjSize</p></blockquote><p>1、在Central层调用NewSpan后，使得span-&gt;ObjSize=size</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们要计算向page cache层要多少页的span</span></span><br><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(SizeClass::<span class="built_in">NumMovePage</span>(size));</span><br><span class="line">span-&gt;_ObjSize = size;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、CurrentAlloc中，申请大于256KB的对象</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Span* span = PageCache::<span class="built_in">GetInstance</span>()-&gt;<span class="built_in">NewSpan</span>(alignSize);</span><br><span class="line">span-&gt;_ObjSize = alignSize;</span><br></pre></td></tr></table></figure><h1>STL线程安全问题</h1><blockquote><p>我们通过unordered_map，建立了PAGE_ID和Span* 的联系，PageCache层，有读写操作，但是我们在使用PageCache的NewSpan函数时，都会加锁，但是CentralCache层和ConcurrentFree函数中会有读操作，而且并未加锁，这样，可能有线程正在改，就有线程读取，会有线程安全的问题</p></blockquote><p>我们在MapObjectToSpan函数中加锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象到span的映射</span></span><br><span class="line"><span class="function">Span* <span class="title">PageCache::MapObjectToSpan</span><span class="params">(<span class="type">void</span>* obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PAGE_ID id = ((PAGE_ID)obj &gt;&gt; PAGE_SHITF);</span><br><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(_pageMtx)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (_idSpanMap.<span class="built_in">find</span>(id) != _idSpanMap.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _idSpanMap[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://atong.run/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      <category domain="https://atong.run/categories/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/">高并发内存池</category>
      
      
      <category domain="https://atong.run/tags/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <comments>https://atong.run/posts/2734729201/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

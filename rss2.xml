<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>孙菜菜</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>万千不如意，睡得着就过得去</description>
    <pubDate>Wed, 01 Feb 2023 11:16:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>震惊！！！C语言也能实现泛型编程吗？？</title>
      <link>http://example.com/2023/02/01/C/generic/</link>
      <guid>http://example.com/2023/02/01/C/generic/</guid>
      <pubDate>Wed, 01 Feb 2023 11:14:58 GMT</pubDate>
      
        
        
      <description>&lt;blockquote&gt;
&lt;p&gt;今天看到一个有意思的知识点，赶紧记录一下，总所周知，C语言没有泛型，但是C11新增了一种表达式，叫做泛型选择表达式(_ Generic)，这个是干啥的呢？它的作用是根据表达式的类型选择一个值，让我们来看一看它具体的语法&lt;/p&gt;
&lt;/blockquo</description>
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>今天看到一个有意思的知识点，赶紧记录一下，总所周知，C语言没有泛型，但是C11新增了一种表达式，叫做泛型选择表达式(_ Generic)，这个是干啥的呢？它的作用是根据表达式的类型选择一个值，让我们来看一看它具体的语法</p></blockquote><h1 id="泛型选择引入"><a href="#泛型选择引入" class="headerlink" title="泛型选择引入"></a>泛型选择引入</h1><p>先看一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> y = <span class="number">2.0</span>;</span><br><span class="line"><span class="type">char</span> z = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">_Generic</span>(x, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">_Generic</span>(y, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">_Generic</span>(z, <span class="type">int</span>:<span class="number">0</span>, <span class="type">double</span> : <span class="number">1</span>, <span class="keyword">default</span>:<span class="number">3</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_Generic是C11关键字，后面的圆括号中包含有多个用逗号分隔的项，第一个项是表达式，后面的每一个项都由一个类型、一个冒号和一个值组成，如double: 1。第一个项的类型匹配哪一个标签，整个表达式的值就是该标签后面的值</code></p><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011644537.png" alt="image.png"></p><blockquote><p>可以看到，根据传入的变量的类型，打印的结果也不同，第一个printf的第一项x是int，那么整个表达式的结果为0，第二个printf的第一项是double，表达式的结果就是1，第三个printf打印结果为3是因为char类型没有匹配，走了默认的default，结果为3</p></blockquote><p><font color="#ff0000">其实，这个东西很像switch语句，只是Generic用表达式类型匹配标签，switch用表达式的值匹配标签</font></p><h1 id="与宏定义组合"><a href="#与宏定义组合" class="headerlink" title="与宏定义组合"></a>与宏定义组合</h1><blockquote><p>我们可以看到啊，上边的用法还是比较恶心麻烦的，但是呢，我们可以结合宏定义组合去玩这个东西，这样就会非常的方便</p></blockquote><p>直接看例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MYTYPE(X) _Generic((X),int:<span class="string">&quot;int&quot;</span>, double:<span class="string">&quot;double&quot;</span>, default:<span class="string">&quot;other&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(d));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(<span class="number">1.0</span>*d));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, MYTYPE(<span class="string">&quot;string&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011709745.png" alt="image.png"></p><blockquote><p>与宏定义结合是不是感觉好多了，甚至有点C++泛型编程的感觉了，但是其实还差点。</p></blockquote><h1 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h1><blockquote><p> _ Generic标签对应的值，可以是整形，也可以是字符串，当然也可以是函数指针。</p></blockquote><p>我们来看一下下边的这段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintInt</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintDouble</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintSting</span><span class="params">(<span class="type">char</span>* x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintOther</span><span class="params">(<span class="type">void</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">print(<span class="string">&quot;类型有点问题\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(X) _Generic((X),\</span></span><br><span class="line"><span class="meta">int:PrintInt,\</span></span><br><span class="line"><span class="meta">double:PrintDouble,\</span></span><br><span class="line"><span class="meta">const char*:PrintSting,\</span></span><br><span class="line"><span class="meta">default:PrintOther)(X)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">2.0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello _Generic&quot;</span>;</span><br><span class="line">PRINT(x);</span><br><span class="line">PRINT(y);</span><br><span class="line">PRINT(str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202302011719753.png" alt="image.png"></p><blockquote><p>这样是不是和C++的泛型编程很像了呢，是不是挺有意思的，当然还是C++的泛型好用一些。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/C/">C</category>
      
      
      <category domain="http://example.com/tags/C11/">C11</category>
      
      
      <comments>http://example.com/2023/02/01/C/generic/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高并发内存池-序章</title>
      <link>http://example.com/2023/01/29/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0-%E5%BA%8F%E7%AB%A0/</link>
      <guid>http://example.com/2023/01/29/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0-%E5%BA%8F%E7%AB%A0/</guid>
      <pubDate>Sun, 29 Jan 2023 14:10:09 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是一个CPP实现的高并发内存池，原型是谷歌的tcmalloc开源项目（Thread-Cachin</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><blockquote><p>这是一个CPP实现的高并发内存池，原型是谷歌的tcmalloc开源项目（Thread-Caching Malloc），既线程缓存的malloc，实现了高效的多线程内存管理，用于替代系统的内存分配相关函数（malloc、free）</p></blockquote><h1 id="前置需求"><a href="#前置需求" class="headerlink" title="前置需求"></a>前置需求</h1><ul><li>C&#x2F;C++</li><li>数据结构（链表、哈希桶）</li><li>操作系统内存管理</li><li>单例模式</li><li>多线程</li><li>互斥锁</li><li>….</li></ul><h1 id="内存池简介"><a href="#内存池简介" class="headerlink" title="内存池简介"></a>内存池简介</h1><h2 id="1、池化技术"><a href="#1、池化技术" class="headerlink" title="1、池化技术"></a>1、池化技术</h2><blockquote><p>池化技术就是程序先向系统申请过量的资源，然后自己管理，能大大提升程序的运行效率</p></blockquote><p>常见的池化技术场景</p><ul><li>内存池</li><li>线程池</li><li>对象池</li><li>…..</li></ul><h2 id="2、内存池"><a href="#2、内存池" class="headerlink" title="2、内存池"></a>2、内存池</h2><blockquote><p>内存池是指程序预先从操作系统申请一块足够大内存，此后，当程序中需要申请内存的时候，不是直接向操作系统申请，而是直接从内存池中获取；同理，当程序释放内存的时候，并不真正将内存返回给操作系统，而是返回内存池。当程序退出(或者特定时间)时，内存池才将之前申请的内存真正释放。</p></blockquote><h2 id="3、内存池解决的问题"><a href="#3、内存池解决的问题" class="headerlink" title="3、内存池解决的问题"></a>3、内存池解决的问题</h2><h3 id="内存碎片问题"><a href="#内存碎片问题" class="headerlink" title="内存碎片问题"></a>内存碎片问题</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301292200227.png" alt="内存碎片.png"></p><h3 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h3><blockquote><p>向操作系统频繁申请内存消耗较大，内存池能够避免让程序频繁的向系统申请和释放内存</p></blockquote><h2 id="4、malloc"><a href="#4、malloc" class="headerlink" title="4、malloc"></a>4、malloc</h2><blockquote><p>C&#x2F;C++中动态申请内存都是通过malloc去申请内存，malloc本质也是一个内存池，原理如下：</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301292206748.png" alt="image.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      <category domain="http://example.com/categories/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/">高并发内存池</category>
      
      
      
      <comments>http://example.com/2023/01/29/%E9%A1%B9%E7%9B%AE/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%B1%A0-%E5%BA%8F%E7%AB%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>课程推荐-理财篇</title>
      <link>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E7%90%86%E8%B4%A2/</link>
      <guid>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E7%90%86%E8%B4%A2/</guid>
      <pubDate>Sat, 28 Jan 2023 06:30:51 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Python数据分析实战：构建股票量化交易系统&quot;&gt;&lt;a href=&quot;#Python数据分析实战：构建股票量化交易系统&quot; class=&quot;headerlink&quot; title=&quot;Python数据分析实战：构建股票量化交易系统&quot;&gt;&lt;/a&gt;Python数据分析实战：构建股票</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Python数据分析实战：构建股票量化交易系统"><a href="#Python数据分析实战：构建股票量化交易系统" class="headerlink" title="Python数据分析实战：构建股票量化交易系统"></a>Python数据分析实战：构建股票量化交易系统</h2><ul><li>深入理解量化交易的本质、发展、优势、意义和过程；</li><li>掌握Python基础工具的使用方法，如Python、Pandas、Numpy、Matplotlib、TA-Lib、Tushare、statsmodels、pyecharts等；</li><li>掌握Python数据分析和挖掘的过程和技能；</li><li>掌握Python实现经典金融技术指标的方法，如K线、均线、成交量、MACD、KDJ等。</li><li>掌握使用Matplotlib、pyecharts可视化方法绘制出股票行情分析界面以捕捉个股动向，为大家呈现不同的显示效果。</li><li>掌握Python实现应用数学中经典算法，如线性回归、蒙特卡洛、随机漫步、凯利公式等；</li><li>掌握如何从数据特征值中实现常用的量化交易策略，如择时、选股、风险控制、度量、仓位管理等。通过学习我们可以制定量化交易策略以及度量策略效果，应用交易策略来辅助股票交易。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281429616.jpg" alt="D90C09628F49A26EBEF4BB6308B6BE05.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/">推荐</category>
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/">课程</category>
      
      
      
      <comments>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E7%90%86%E8%B4%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>课程推荐-后端篇</title>
      <link>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%90%8E%E7%AB%AF/</link>
      <guid>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%90%8E%E7%AB%AF/</guid>
      <pubDate>Sat, 28 Jan 2023 06:24:48 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;课程1-MySQL-性能调优必知必会&quot;&gt;&lt;a href=&quot;#课程1-MySQL-性能调优必知必会&quot; class=&quot;headerlink&quot; title=&quot;课程1 - MySQL 性能调优必知必会&quot;&gt;&lt;/a&gt;课程1 - MySQL 性能调优必知必会&lt;/h2&gt;&lt;ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="课程1-MySQL-性能调优必知必会"><a href="#课程1-MySQL-性能调优必知必会" class="headerlink" title="课程1 - MySQL 性能调优必知必会"></a>课程1 - MySQL 性能调优必知必会</h2><ul><li>数据架构方面：主要讲述 MySQL 主从架构之间可能遇到的问题，以及主从架构如何提高稳定性。</li><li>存储引擎方面：主要讲述 MySQL 数据库中的 InnoDB 存储引擎的底层运行原理以及 InnoDB 存储引擎的优化。</li><li>SQL 方面：主要讲述 SQL 的实现原理，例如，order by（排序）的实现原理及优化、join（连表）的实现原理及优化等，更有一条 SQL 从执行的开始到结束都经历过哪些模块，在使用过程中优化的最佳实践等。</li><li>MySQL 数据安全：主要讲述在 MySQL 数据库中如何防止数据丢失，以及数据库中各种日志的作用。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428630.jpg" alt="11E0A633507956E663577A8E64791E6D.jpg"></p><h2 id="课程2-Python-异步网络编程实战"><a href="#课程2-Python-异步网络编程实战" class="headerlink" title="课程2 - Python 异步网络编程实战"></a>课程2 - Python 异步网络编程实战</h2><ul><li>从事 Python Web 开发的技术人员</li><li>对 Python 感兴趣，想了解 Python 异步实现过程</li><li>在开发过程中，想使用异步方式提升 Python 性能的开发者</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428056.jpg" alt="E6D29224C353AC28FC76ABD734A8C32C.jpg"></p><h2 id="课程3-深入理解-TCP-协议：从原理到实战"><a href="#课程3-深入理解-TCP-协议：从原理到实战" class="headerlink" title="课程3 - 深入理解 TCP 协议：从原理到实战"></a>课程3 - 深入理解 TCP 协议：从原理到实战</h2><ul><li>学习 TCP 协议多次从入门到放弃的同学</li><li>想通过实验方法学习 TCP 协议的同学</li><li>对于前端工程师，学完可以快速辨识开发中遇到的问题是前端还是后端的问题，对页面性能优化有更深的理解</li><li>对于后端工程师，TCP 协议可以说是必须要掌握的技能，学完能从协议和网络层面快速分析后端诸多分布式组件的问题，对提升接口的性能和分布式系统的可靠性会更有把握</li><li>对于测试工程师，对网络协议理解的越深，越能发现隐藏很深的 Bug，对性能测试、压力测试会有更深的理解</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281428061.jpg" alt="0F0CD1421DF22FE9CFBA9E317E9E2B45.jpg"></p><h2 id="课程4-开发者必备的-Docker-实践指南"><a href="#课程4-开发者必备的-Docker-实践指南" class="headerlink" title="课程4 - 开发者必备的 Docker 实践指南"></a>课程4 - 开发者必备的 Docker 实践指南</h2><ul><li>虚拟化技术、容器技术和 Docker 的背景</li><li>Docker 运行环境的搭建</li><li>镜像与容器的管理与使用</li><li>自定义镜像和共享镜像</li><li>通过 Compose 编排应用</li><li>多个使用 Docker 搭建运行环境的实践</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281429087.jpg" alt="35C46EF4C2C8A41F16DC9C43DE6CA8B6.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/">推荐</category>
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/">课程</category>
      
      
      
      <comments>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%90%8E%E7%AB%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>课程推荐-工具篇</title>
      <link>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%B7%A5%E5%85%B7/</link>
      <guid>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%B7%A5%E5%85%B7/</guid>
      <pubDate>Sat, 28 Jan 2023 05:48:26 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;随着这几年 GitHub 的流行，Git 已经是一个程序员逃不过的技术项，但很多人却纷纷倒在了学习它的路上</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><blockquote><p>随着这几年 GitHub 的流行，Git 已经是一个程序员逃不过的技术项，但很多人却纷纷倒在了学习它的路上。而且，出于工作原因而不得不用 Git 的人，有不少在工作中对 Git 也是能不用就不用，生怕哪个命令用错就把公司的代码库毁掉了🙈。而那些对 Git 掌握得比较好的少数人，就像团队中的神一样，在同事遇到 Git 相关的问题的时候用各种风骚操作来拯救队友于水火。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281415936.jpg" alt="E1AEE84870D5BE5C2DA57BDF00F1C3D8.jpg"></p><h2 id="Nvim"><a href="#Nvim" class="headerlink" title="Nvim"></a>Nvim</h2><ul><li>适合有一点 VIM 基础的使用者（至少知道怎么编辑文件和退出 VIM 😁）。</li><li>有程序开发基础，有可以访问 Github 的网络环境，想要提升开发效率与开发体验的程序开发人员。</li><li>想要系统学习 Neovim 配置，却被网上零散过时的 VIM 配置教程困扰的同学们。</li></ul><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301281416032.jpg" alt="01893C4AF74549C45EEC1A4DC4D77019.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/">推荐</category>
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/">课程</category>
      
      
      
      <comments>http://example.com/2023/01/28/%E6%8E%A8%E8%8D%90/%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E5%B7%A5%E5%85%B7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>这里有个彩蛋哦</title>
      <link>http://example.com/2023/01/24/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%BD%A9%E8%9B%8B/</link>
      <guid>http://example.com/2023/01/24/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%BD%A9%E8%9B%8B/</guid>
      <pubDate>Tue, 24 Jan 2023 09:24:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;正在建设中……&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>正在建设中……</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      <category domain="http://example.com/categories/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/">其他</category>
      
      
      
      <comments>http://example.com/2023/01/24/%E5%B7%A5%E5%85%B7/%E5%85%B6%E4%BB%96/%E5%BD%A9%E8%9B%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何最快的打造一个帅气好看可以装逼的github主页呢？</title>
      <link>http://example.com/2023/01/22/%E5%B7%A5%E5%85%B7/github/github%E4%B8%BB%E9%A1%B5/</link>
      <guid>http://example.com/2023/01/22/%E5%B7%A5%E5%85%B7/github/github%E4%B8%BB%E9%A1%B5/</guid>
      <pubDate>Sat, 21 Jan 2023 17:24:58 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;strong&gt;先说结论：抄别人好看的主页&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：自己去搞得话，并不一定好弄，而且不如人家的好看，当然我也在后边放了几个小网站，想自己丰富的可以去看看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;好看主页推</description>
        
      
      
      
      <content:encoded><![CDATA[<p><strong>先说结论：抄别人好看的主页</strong></p><blockquote><p>PS：自己去搞得话，并不一定好弄，而且不如人家的好看，当然我也在后边放了几个小网站，想自己丰富的可以去看看。</p></blockquote><h2 id="好看主页推荐"><a href="#好看主页推荐" class="headerlink" title="好看主页推荐"></a>好看主页推荐</h2><blockquote><p>这边推荐四个主页，后边会说复制主页的方法，github的主页是需要建立一个与github的ID同名的仓库的，然后里面放README.md的文档，这个文档内容就会被展示到主页。</p></blockquote><p><a href="https://github.com/blinkfox">blinkfox (闪烁之狐 (blinkfox)) (github.com)</a></p><p>推荐指数：⭐⭐⭐⭐</p><p>好看指数：⭐⭐</p><p>复制难易：⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210027622.png"></p><p><a href="https://github.com/L1cardo">L1cardo (Licardo) (github.com)</a></p><p>推荐指数：⭐⭐⭐⭐⭐</p><p>好看指数：⭐⭐⭐⭐</p><p>复制难易：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210034952.png"></p><p><a href="https://github.com/appotry">appotry (夜法之书(appotry)) (github.com)</a></p><p>推荐指数：⭐⭐</p><p>好看指数：⭐⭐⭐</p><p>复制难易：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210041636.png"></p><p><a href="https://github.com/atongrun">atongrun (孙菜菜) (github.com)</a></p><p>推荐指数：⭐⭐⭐</p><p>好看指数：⭐⭐</p><p>复制难易：⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210049534.png"></p><blockquote><p>前三个是大佬的，最后一个是我的，我是抄的大佬的，这里就没必要放太多了，因为大差不差，大家可以自己打开github主页下载文档，当然方便点也可以关注我的公众号【孙菜菜】，回复【帅气主页】，获取源文件。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210119032.png"></p><h2 id="如何复制"><a href="#如何复制" class="headerlink" title="如何复制"></a>如何复制</h2><h3 id="步骤1、建立同名仓库"><a href="#步骤1、建立同名仓库" class="headerlink" title="步骤1、建立同名仓库"></a>步骤1、建立同名仓库</h3><p>在github上建立一个同名的仓库，这里就不多说，看主页美化的大家应该都会的，然后对README.md文档操作就OK了</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211357638.png"></p><h2 id="步骤2、Copy大法"><a href="#步骤2、Copy大法" class="headerlink" title="步骤2、Copy大法"></a>步骤2、Copy大法</h2><blockquote><p>具体步骤如下，记得一定用markdown编辑器弄最好，容易显示出实时的效果，可以按照自己的喜欢酌情删减哦，或者几个文档混合copy</p></blockquote><ul><li>打开四个文件夹的任何一个（你喜欢的）</li><li>将所有内容放到你本地仓库</li><li>打开README.md文档，将里面的github用户名换成自己的</li><li>将各种链接换成自己的</li><li>git add -&gt; git commit -&gt; git push 大功告成</li></ul><blockquote><p>当然，如果大家嫌麻烦怕改链接名错误啥的话，同样关注【孙菜菜】公众号，回复【帅气主页】，获取源文件。里面我还放了个详细的说明，以我的github主页为例子，放到word里面了，将所有需要修改的地方都加上了高亮和注释。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211354492.png"></p><blockquote><p>欢迎关注哦。</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211358151.gif"></p><h2 id="网站推荐"><a href="#网站推荐" class="headerlink" title="网站推荐"></a>网站推荐</h2><blockquote><p>如果大家非得说不喜欢直接copy别人的，那么你就可以看看下面几个网站了，这下边是我觉得最常见的github主页的几个部件了，如果你要配的比较好看的话，可能还需要懂一点HTML语言哦</p></blockquote><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">各种表情</a></p><blockquote><p>在这里有许多 emoji 的符号代码，你可以直接将它们用到 README 中。</p></blockquote><p>实用指数：⭐⭐⭐</p><p><a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">统计卡片</a></p><blockquote><p>这个就是github主页最常见的小部件了</p></blockquote><p>实用指数：⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210105140.png"></p><p><a href="https://shields.io/">丰富标签</a></p><blockquote><p>无论是项目还是github主页出现频率超高的小标签，非常的实用。</p></blockquote><p>实用指数：⭐⭐⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301210106308.png"></p><p><a href="https://github.com/ryo-ma/github-profile-trophy/blob/master/README.md">各种奖杯</a></p><blockquote><p>这个也是和卡片差不多的统计相关的小部件，出现频率也挺高</p></blockquote><p>实用指数：⭐⭐⭐</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301211413651.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有一个好看的github主页挺好玩主要的可以装逼，希望大家都能搞一个令自己满意的主页。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      <category domain="http://example.com/categories/%E5%B7%A5%E5%85%B7/github/">github</category>
      
      
      
      <comments>http://example.com/2023/01/22/%E5%B7%A5%E5%85%B7/github/github%E4%B8%BB%E9%A1%B5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>白嫖零花钱</title>
      <link>http://example.com/2023/01/19/%E6%8E%A8%E8%8D%90/%E4%B8%9A%E4%BD%99/%E9%9B%B6%E8%8A%B1%E9%92%B1/</link>
      <guid>http://example.com/2023/01/19/%E6%8E%A8%E8%8D%90/%E4%B8%9A%E4%BD%99/%E9%9B%B6%E8%8A%B1%E9%92%B1/</guid>
      <pubDate>Thu, 19 Jan 2023 05:55:58 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1、微信扫码&quot;&gt;&lt;a href=&quot;#1、微信扫码&quot; class=&quot;headerlink&quot; title=&quot;1、微信扫码&quot;&gt;&lt;/a&gt;1、微信扫码&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tong-1306822294.cos.ap-beijing.myqcl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1、微信扫码"><a href="#1、微信扫码" class="headerlink" title="1、微信扫码"></a>1、微信扫码</h2><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301191345034.jpg"></p><h2 id="2、搜索关键词"><a href="#2、搜索关键词" class="headerlink" title="2、搜索关键词"></a>2、搜索关键词</h2><p>进去搜索以下关键词，选择价格最高做即可，基本上3分钟左右就Ok了</p><blockquote><p>下面都是我自己做过的。</p><p>主要是时间短、价格高，当然还有很多，大家可以自己找找。</p><p>迫于懒的原因，没找多少，都是想改善一下自己的生活的时候，才做的</p></blockquote><table><thead><tr><th align="center">序号</th><th align="center">名称</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">凹音短视频</td><td align="center">7+</td></tr><tr><td align="center">2</td><td align="center">云闪付</td><td align="center">15+</td></tr><tr><td align="center">3</td><td align="center">小招推客</td><td align="center">10+</td></tr><tr><td align="center">4</td><td align="center">快步</td><td align="center">5+</td></tr><tr><td align="center">5</td><td align="center">云缴费</td><td align="center">5+</td></tr><tr><td align="center">6</td><td align="center">星云视界</td><td align="center">4+</td></tr><tr><td align="center">7</td><td align="center">香蕉乐玩</td><td align="center">12+</td></tr><tr><td align="center">8</td><td align="center">游易赚</td><td align="center">10+</td></tr><tr><td align="center">9</td><td align="center">豆豆趣玩</td><td align="center">7+</td></tr><tr><td align="center">10</td><td align="center">辅助注册</td><td align="center">8+</td></tr><tr><td align="center">11</td><td align="center">哔哩哔哩</td><td align="center">5+</td></tr><tr><td align="center">12</td><td align="center">btd</td><td align="center">11+</td></tr><tr><td align="center">13</td><td align="center">淘宝特价版</td><td align="center">7+</td></tr><tr><td align="center">14</td><td align="center">京东白条</td><td align="center">20+</td></tr><tr><td align="center">15</td><td align="center">冲顶鸭</td><td align="center">10+</td></tr><tr><td align="center">16</td><td align="center">一淘</td><td align="center">5+</td></tr><tr><td align="center">17</td><td align="center">梨漩</td><td align="center">7+</td></tr><tr><td align="center">18</td><td align="center">京东极速版</td><td align="center">6+</td></tr><tr><td align="center">19</td><td align="center">聚跑</td><td align="center">6+</td></tr><tr><td align="center">20</td><td align="center">萌犬世界</td><td align="center">12+</td></tr><tr><td align="center">21</td><td align="center">AITD</td><td align="center">10+</td></tr><tr><td align="center">22</td><td align="center">小蚂蚁</td><td align="center">7+</td></tr><tr><td align="center">23</td><td align="center">陌嗨短视频</td><td align="center">8+</td></tr><tr><td align="center">24</td><td align="center">未完</td><td align="center">待更新。。。</td></tr></tbody></table><p><strong>Ps：也可以看网页版的，点击阅读原文即可，网页版的更新快一点。只做简单的，勿被标题迷惑，提交截图超过2个的，直接放弃即可，因为太繁琐了</strong></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/">推荐</category>
      
      <category domain="http://example.com/categories/%E6%8E%A8%E8%8D%90/%E4%B8%9A%E4%BD%99/">业余</category>
      
      
      
      <comments>http://example.com/2023/01/19/%E6%8E%A8%E8%8D%90/%E4%B8%9A%E4%BD%99/%E9%9B%B6%E8%8A%B1%E9%92%B1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++的IO流</title>
      <link>http://example.com/2023/01/15/CPP/C++IO%E6%B5%81/</link>
      <guid>http://example.com/2023/01/15/CPP/C++IO%E6%B5%81/</guid>
      <pubDate>Sun, 15 Jan 2023 14:39:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-IO体系&quot;&gt;&lt;a href=&quot;#C-IO体系&quot; class=&quot;headerlink&quot; title=&quot;C++IO体系&quot;&gt;&lt;/a&gt;C++IO体系&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ostream&amp;#x2F;istream 更好的支持自定义类型对象的流插入和流</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-IO体系"><a href="#C-IO体系" class="headerlink" title="C++IO体系"></a>C++IO体系</h2><blockquote><p>ostream&#x2F;istream 更好的支持自定义类型对象的流插入和流提取，自定义类型，可以自己重载，控制流提取和流插入的方式</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151704396.png"></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="c输入"><a href="#c输入" class="headerlink" title="c输入"></a>c输入</h3><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151712088.png"></p><h3 id="c-输入"><a href="#c-输入" class="headerlink" title="c++输入"></a>c++输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; str;</span><br><span class="line"></span><br><span class="line">year = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">mon = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">day = <span class="built_in">stoi</span>(str.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151724063.png"></p><p>ctrl+z+换行结束输入</p><blockquote><p>为什么可以用上边循环的写法呢？是因为cin的对象可以隐式类型转换成bool（调用operator bool），在流里面读到错误或者结束标志的时候，会返回false</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151732425.png"></p><p>举例详解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a)  <span class="comment">//这里前边加上explict，下边 A aa1 = 1 代码就编不过去了</span></span><br><span class="line">:_a(a)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="comment">//如果这个前边加explict那么int i = aa1也不行，但是可以强转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 内置类型 转换成自定义类型</span></span><br><span class="line">A aa1 = <span class="number">1</span>; <span class="comment">// 隐式类型转换 用1构造A临时对象，再拷贝构造aa1，优化后直接1构造aa1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型 转换成内置类型</span></span><br><span class="line"><span class="type">int</span> i = aa1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><blockquote><p>C++根据文件内容的数据格式分为二进制文件和文本文件</p></blockquote><p>定义一个文件流对象  </p><ul><li>ifstream ifile(只输入用)  </li><li>ofstream ofile(只输出用)  </li><li>fstream iofile(既输入又输出用)</li></ul><p>看一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;test.cpp&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> ch = ifs.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (ifs)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ch;</span><br><span class="line">ch = ifs.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这段程序可以读取当前文件的内容</code></pre><p>C++特有的优点：</p><p>对内置的类型</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151927497.png"></p><p>对自定义的类型：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151934569.png"></p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151935531.png"></p><pre><code>前题是自定义的类型支持流提取，这样对自定义类型的读写通过流的方式就非常的方便了。</code></pre><blockquote><p>两种读写方式对比</p></blockquote><ol><li>二进制读写：在内存如何存储，就如何写到磁盘文件<br> 优点：快<br> 缺点：写出去内容看不见</li><li>文本读写：对象数据序列化字符串写出来，读回来也是字符串，反序列化转成对象数据<br> 优点：可以看见写出去是什么<br> 缺点：存在一个转换过程，要慢一些</li></ol><h3 id="二进制读写"><a href="#二进制读写" class="headerlink" title="二进制读写"></a>二进制读写</h3><blockquote><p>一个关于二进制读取string类型的坑</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ServerInfo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//char _address[32];</span></span><br><span class="line">string _address; <span class="comment">// 换成string 类型</span></span><br><span class="line"><span class="type">int</span> _port;  <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">Date _date;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ConfigManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ConfigManager</span>(<span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;server.config&quot;</span>)</span><br><span class="line">:_filename(filename)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteBin</span><span class="params">(<span class="type">const</span> ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(_filename, ios_base::out | ios_base::binary)</span></span>;</span><br><span class="line">ofs.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;info, <span class="built_in">sizeof</span>(info));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReadBin</span><span class="params">(ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(_filename, ios_base::in | ios_base::binary)</span></span>;</span><br><span class="line">ifs.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;info, <span class="built_in">sizeof</span>(info));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string _filename; <span class="comment">// 配置文件</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 二进制写出去</span></span><br><span class="line"><span class="comment">//ServerInfo winfo = &#123; &quot;127.0.0.1&quot;, 888 &#125;;</span></span><br><span class="line"><span class="comment">//ServerInfo winfo = &#123; &quot;https://legacy.cplusplus.com/reference/istream/istream/read/&quot;, 888 &#125;;</span></span><br><span class="line"><span class="comment">//ConfigManager cm;</span></span><br><span class="line"><span class="comment">//cm.WriteBin(winfo);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制的读</span></span><br><span class="line">ServerInfo rinfo;</span><br><span class="line">ConfigManager cm;</span><br><span class="line">cm.<span class="built_in">ReadBin</span>(rinfo);</span><br><span class="line">cout &lt;&lt; rinfo._address &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rinfo._port &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>情况1、写入字符较短时</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152109265.png"></p><pre><code>结果虽然读取成功，但是程序出现了问题，退出码不是0</code></pre><blockquote><p>情况2、写入字符串较长时</p></blockquote><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152111415.png"></p><pre><code>可以看到address直接读取报错</code></pre><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152116889.png"></p><p>原因是当address比较长的时候，string对象，字符串会存在堆里面，ptr指针指向这个字符串，但是写到文件里面的时候，写的不是堆的内存，而是ptr这个地址。</p><p>二进制读写，不大适合有在堆上申请数据类型的</p><h3 id="文本读写"><a href="#文本读写" class="headerlink" title="文本读写"></a>文本读写</h3><p>下边是文本读写的方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*void WriteText(const ServerInfo&amp; info)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ofstream ofs(_filename, ios_base::out);</span></span><br><span class="line"><span class="comment">ofs.write(info._address.c_str(), info._address.size());</span></span><br><span class="line"><span class="comment">ofs.put(&#x27;\n&#x27;);</span></span><br><span class="line"><span class="comment">const string str = to_string(info._port);</span></span><br><span class="line"><span class="comment">ofs.write(str.c_str(), str.size());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void ReadText(ServerInfo&amp; info)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ifstream ifs(_filename, ios_base::in | ios_base::binary);</span></span><br><span class="line"><span class="comment">char buff[128];</span></span><br><span class="line"><span class="comment">ifs.getline(buff, 128);</span></span><br><span class="line"><span class="comment">info._address = buff;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ifs.getline(buff, 128);</span></span><br><span class="line"><span class="comment">info._port = stoi(buff);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">WriteText</span><span class="params">(<span class="type">const</span> ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(_filename, ios_base::out)</span></span>;</span><br><span class="line">ofs &lt;&lt; info._address &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; info._port &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; info._date &lt;&lt; endl; <span class="comment">//这里是日期类的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReadText</span><span class="params">(ServerInfo&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(_filename, ios_base::in | ios_base::binary)</span></span>;</span><br><span class="line">ifs &gt;&gt; info._address &gt;&gt; info._port &gt;&gt; info._date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h2><p>一个例子：</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301152147060.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ChatInfo</span></span><br><span class="line">&#123;</span><br><span class="line">string _name; <span class="comment">// 名字</span></span><br><span class="line"><span class="type">int</span> _id;      <span class="comment">// id</span></span><br><span class="line">Date _date;   <span class="comment">// 时间</span></span><br><span class="line">string _msg;  <span class="comment">// 聊天信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line">ChatInfo winfo = &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">135246</span>, &#123; <span class="number">2022</span>, <span class="number">4</span>, <span class="number">10</span> &#125;, <span class="string">&quot;晚上一起看电影吧&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//ostringstream oss;</span></span><br><span class="line">stringstream oss;</span><br><span class="line">oss &lt;&lt; winfo._name &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._id &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._date &lt;&lt; endl;</span><br><span class="line">oss &lt;&lt; winfo._msg &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str = oss.<span class="built_in">str</span>();</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络传输str，另一端接收到了字符串串信息数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line">ChatInfo rInfo;</span><br><span class="line"><span class="comment">//istringstream iss(str);</span></span><br><span class="line"><span class="function">stringstream <span class="title">iss</span><span class="params">(str)</span></span>;</span><br><span class="line">iss &gt;&gt; rInfo._name;</span><br><span class="line">iss &gt;&gt; rInfo._id;</span><br><span class="line">iss &gt;&gt; rInfo._date;</span><br><span class="line">iss &gt;&gt; rInfo._msg;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rInfo._date &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; rInfo._name &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; rInfo._id &lt;&lt; <span class="string">&quot;]:&gt;&quot;</span> &lt;&lt; rInfo._msg &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分割字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(<span class="string">&quot;sad ad fsd&quot;</span>)</span></span>;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/CPP/">CPP</category>
      
      
      
      <comments>http://example.com/2023/01/15/CPP/C++IO%E6%B5%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++类型转换</title>
      <link>http://example.com/2023/01/15/CPP/c++%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <guid>http://example.com/2023/01/15/CPP/c++%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <pubDate>Sun, 15 Jan 2023 08:41:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;C语言中的类型转换&quot;&gt;&lt;a href=&quot;#C语言中的类型转换&quot; class=&quot;headerlink&quot; title=&quot;C语言中的类型转换&quot;&gt;&lt;/a&gt;C语言中的类型转换&lt;/h1&gt;&lt;h2 id=&quot;隐式类型转换&quot;&gt;&lt;a href=&quot;#隐式类型转换&quot; class=&quot;head</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="C语言中的类型转换"><a href="#C语言中的类型转换" class="headerlink" title="C语言中的类型转换"></a>C语言中的类型转换</h1><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><blockquote><p>隐式类型转换（意义相近的类型）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 隐式类型转换(意义相近的类型)</span></span><br><span class="line"><span class="type">double</span> d = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d, %.2f\n&quot;</span>, i, d);</span><br></pre></td></tr></table></figure><h2 id="显示类型转换"><a href="#显示类型转换" class="headerlink" title="显示类型转换"></a>显示类型转换</h2><blockquote><p>显示的强制类型转换(意义不相近的类型，值转换后有意义)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int address = p; //这样没法隐式类型转换会报错</span></span><br><span class="line"><span class="type">int</span> address = (<span class="type">int</span>)p; <span class="comment">//强制类型转换没问题</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x, %d\n&quot;</span>, p, address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="C-强制类型转换"><a href="#C-强制类型转换" class="headerlink" title="C++强制类型转换"></a>C++强制类型转换</h1><blockquote><p>c++也支持c的类型转换，但是c++为了加强类型转换的可视性，引入了四种命名的强制类型转换操作符</p></blockquote><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2><blockquote><p>这个就像c中的隐式类型转换，只不过显示的写了出来，static_cast用于非多态类型的转换（静态转换），编译器隐式执行的任何类型转换都可用static_cast，但它不能用于两个不相关的类型进行转换</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> d = <span class="number">12.34</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h2><blockquote><p>类似于c的显示强制类型的转换，一般用于将一种类型转换为另一种不同的类型</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(a);  <span class="comment">// 把int 强转为 int*</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h2><blockquote><p>能够删除变量的const属性</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//int* p = const_cast&lt;int*&gt;(&amp;a);</span></span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;a; <span class="comment">// c的那一套也可以</span></span><br><span class="line">*p = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上边的代码会出现一个问题，就是运行结果显示，a还是2，不过当我们打开监视窗口可以看到a其实已经被改成3了，这是什么原因呢？</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301131530309.png"></p><pre><code>a被const修饰，编译器以为不会被修改，所以加载到寄存器，虽然内存中已经被改了但是寄存器里面的还是2，cout的时候直接去寄存器读，所以打印出来是2</code></pre><p>我们可以在定义a变量的时候加上 volatile关键字，这样编译器处理的时候就会去内存中读取数据，这样，运行结果就变成3 3了。</p><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301131535214.png"></p><p>注：</p><ol><li>兼容c隐式类型转换和强制类型转换</li><li>期望不要再用了，最好用规范的cpp显示强制类型转换</li><li>static_cast（隐式类型转换）、reinterpret_cast、const_cast（强制类型转换）</li></ol><h2 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h2><blockquote><p> 用于将一个父类对象的指针或者引用转换为子类的指针或者引用（动态转换）</p></blockquote><p><strong>向上转型</strong>：子类对象指针&#x2F;引用-&gt;父类指针&#x2F;引用  （不需要转换，赋值兼容规则）<br><strong>向下转型</strong>：父类对象指针&#x2F;引用-&gt;子类指针&#x2F;引用  （用dynamic_cast转型是安全的）</p><ol><li>dynamic_cast只能用于父类含有虚函数的类</li><li>dynamic_cast会先检查是否能转换成功，能成功则转换，不能则返回0</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A*指针pa有可能指向父类，有可能指向子类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(A* pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 如果pa是指向子类，那么可以转换，转换表达式返回正确的地址</span></span><br><span class="line"><span class="comment">// 如果pa是指向父类，那么不能转换，转换表达式返回nullptr</span></span><br><span class="line">B* pb = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(pa); <span class="comment">// 安全的</span></span><br><span class="line"><span class="comment">//B* pb = (B*)pa;             // 不安全</span></span><br><span class="line"><span class="keyword">if</span> (pb)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;转换成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">pb-&gt;_a++;</span><br><span class="line">pb-&gt;_b++;</span><br><span class="line">cout &lt;&lt; pb-&gt;_a &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; pb-&gt;_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;转换失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">pa-&gt;_a++;</span><br><span class="line">cout &lt;&lt; pa-&gt;_a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A aa;</span><br><span class="line"><span class="comment">// 父类对象无论如何都是不允许转换成子类对象的</span></span><br><span class="line"><span class="comment">/*B bb = dynamic_cast&lt;B&gt;(aa);</span></span><br><span class="line"><span class="comment">B bb = (B)aa;*/</span></span><br><span class="line">B bb;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fun</span>(&amp;aa);</span><br><span class="line"><span class="built_in">fun</span>(&amp;bb);</span><br><span class="line"><span class="comment">//fun(nullptr); 转换失败并且报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细节部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a1 = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a2 = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A1, <span class="keyword">public</span> A2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _b = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B bb; <span class="comment">//定义子类对象</span></span><br><span class="line">A1* ptr1 = &amp;bb;</span><br><span class="line">A2* ptr2 = &amp;bb;</span><br><span class="line">cout &lt;&lt; ptr1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ptr2 &lt;&lt; endl &lt;&lt; endl;  <span class="comment">//这两个地址是不同的</span></span><br><span class="line"></span><br><span class="line">B* pb1 = (B*)ptr1;</span><br><span class="line">B* pb2 = (B*)ptr2;</span><br><span class="line">cout &lt;&lt; pb1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pb2 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">B* pb3 = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(ptr1);</span><br><span class="line">B* pb4 = <span class="built_in">dynamic_cast</span>&lt;B*&gt;(ptr2);</span><br><span class="line">cout &lt;&lt; pb3 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; pb4 &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tong-1306822294.cos.ap-beijing.myqcloud.com/tong/picture/202301151637140.png"></p><pre><code>可以看到，强转成子类指针，和dynamic_cast都可以将指针位置偏移到头上</code></pre><p>总结：</p><ul><li>如果有个子类的对象，将地址传给一个函数，函数形参是父类的指针，那么函数内部可以将这个指针重新安全的转成子类的指针。</li><li>普通的父类指针强转成子类可能有风险，如果父类的指针本来指向的对象就是父类的对象，那么将这个指针转换成子类，会有越界的风险。</li></ul><h1 id="RTTI"><a href="#RTTI" class="headerlink" title="RTTI"></a>RTTI</h1><blockquote><p>Run-time Type identification ：运行时类型识别</p></blockquote><p>c++通过以下方式支持RTTI</p><ol><li>typeid运算符   (获取对象类型的字符串)</li><li>dynamic_cast运算符 （识别父类的指针是指向父类对象还是子类对象）</li><li>decltype   （推导一个对象类型，这个类型可以用来定义另一个对象）</li></ol>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/CPP/">CPP</category>
      
      
      
      <comments>http://example.com/2023/01/15/CPP/c++%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
